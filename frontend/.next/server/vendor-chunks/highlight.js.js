/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/highlight.js";
exports.ids = ["vendor-chunks/highlight.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/highlight.js/lib/core.js":
/*!***********************************************!*\
  !*** ./node_modules/highlight.js/lib/core.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/* eslint-disable no-multi-assign */ function deepFreeze(obj) {\n    if (obj instanceof Map) {\n        obj.clear = obj.delete = obj.set = function() {\n            throw new Error(\"map is read-only\");\n        };\n    } else if (obj instanceof Set) {\n        obj.add = obj.clear = obj.delete = function() {\n            throw new Error(\"set is read-only\");\n        };\n    }\n    // Freeze self\n    Object.freeze(obj);\n    Object.getOwnPropertyNames(obj).forEach((name)=>{\n        const prop = obj[name];\n        const type = typeof prop;\n        // Freeze prop if it is an object or function and also not already frozen\n        if ((type === \"object\" || type === \"function\") && !Object.isFrozen(prop)) {\n            deepFreeze(prop);\n        }\n    });\n    return obj;\n}\n/** @typedef {import('highlight.js').CallbackResponse} CallbackResponse */ /** @typedef {import('highlight.js').CompiledMode} CompiledMode */ /** @implements CallbackResponse */ class Response {\n    /**\n   * @param {CompiledMode} mode\n   */ constructor(mode){\n        // eslint-disable-next-line no-undefined\n        if (mode.data === undefined) mode.data = {};\n        this.data = mode.data;\n        this.isMatchIgnored = false;\n    }\n    ignoreMatch() {\n        this.isMatchIgnored = true;\n    }\n}\n/**\n * @param {string} value\n * @returns {string}\n */ function escapeHTML(value) {\n    return value.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#x27;\");\n}\n/**\n * performs a shallow merge of multiple objects into one\n *\n * @template T\n * @param {T} original\n * @param {Record<string,any>[]} objects\n * @returns {T} a single new object\n */ function inherit$1(original, ...objects) {\n    /** @type Record<string,any> */ const result = Object.create(null);\n    for(const key in original){\n        result[key] = original[key];\n    }\n    objects.forEach(function(obj) {\n        for(const key in obj){\n            result[key] = obj[key];\n        }\n    });\n    return /** @type {T} */ result;\n}\n/**\n * @typedef {object} Renderer\n * @property {(text: string) => void} addText\n * @property {(node: Node) => void} openNode\n * @property {(node: Node) => void} closeNode\n * @property {() => string} value\n */ /** @typedef {{scope?: string, language?: string, sublanguage?: boolean}} Node */ /** @typedef {{walk: (r: Renderer) => void}} Tree */ /** */ const SPAN_CLOSE = \"</span>\";\n/**\n * Determines if a node needs to be wrapped in <span>\n *\n * @param {Node} node */ const emitsWrappingTags = (node)=>{\n    // rarely we can have a sublanguage where language is undefined\n    // TODO: track down why\n    return !!node.scope;\n};\n/**\n *\n * @param {string} name\n * @param {{prefix:string}} options\n */ const scopeToCSSClass = (name, { prefix })=>{\n    // sub-language\n    if (name.startsWith(\"language:\")) {\n        return name.replace(\"language:\", \"language-\");\n    }\n    // tiered scope: comment.line\n    if (name.includes(\".\")) {\n        const pieces = name.split(\".\");\n        return [\n            `${prefix}${pieces.shift()}`,\n            ...pieces.map((x, i)=>`${x}${\"_\".repeat(i + 1)}`)\n        ].join(\" \");\n    }\n    // simple scope\n    return `${prefix}${name}`;\n};\n/** @type {Renderer} */ class HTMLRenderer {\n    /**\n   * Creates a new HTMLRenderer\n   *\n   * @param {Tree} parseTree - the parse tree (must support `walk` API)\n   * @param {{classPrefix: string}} options\n   */ constructor(parseTree, options){\n        this.buffer = \"\";\n        this.classPrefix = options.classPrefix;\n        parseTree.walk(this);\n    }\n    /**\n   * Adds texts to the output stream\n   *\n   * @param {string} text */ addText(text) {\n        this.buffer += escapeHTML(text);\n    }\n    /**\n   * Adds a node open to the output stream (if needed)\n   *\n   * @param {Node} node */ openNode(node) {\n        if (!emitsWrappingTags(node)) return;\n        const className = scopeToCSSClass(node.scope, {\n            prefix: this.classPrefix\n        });\n        this.span(className);\n    }\n    /**\n   * Adds a node close to the output stream (if needed)\n   *\n   * @param {Node} node */ closeNode(node) {\n        if (!emitsWrappingTags(node)) return;\n        this.buffer += SPAN_CLOSE;\n    }\n    /**\n   * returns the accumulated buffer\n  */ value() {\n        return this.buffer;\n    }\n    // helpers\n    /**\n   * Builds a span element\n   *\n   * @param {string} className */ span(className) {\n        this.buffer += `<span class=\"${className}\">`;\n    }\n}\n/** @typedef {{scope?: string, language?: string, children: Node[]} | string} Node */ /** @typedef {{scope?: string, language?: string, children: Node[]} } DataNode */ /** @typedef {import('highlight.js').Emitter} Emitter */ /**  */ /** @returns {DataNode} */ const newNode = (opts = {})=>{\n    /** @type DataNode */ const result = {\n        children: []\n    };\n    Object.assign(result, opts);\n    return result;\n};\nclass TokenTree {\n    constructor(){\n        /** @type DataNode */ this.rootNode = newNode();\n        this.stack = [\n            this.rootNode\n        ];\n    }\n    get top() {\n        return this.stack[this.stack.length - 1];\n    }\n    get root() {\n        return this.rootNode;\n    }\n    /** @param {Node} node */ add(node) {\n        this.top.children.push(node);\n    }\n    /** @param {string} scope */ openNode(scope) {\n        /** @type Node */ const node = newNode({\n            scope\n        });\n        this.add(node);\n        this.stack.push(node);\n    }\n    closeNode() {\n        if (this.stack.length > 1) {\n            return this.stack.pop();\n        }\n        // eslint-disable-next-line no-undefined\n        return undefined;\n    }\n    closeAllNodes() {\n        while(this.closeNode());\n    }\n    toJSON() {\n        return JSON.stringify(this.rootNode, null, 4);\n    }\n    /**\n   * @typedef { import(\"./html_renderer\").Renderer } Renderer\n   * @param {Renderer} builder\n   */ walk(builder) {\n        // this does not\n        return this.constructor._walk(builder, this.rootNode);\n    // this works\n    // return TokenTree._walk(builder, this.rootNode);\n    }\n    /**\n   * @param {Renderer} builder\n   * @param {Node} node\n   */ static _walk(builder, node) {\n        if (typeof node === \"string\") {\n            builder.addText(node);\n        } else if (node.children) {\n            builder.openNode(node);\n            node.children.forEach((child)=>this._walk(builder, child));\n            builder.closeNode(node);\n        }\n        return builder;\n    }\n    /**\n   * @param {Node} node\n   */ static _collapse(node) {\n        if (typeof node === \"string\") return;\n        if (!node.children) return;\n        if (node.children.every((el)=>typeof el === \"string\")) {\n            // node.text = node.children.join(\"\");\n            // delete node.children;\n            node.children = [\n                node.children.join(\"\")\n            ];\n        } else {\n            node.children.forEach((child)=>{\n                TokenTree._collapse(child);\n            });\n        }\n    }\n}\n/**\n  Currently this is all private API, but this is the minimal API necessary\n  that an Emitter must implement to fully support the parser.\n\n  Minimal interface:\n\n  - addText(text)\n  - __addSublanguage(emitter, subLanguageName)\n  - startScope(scope)\n  - endScope()\n  - finalize()\n  - toHTML()\n\n*/ /**\n * @implements {Emitter}\n */ class TokenTreeEmitter extends TokenTree {\n    /**\n   * @param {*} options\n   */ constructor(options){\n        super();\n        this.options = options;\n    }\n    /**\n   * @param {string} text\n   */ addText(text) {\n        if (text === \"\") {\n            return;\n        }\n        this.add(text);\n    }\n    /** @param {string} scope */ startScope(scope) {\n        this.openNode(scope);\n    }\n    endScope() {\n        this.closeNode();\n    }\n    /**\n   * @param {Emitter & {root: DataNode}} emitter\n   * @param {string} name\n   */ __addSublanguage(emitter, name) {\n        /** @type DataNode */ const node = emitter.root;\n        if (name) node.scope = `language:${name}`;\n        this.add(node);\n    }\n    toHTML() {\n        const renderer = new HTMLRenderer(this, this.options);\n        return renderer.value();\n    }\n    finalize() {\n        this.closeAllNodes();\n        return true;\n    }\n}\n/**\n * @param {string} value\n * @returns {RegExp}\n * */ /**\n * @param {RegExp | string } re\n * @returns {string}\n */ function source(re) {\n    if (!re) return null;\n    if (typeof re === \"string\") return re;\n    return re.source;\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */ function lookahead(re) {\n    return concat(\"(?=\", re, \")\");\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */ function anyNumberOfTimes(re) {\n    return concat(\"(?:\", re, \")*\");\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */ function optional(re) {\n    return concat(\"(?:\", re, \")?\");\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */ function concat(...args) {\n    const joined = args.map((x)=>source(x)).join(\"\");\n    return joined;\n}\n/**\n * @param { Array<string | RegExp | Object> } args\n * @returns {object}\n */ function stripOptionsFromArgs(args) {\n    const opts = args[args.length - 1];\n    if (typeof opts === \"object\" && opts.constructor === Object) {\n        args.splice(args.length - 1, 1);\n        return opts;\n    } else {\n        return {};\n    }\n}\n/** @typedef { {capture?: boolean} } RegexEitherOptions */ /**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args\n * @returns {string}\n */ function either(...args) {\n    /** @type { object & {capture?: boolean} }  */ const opts = stripOptionsFromArgs(args);\n    const joined = \"(\" + (opts.capture ? \"\" : \"?:\") + args.map((x)=>source(x)).join(\"|\") + \")\";\n    return joined;\n}\n/**\n * @param {RegExp | string} re\n * @returns {number}\n */ function countMatchGroups(re) {\n    return new RegExp(re.toString() + \"|\").exec(\"\").length - 1;\n}\n/**\n * Does lexeme start with a regular expression match at the beginning\n * @param {RegExp} re\n * @param {string} lexeme\n */ function startsWith(re, lexeme) {\n    const match = re && re.exec(lexeme);\n    return match && match.index === 0;\n}\n// BACKREF_RE matches an open parenthesis or backreference. To avoid\n// an incorrect parse, it additionally matches the following:\n// - [...] elements, where the meaning of parentheses and escapes change\n// - other escape sequences, so we do not misparse escape sequences as\n//   interesting elements\n// - non-matching or lookahead parentheses, which do not capture. These\n//   follow the '(' with a '?'.\nconst BACKREF_RE = /\\[(?:[^\\\\\\]]|\\\\.)*\\]|\\(\\??|\\\\([1-9][0-9]*)|\\\\./;\n// **INTERNAL** Not intended for outside usage\n// join logically computes regexps.join(separator), but fixes the\n// backreferences so they continue to match.\n// it also places each individual regular expression into it's own\n// match group, keeping track of the sequencing of those match groups\n// is currently an exercise for the caller. :-)\n/**\n * @param {(string | RegExp)[]} regexps\n * @param {{joinWith: string}} opts\n * @returns {string}\n */ function _rewriteBackreferences(regexps, { joinWith }) {\n    let numCaptures = 0;\n    return regexps.map((regex)=>{\n        numCaptures += 1;\n        const offset = numCaptures;\n        let re = source(regex);\n        let out = \"\";\n        while(re.length > 0){\n            const match = BACKREF_RE.exec(re);\n            if (!match) {\n                out += re;\n                break;\n            }\n            out += re.substring(0, match.index);\n            re = re.substring(match.index + match[0].length);\n            if (match[0][0] === \"\\\\\" && match[1]) {\n                // Adjust the backreference.\n                out += \"\\\\\" + String(Number(match[1]) + offset);\n            } else {\n                out += match[0];\n                if (match[0] === \"(\") {\n                    numCaptures++;\n                }\n            }\n        }\n        return out;\n    }).map((re)=>`(${re})`).join(joinWith);\n}\n/** @typedef {import('highlight.js').Mode} Mode */ /** @typedef {import('highlight.js').ModeCallback} ModeCallback */ // Common regexps\nconst MATCH_NOTHING_RE = /\\b\\B/;\nconst IDENT_RE = \"[a-zA-Z]\\\\w*\";\nconst UNDERSCORE_IDENT_RE = \"[a-zA-Z_]\\\\w*\";\nconst NUMBER_RE = \"\\\\b\\\\d+(\\\\.\\\\d+)?\";\nconst C_NUMBER_RE = \"(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)\"; // 0x..., 0..., decimal, float\nconst BINARY_NUMBER_RE = \"\\\\b(0b[01]+)\"; // 0b...\nconst RE_STARTERS_RE = \"!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~\";\n/**\n* @param { Partial<Mode> & {binary?: string | RegExp} } opts\n*/ const SHEBANG = (opts = {})=>{\n    const beginShebang = /^#![ ]*\\//;\n    if (opts.binary) {\n        opts.begin = concat(beginShebang, /.*\\b/, opts.binary, /\\b.*/);\n    }\n    return inherit$1({\n        scope: \"meta\",\n        begin: beginShebang,\n        end: /$/,\n        relevance: 0,\n        /** @type {ModeCallback} */ \"on:begin\": (m, resp)=>{\n            if (m.index !== 0) resp.ignoreMatch();\n        }\n    }, opts);\n};\n// Common modes\nconst BACKSLASH_ESCAPE = {\n    begin: \"\\\\\\\\[\\\\s\\\\S]\",\n    relevance: 0\n};\nconst APOS_STRING_MODE = {\n    scope: \"string\",\n    begin: \"'\",\n    end: \"'\",\n    illegal: \"\\\\n\",\n    contains: [\n        BACKSLASH_ESCAPE\n    ]\n};\nconst QUOTE_STRING_MODE = {\n    scope: \"string\",\n    begin: '\"',\n    end: '\"',\n    illegal: \"\\\\n\",\n    contains: [\n        BACKSLASH_ESCAPE\n    ]\n};\nconst PHRASAL_WORDS_MODE = {\n    begin: /\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/\n};\n/**\n * Creates a comment mode\n *\n * @param {string | RegExp} begin\n * @param {string | RegExp} end\n * @param {Mode | {}} [modeOptions]\n * @returns {Partial<Mode>}\n */ const COMMENT = function(begin, end, modeOptions = {}) {\n    const mode = inherit$1({\n        scope: \"comment\",\n        begin,\n        end,\n        contains: []\n    }, modeOptions);\n    mode.contains.push({\n        scope: \"doctag\",\n        // hack to avoid the space from being included. the space is necessary to\n        // match here to prevent the plain text rule below from gobbling up doctags\n        begin: \"[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)\",\n        end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,\n        excludeBegin: true,\n        relevance: 0\n    });\n    const ENGLISH_WORD = either(// list of common 1 and 2 letter words in English\n    \"I\", \"a\", \"is\", \"so\", \"us\", \"to\", \"at\", \"if\", \"in\", \"it\", \"on\", // note: this is not an exhaustive list of contractions, just popular ones\n    /[A-Za-z]+['](d|ve|re|ll|t|s|n)/, /[A-Za-z]+[-][a-z]+/, /[A-Za-z][a-z]{2,}/ // allow capitalized words at beginning of sentences\n    );\n    // looking like plain text, more likely to be a comment\n    mode.contains.push({\n        // TODO: how to include \", (, ) without breaking grammars that use these for\n        // comment delimiters?\n        // begin: /[ ]+([()\"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()\":]?([.][ ]|[ ]|\\))){3}/\n        // ---\n        // this tries to find sequences of 3 english words in a row (without any\n        // \"programming\" type syntax) this gives us a strong signal that we've\n        // TRULY found a comment - vs perhaps scanning with the wrong language.\n        // It's possible to find something that LOOKS like the start of the\n        // comment - but then if there is no readable text - good chance it is a\n        // false match and not a comment.\n        //\n        // for a visual example please see:\n        // https://github.com/highlightjs/highlight.js/issues/2827\n        begin: concat(/[ ]+/, \"(\", ENGLISH_WORD, /[.]?[:]?([.][ ]|[ ])/, \"){3}\") // look for 3 words in a row\n    });\n    return mode;\n};\nconst C_LINE_COMMENT_MODE = COMMENT(\"//\", \"$\");\nconst C_BLOCK_COMMENT_MODE = COMMENT(\"/\\\\*\", \"\\\\*/\");\nconst HASH_COMMENT_MODE = COMMENT(\"#\", \"$\");\nconst NUMBER_MODE = {\n    scope: \"number\",\n    begin: NUMBER_RE,\n    relevance: 0\n};\nconst C_NUMBER_MODE = {\n    scope: \"number\",\n    begin: C_NUMBER_RE,\n    relevance: 0\n};\nconst BINARY_NUMBER_MODE = {\n    scope: \"number\",\n    begin: BINARY_NUMBER_RE,\n    relevance: 0\n};\nconst REGEXP_MODE = {\n    scope: \"regexp\",\n    begin: /\\/(?=[^/\\n]*\\/)/,\n    end: /\\/[gimuy]*/,\n    contains: [\n        BACKSLASH_ESCAPE,\n        {\n            begin: /\\[/,\n            end: /\\]/,\n            relevance: 0,\n            contains: [\n                BACKSLASH_ESCAPE\n            ]\n        }\n    ]\n};\nconst TITLE_MODE = {\n    scope: \"title\",\n    begin: IDENT_RE,\n    relevance: 0\n};\nconst UNDERSCORE_TITLE_MODE = {\n    scope: \"title\",\n    begin: UNDERSCORE_IDENT_RE,\n    relevance: 0\n};\nconst METHOD_GUARD = {\n    // excludes method names from keyword processing\n    begin: \"\\\\.\\\\s*\" + UNDERSCORE_IDENT_RE,\n    relevance: 0\n};\n/**\n * Adds end same as begin mechanics to a mode\n *\n * Your mode must include at least a single () match group as that first match\n * group is what is used for comparison\n * @param {Partial<Mode>} mode\n */ const END_SAME_AS_BEGIN = function(mode) {\n    return Object.assign(mode, {\n        /** @type {ModeCallback} */ \"on:begin\": (m, resp)=>{\n            resp.data._beginMatch = m[1];\n        },\n        /** @type {ModeCallback} */ \"on:end\": (m, resp)=>{\n            if (resp.data._beginMatch !== m[1]) resp.ignoreMatch();\n        }\n    });\n};\nvar MODES = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    APOS_STRING_MODE: APOS_STRING_MODE,\n    BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,\n    BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,\n    BINARY_NUMBER_RE: BINARY_NUMBER_RE,\n    COMMENT: COMMENT,\n    C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,\n    C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,\n    C_NUMBER_MODE: C_NUMBER_MODE,\n    C_NUMBER_RE: C_NUMBER_RE,\n    END_SAME_AS_BEGIN: END_SAME_AS_BEGIN,\n    HASH_COMMENT_MODE: HASH_COMMENT_MODE,\n    IDENT_RE: IDENT_RE,\n    MATCH_NOTHING_RE: MATCH_NOTHING_RE,\n    METHOD_GUARD: METHOD_GUARD,\n    NUMBER_MODE: NUMBER_MODE,\n    NUMBER_RE: NUMBER_RE,\n    PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,\n    QUOTE_STRING_MODE: QUOTE_STRING_MODE,\n    REGEXP_MODE: REGEXP_MODE,\n    RE_STARTERS_RE: RE_STARTERS_RE,\n    SHEBANG: SHEBANG,\n    TITLE_MODE: TITLE_MODE,\n    UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,\n    UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE\n});\n/**\n@typedef {import('highlight.js').CallbackResponse} CallbackResponse\n@typedef {import('highlight.js').CompilerExt} CompilerExt\n*/ // Grammar extensions / plugins\n// See: https://github.com/highlightjs/highlight.js/issues/2833\n// Grammar extensions allow \"syntactic sugar\" to be added to the grammar modes\n// without requiring any underlying changes to the compiler internals.\n// `compileMatch` being the perfect small example of now allowing a grammar\n// author to write `match` when they desire to match a single expression rather\n// than being forced to use `begin`.  The extension then just moves `match` into\n// `begin` when it runs.  Ie, no features have been added, but we've just made\n// the experience of writing (and reading grammars) a little bit nicer.\n// ------\n// TODO: We need negative look-behind support to do this properly\n/**\n * Skip a match if it has a preceding dot\n *\n * This is used for `beginKeywords` to prevent matching expressions such as\n * `bob.keyword.do()`. The mode compiler automatically wires this up as a\n * special _internal_ 'on:begin' callback for modes with `beginKeywords`\n * @param {RegExpMatchArray} match\n * @param {CallbackResponse} response\n */ function skipIfHasPrecedingDot(match, response) {\n    const before = match.input[match.index - 1];\n    if (before === \".\") {\n        response.ignoreMatch();\n    }\n}\n/**\n *\n * @type {CompilerExt}\n */ function scopeClassName(mode, _parent) {\n    // eslint-disable-next-line no-undefined\n    if (mode.className !== undefined) {\n        mode.scope = mode.className;\n        delete mode.className;\n    }\n}\n/**\n * `beginKeywords` syntactic sugar\n * @type {CompilerExt}\n */ function beginKeywords(mode, parent) {\n    if (!parent) return;\n    if (!mode.beginKeywords) return;\n    // for languages with keywords that include non-word characters checking for\n    // a word boundary is not sufficient, so instead we check for a word boundary\n    // or whitespace - this does no harm in any case since our keyword engine\n    // doesn't allow spaces in keywords anyways and we still check for the boundary\n    // first\n    mode.begin = \"\\\\b(\" + mode.beginKeywords.split(\" \").join(\"|\") + \")(?!\\\\.)(?=\\\\b|\\\\s)\";\n    mode.__beforeBegin = skipIfHasPrecedingDot;\n    mode.keywords = mode.keywords || mode.beginKeywords;\n    delete mode.beginKeywords;\n    // prevents double relevance, the keywords themselves provide\n    // relevance, the mode doesn't need to double it\n    // eslint-disable-next-line no-undefined\n    if (mode.relevance === undefined) mode.relevance = 0;\n}\n/**\n * Allow `illegal` to contain an array of illegal values\n * @type {CompilerExt}\n */ function compileIllegal(mode, _parent) {\n    if (!Array.isArray(mode.illegal)) return;\n    mode.illegal = either(...mode.illegal);\n}\n/**\n * `match` to match a single expression for readability\n * @type {CompilerExt}\n */ function compileMatch(mode, _parent) {\n    if (!mode.match) return;\n    if (mode.begin || mode.end) throw new Error(\"begin & end are not supported with match\");\n    mode.begin = mode.match;\n    delete mode.match;\n}\n/**\n * provides the default 1 relevance to all modes\n * @type {CompilerExt}\n */ function compileRelevance(mode, _parent) {\n    // eslint-disable-next-line no-undefined\n    if (mode.relevance === undefined) mode.relevance = 1;\n}\n// allow beforeMatch to act as a \"qualifier\" for the match\n// the full match begin must be [beforeMatch][begin]\nconst beforeMatchExt = (mode, parent)=>{\n    if (!mode.beforeMatch) return;\n    // starts conflicts with endsParent which we need to make sure the child\n    // rule is not matched multiple times\n    if (mode.starts) throw new Error(\"beforeMatch cannot be used with starts\");\n    const originalMode = Object.assign({}, mode);\n    Object.keys(mode).forEach((key)=>{\n        delete mode[key];\n    });\n    mode.keywords = originalMode.keywords;\n    mode.begin = concat(originalMode.beforeMatch, lookahead(originalMode.begin));\n    mode.starts = {\n        relevance: 0,\n        contains: [\n            Object.assign(originalMode, {\n                endsParent: true\n            })\n        ]\n    };\n    mode.relevance = 0;\n    delete originalMode.beforeMatch;\n};\n// keywords that should have no default relevance value\nconst COMMON_KEYWORDS = [\n    \"of\",\n    \"and\",\n    \"for\",\n    \"in\",\n    \"not\",\n    \"or\",\n    \"if\",\n    \"then\",\n    \"parent\",\n    \"list\",\n    \"value\" // common variable name\n];\nconst DEFAULT_KEYWORD_SCOPE = \"keyword\";\n/**\n * Given raw keywords from a language definition, compile them.\n *\n * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords\n * @param {boolean} caseInsensitive\n */ function compileKeywords(rawKeywords, caseInsensitive, scopeName = DEFAULT_KEYWORD_SCOPE) {\n    /** @type {import(\"highlight.js/private\").KeywordDict} */ const compiledKeywords = Object.create(null);\n    // input can be a string of keywords, an array of keywords, or a object with\n    // named keys representing scopeName (which can then point to a string or array)\n    if (typeof rawKeywords === \"string\") {\n        compileList(scopeName, rawKeywords.split(\" \"));\n    } else if (Array.isArray(rawKeywords)) {\n        compileList(scopeName, rawKeywords);\n    } else {\n        Object.keys(rawKeywords).forEach(function(scopeName) {\n            // collapse all our objects back into the parent object\n            Object.assign(compiledKeywords, compileKeywords(rawKeywords[scopeName], caseInsensitive, scopeName));\n        });\n    }\n    return compiledKeywords;\n    // ---\n    /**\n   * Compiles an individual list of keywords\n   *\n   * Ex: \"for if when while|5\"\n   *\n   * @param {string} scopeName\n   * @param {Array<string>} keywordList\n   */ function compileList(scopeName, keywordList) {\n        if (caseInsensitive) {\n            keywordList = keywordList.map((x)=>x.toLowerCase());\n        }\n        keywordList.forEach(function(keyword) {\n            const pair = keyword.split(\"|\");\n            compiledKeywords[pair[0]] = [\n                scopeName,\n                scoreForKeyword(pair[0], pair[1])\n            ];\n        });\n    }\n}\n/**\n * Returns the proper score for a given keyword\n *\n * Also takes into account comment keywords, which will be scored 0 UNLESS\n * another score has been manually assigned.\n * @param {string} keyword\n * @param {string} [providedScore]\n */ function scoreForKeyword(keyword, providedScore) {\n    // manual scores always win over common keywords\n    // so you can force a score of 1 if you really insist\n    if (providedScore) {\n        return Number(providedScore);\n    }\n    return commonKeyword(keyword) ? 0 : 1;\n}\n/**\n * Determines if a given keyword is common or not\n *\n * @param {string} keyword */ function commonKeyword(keyword) {\n    return COMMON_KEYWORDS.includes(keyword.toLowerCase());\n}\n/*\n\nFor the reasoning behind this please see:\nhttps://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419\n\n*/ /**\n * @type {Record<string, boolean>}\n */ const seenDeprecations = {};\n/**\n * @param {string} message\n */ const error = (message)=>{\n    console.error(message);\n};\n/**\n * @param {string} message\n * @param {any} args\n */ const warn = (message, ...args)=>{\n    console.log(`WARN: ${message}`, ...args);\n};\n/**\n * @param {string} version\n * @param {string} message\n */ const deprecated = (version, message)=>{\n    if (seenDeprecations[`${version}/${message}`]) return;\n    console.log(`Deprecated as of ${version}. ${message}`);\n    seenDeprecations[`${version}/${message}`] = true;\n};\n/* eslint-disable no-throw-literal */ /**\n@typedef {import('highlight.js').CompiledMode} CompiledMode\n*/ const MultiClassError = new Error();\n/**\n * Renumbers labeled scope names to account for additional inner match\n * groups that otherwise would break everything.\n *\n * Lets say we 3 match scopes:\n *\n *   { 1 => ..., 2 => ..., 3 => ... }\n *\n * So what we need is a clean match like this:\n *\n *   (a)(b)(c) => [ \"a\", \"b\", \"c\" ]\n *\n * But this falls apart with inner match groups:\n *\n * (a)(((b)))(c) => [\"a\", \"b\", \"b\", \"b\", \"c\" ]\n *\n * Our scopes are now \"out of alignment\" and we're repeating `b` 3 times.\n * What needs to happen is the numbers are remapped:\n *\n *   { 1 => ..., 2 => ..., 5 => ... }\n *\n * We also need to know that the ONLY groups that should be output\n * are 1, 2, and 5.  This function handles this behavior.\n *\n * @param {CompiledMode} mode\n * @param {Array<RegExp | string>} regexes\n * @param {{key: \"beginScope\"|\"endScope\"}} opts\n */ function remapScopeNames(mode, regexes, { key }) {\n    let offset = 0;\n    const scopeNames = mode[key];\n    /** @type Record<number,boolean> */ const emit = {};\n    /** @type Record<number,string> */ const positions = {};\n    for(let i = 1; i <= regexes.length; i++){\n        positions[i + offset] = scopeNames[i];\n        emit[i + offset] = true;\n        offset += countMatchGroups(regexes[i - 1]);\n    }\n    // we use _emit to keep track of which match groups are \"top-level\" to avoid double\n    // output from inside match groups\n    mode[key] = positions;\n    mode[key]._emit = emit;\n    mode[key]._multi = true;\n}\n/**\n * @param {CompiledMode} mode\n */ function beginMultiClass(mode) {\n    if (!Array.isArray(mode.begin)) return;\n    if (mode.skip || mode.excludeBegin || mode.returnBegin) {\n        error(\"skip, excludeBegin, returnBegin not compatible with beginScope: {}\");\n        throw MultiClassError;\n    }\n    if (typeof mode.beginScope !== \"object\" || mode.beginScope === null) {\n        error(\"beginScope must be object\");\n        throw MultiClassError;\n    }\n    remapScopeNames(mode, mode.begin, {\n        key: \"beginScope\"\n    });\n    mode.begin = _rewriteBackreferences(mode.begin, {\n        joinWith: \"\"\n    });\n}\n/**\n * @param {CompiledMode} mode\n */ function endMultiClass(mode) {\n    if (!Array.isArray(mode.end)) return;\n    if (mode.skip || mode.excludeEnd || mode.returnEnd) {\n        error(\"skip, excludeEnd, returnEnd not compatible with endScope: {}\");\n        throw MultiClassError;\n    }\n    if (typeof mode.endScope !== \"object\" || mode.endScope === null) {\n        error(\"endScope must be object\");\n        throw MultiClassError;\n    }\n    remapScopeNames(mode, mode.end, {\n        key: \"endScope\"\n    });\n    mode.end = _rewriteBackreferences(mode.end, {\n        joinWith: \"\"\n    });\n}\n/**\n * this exists only to allow `scope: {}` to be used beside `match:`\n * Otherwise `beginScope` would necessary and that would look weird\n\n  {\n    match: [ /def/, /\\w+/ ]\n    scope: { 1: \"keyword\" , 2: \"title\" }\n  }\n\n * @param {CompiledMode} mode\n */ function scopeSugar(mode) {\n    if (mode.scope && typeof mode.scope === \"object\" && mode.scope !== null) {\n        mode.beginScope = mode.scope;\n        delete mode.scope;\n    }\n}\n/**\n * @param {CompiledMode} mode\n */ function MultiClass(mode) {\n    scopeSugar(mode);\n    if (typeof mode.beginScope === \"string\") {\n        mode.beginScope = {\n            _wrap: mode.beginScope\n        };\n    }\n    if (typeof mode.endScope === \"string\") {\n        mode.endScope = {\n            _wrap: mode.endScope\n        };\n    }\n    beginMultiClass(mode);\n    endMultiClass(mode);\n}\n/**\n@typedef {import('highlight.js').Mode} Mode\n@typedef {import('highlight.js').CompiledMode} CompiledMode\n@typedef {import('highlight.js').Language} Language\n@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin\n@typedef {import('highlight.js').CompiledLanguage} CompiledLanguage\n*/ // compilation\n/**\n * Compiles a language definition result\n *\n * Given the raw result of a language definition (Language), compiles this so\n * that it is ready for highlighting code.\n * @param {Language} language\n * @returns {CompiledLanguage}\n */ function compileLanguage(language) {\n    /**\n   * Builds a regex with the case sensitivity of the current language\n   *\n   * @param {RegExp | string} value\n   * @param {boolean} [global]\n   */ function langRe(value, global) {\n        return new RegExp(source(value), \"m\" + (language.case_insensitive ? \"i\" : \"\") + (language.unicodeRegex ? \"u\" : \"\") + (global ? \"g\" : \"\"));\n    }\n    /**\n    Stores multiple regular expressions and allows you to quickly search for\n    them all in a string simultaneously - returning the first match.  It does\n    this by creating a huge (a|b|c) regex - each individual item wrapped with ()\n    and joined by `|` - using match groups to track position.  When a match is\n    found checking which position in the array has content allows us to figure\n    out which of the original regexes / match groups triggered the match.\n\n    The match object itself (the result of `Regex.exec`) is returned but also\n    enhanced by merging in any meta-data that was registered with the regex.\n    This is how we keep track of which mode matched, and what type of rule\n    (`illegal`, `begin`, end, etc).\n  */ class MultiRegex {\n        constructor(){\n            this.matchIndexes = {};\n            // @ts-ignore\n            this.regexes = [];\n            this.matchAt = 1;\n            this.position = 0;\n        }\n        // @ts-ignore\n        addRule(re, opts) {\n            opts.position = this.position++;\n            // @ts-ignore\n            this.matchIndexes[this.matchAt] = opts;\n            this.regexes.push([\n                opts,\n                re\n            ]);\n            this.matchAt += countMatchGroups(re) + 1;\n        }\n        compile() {\n            if (this.regexes.length === 0) {\n                // avoids the need to check length every time exec is called\n                // @ts-ignore\n                this.exec = ()=>null;\n            }\n            const terminators = this.regexes.map((el)=>el[1]);\n            this.matcherRe = langRe(_rewriteBackreferences(terminators, {\n                joinWith: \"|\"\n            }), true);\n            this.lastIndex = 0;\n        }\n        /** @param {string} s */ exec(s) {\n            this.matcherRe.lastIndex = this.lastIndex;\n            const match = this.matcherRe.exec(s);\n            if (!match) {\n                return null;\n            }\n            // eslint-disable-next-line no-undefined\n            const i = match.findIndex((el, i)=>i > 0 && el !== undefined);\n            // @ts-ignore\n            const matchData = this.matchIndexes[i];\n            // trim off any earlier non-relevant match groups (ie, the other regex\n            // match groups that make up the multi-matcher)\n            match.splice(0, i);\n            return Object.assign(match, matchData);\n        }\n    }\n    /*\n    Created to solve the key deficiently with MultiRegex - there is no way to\n    test for multiple matches at a single location.  Why would we need to do\n    that?  In the future a more dynamic engine will allow certain matches to be\n    ignored.  An example: if we matched say the 3rd regex in a large group but\n    decided to ignore it - we'd need to started testing again at the 4th\n    regex... but MultiRegex itself gives us no real way to do that.\n\n    So what this class creates MultiRegexs on the fly for whatever search\n    position they are needed.\n\n    NOTE: These additional MultiRegex objects are created dynamically.  For most\n    grammars most of the time we will never actually need anything more than the\n    first MultiRegex - so this shouldn't have too much overhead.\n\n    Say this is our search group, and we match regex3, but wish to ignore it.\n\n      regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0\n\n    What we need is a new MultiRegex that only includes the remaining\n    possibilities:\n\n      regex4 | regex5                               ' ie, startAt = 3\n\n    This class wraps all that complexity up in a simple API... `startAt` decides\n    where in the array of expressions to start doing the matching. It\n    auto-increments, so if a match is found at position 2, then startAt will be\n    set to 3.  If the end is reached startAt will return to 0.\n\n    MOST of the time the parser will be setting startAt manually to 0.\n  */ class ResumableMultiRegex {\n        constructor(){\n            // @ts-ignore\n            this.rules = [];\n            // @ts-ignore\n            this.multiRegexes = [];\n            this.count = 0;\n            this.lastIndex = 0;\n            this.regexIndex = 0;\n        }\n        // @ts-ignore\n        getMatcher(index) {\n            if (this.multiRegexes[index]) return this.multiRegexes[index];\n            const matcher = new MultiRegex();\n            this.rules.slice(index).forEach(([re, opts])=>matcher.addRule(re, opts));\n            matcher.compile();\n            this.multiRegexes[index] = matcher;\n            return matcher;\n        }\n        resumingScanAtSamePosition() {\n            return this.regexIndex !== 0;\n        }\n        considerAll() {\n            this.regexIndex = 0;\n        }\n        // @ts-ignore\n        addRule(re, opts) {\n            this.rules.push([\n                re,\n                opts\n            ]);\n            if (opts.type === \"begin\") this.count++;\n        }\n        /** @param {string} s */ exec(s) {\n            const m = this.getMatcher(this.regexIndex);\n            m.lastIndex = this.lastIndex;\n            let result = m.exec(s);\n            // The following is because we have no easy way to say \"resume scanning at the\n            // existing position but also skip the current rule ONLY\". What happens is\n            // all prior rules are also skipped which can result in matching the wrong\n            // thing. Example of matching \"booger\":\n            // our matcher is [string, \"booger\", number]\n            //\n            // ....booger....\n            // if \"booger\" is ignored then we'd really need a regex to scan from the\n            // SAME position for only: [string, number] but ignoring \"booger\" (if it\n            // was the first match), a simple resume would scan ahead who knows how\n            // far looking only for \"number\", ignoring potential string matches (or\n            // future \"booger\" matches that might be valid.)\n            // So what we do: We execute two matchers, one resuming at the same\n            // position, but the second full matcher starting at the position after:\n            //     /--- resume first regex match here (for [number])\n            //     |/---- full match here for [string, \"booger\", number]\n            //     vv\n            // ....booger....\n            // Which ever results in a match first is then used. So this 3-4 step\n            // process essentially allows us to say \"match at this position, excluding\n            // a prior rule that was ignored\".\n            //\n            // 1. Match \"booger\" first, ignore. Also proves that [string] does non match.\n            // 2. Resume matching for [number]\n            // 3. Match at index + 1 for [string, \"booger\", number]\n            // 4. If #2 and #3 result in matches, which came first?\n            if (this.resumingScanAtSamePosition()) {\n                if (result && result.index === this.lastIndex) ;\n                else {\n                    const m2 = this.getMatcher(0);\n                    m2.lastIndex = this.lastIndex + 1;\n                    result = m2.exec(s);\n                }\n            }\n            if (result) {\n                this.regexIndex += result.position + 1;\n                if (this.regexIndex === this.count) {\n                    // wrap-around to considering all matches again\n                    this.considerAll();\n                }\n            }\n            return result;\n        }\n    }\n    /**\n   * Given a mode, builds a huge ResumableMultiRegex that can be used to walk\n   * the content and find matches.\n   *\n   * @param {CompiledMode} mode\n   * @returns {ResumableMultiRegex}\n   */ function buildModeRegex(mode) {\n        const mm = new ResumableMultiRegex();\n        mode.contains.forEach((term)=>mm.addRule(term.begin, {\n                rule: term,\n                type: \"begin\"\n            }));\n        if (mode.terminatorEnd) {\n            mm.addRule(mode.terminatorEnd, {\n                type: \"end\"\n            });\n        }\n        if (mode.illegal) {\n            mm.addRule(mode.illegal, {\n                type: \"illegal\"\n            });\n        }\n        return mm;\n    }\n    /** skip vs abort vs ignore\n   *\n   * @skip   - The mode is still entered and exited normally (and contains rules apply),\n   *           but all content is held and added to the parent buffer rather than being\n   *           output when the mode ends.  Mostly used with `sublanguage` to build up\n   *           a single large buffer than can be parsed by sublanguage.\n   *\n   *             - The mode begin ands ends normally.\n   *             - Content matched is added to the parent mode buffer.\n   *             - The parser cursor is moved forward normally.\n   *\n   * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it\n   *           never matched) but DOES NOT continue to match subsequent `contains`\n   *           modes.  Abort is bad/suboptimal because it can result in modes\n   *           farther down not getting applied because an earlier rule eats the\n   *           content but then aborts.\n   *\n   *             - The mode does not begin.\n   *             - Content matched by `begin` is added to the mode buffer.\n   *             - The parser cursor is moved forward accordingly.\n   *\n   * @ignore - Ignores the mode (as if it never matched) and continues to match any\n   *           subsequent `contains` modes.  Ignore isn't technically possible with\n   *           the current parser implementation.\n   *\n   *             - The mode does not begin.\n   *             - Content matched by `begin` is ignored.\n   *             - The parser cursor is not moved forward.\n   */ /**\n   * Compiles an individual mode\n   *\n   * This can raise an error if the mode contains certain detectable known logic\n   * issues.\n   * @param {Mode} mode\n   * @param {CompiledMode | null} [parent]\n   * @returns {CompiledMode | never}\n   */ function compileMode(mode, parent) {\n        const cmode = /** @type CompiledMode */ mode;\n        if (mode.isCompiled) return cmode;\n        [\n            scopeClassName,\n            // do this early so compiler extensions generally don't have to worry about\n            // the distinction between match/begin\n            compileMatch,\n            MultiClass,\n            beforeMatchExt\n        ].forEach((ext)=>ext(mode, parent));\n        language.compilerExtensions.forEach((ext)=>ext(mode, parent));\n        // __beforeBegin is considered private API, internal use only\n        mode.__beforeBegin = null;\n        [\n            beginKeywords,\n            // do this later so compiler extensions that come earlier have access to the\n            // raw array if they wanted to perhaps manipulate it, etc.\n            compileIllegal,\n            // default to 1 relevance if not specified\n            compileRelevance\n        ].forEach((ext)=>ext(mode, parent));\n        mode.isCompiled = true;\n        let keywordPattern = null;\n        if (typeof mode.keywords === \"object\" && mode.keywords.$pattern) {\n            // we need a copy because keywords might be compiled multiple times\n            // so we can't go deleting $pattern from the original on the first\n            // pass\n            mode.keywords = Object.assign({}, mode.keywords);\n            keywordPattern = mode.keywords.$pattern;\n            delete mode.keywords.$pattern;\n        }\n        keywordPattern = keywordPattern || /\\w+/;\n        if (mode.keywords) {\n            mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);\n        }\n        cmode.keywordPatternRe = langRe(keywordPattern, true);\n        if (parent) {\n            if (!mode.begin) mode.begin = /\\B|\\b/;\n            cmode.beginRe = langRe(cmode.begin);\n            if (!mode.end && !mode.endsWithParent) mode.end = /\\B|\\b/;\n            if (mode.end) cmode.endRe = langRe(cmode.end);\n            cmode.terminatorEnd = source(cmode.end) || \"\";\n            if (mode.endsWithParent && parent.terminatorEnd) {\n                cmode.terminatorEnd += (mode.end ? \"|\" : \"\") + parent.terminatorEnd;\n            }\n        }\n        if (mode.illegal) cmode.illegalRe = langRe(/** @type {RegExp | string} */ mode.illegal);\n        if (!mode.contains) mode.contains = [];\n        mode.contains = [].concat(...mode.contains.map(function(c) {\n            return expandOrCloneMode(c === \"self\" ? mode : c);\n        }));\n        mode.contains.forEach(function(c) {\n            compileMode(/** @type Mode */ c, cmode);\n        });\n        if (mode.starts) {\n            compileMode(mode.starts, parent);\n        }\n        cmode.matcher = buildModeRegex(cmode);\n        return cmode;\n    }\n    if (!language.compilerExtensions) language.compilerExtensions = [];\n    // self is not valid at the top-level\n    if (language.contains && language.contains.includes(\"self\")) {\n        throw new Error(\"ERR: contains `self` is not supported at the top-level of a language.  See documentation.\");\n    }\n    // we need a null object, which inherit will guarantee\n    language.classNameAliases = inherit$1(language.classNameAliases || {});\n    return compileMode(/** @type Mode */ language);\n}\n/**\n * Determines if a mode has a dependency on it's parent or not\n *\n * If a mode does have a parent dependency then often we need to clone it if\n * it's used in multiple places so that each copy points to the correct parent,\n * where-as modes without a parent can often safely be re-used at the bottom of\n * a mode chain.\n *\n * @param {Mode | null} mode\n * @returns {boolean} - is there a dependency on the parent?\n * */ function dependencyOnParent(mode) {\n    if (!mode) return false;\n    return mode.endsWithParent || dependencyOnParent(mode.starts);\n}\n/**\n * Expands a mode or clones it if necessary\n *\n * This is necessary for modes with parental dependenceis (see notes on\n * `dependencyOnParent`) and for nodes that have `variants` - which must then be\n * exploded into their own individual modes at compile time.\n *\n * @param {Mode} mode\n * @returns {Mode | Mode[]}\n * */ function expandOrCloneMode(mode) {\n    if (mode.variants && !mode.cachedVariants) {\n        mode.cachedVariants = mode.variants.map(function(variant) {\n            return inherit$1(mode, {\n                variants: null\n            }, variant);\n        });\n    }\n    // EXPAND\n    // if we have variants then essentially \"replace\" the mode with the variants\n    // this happens in compileMode, where this function is called from\n    if (mode.cachedVariants) {\n        return mode.cachedVariants;\n    }\n    // CLONE\n    // if we have dependencies on parents then we need a unique\n    // instance of ourselves, so we can be reused with many\n    // different parents without issue\n    if (dependencyOnParent(mode)) {\n        return inherit$1(mode, {\n            starts: mode.starts ? inherit$1(mode.starts) : null\n        });\n    }\n    if (Object.isFrozen(mode)) {\n        return inherit$1(mode);\n    }\n    // no special dependency issues, just return ourselves\n    return mode;\n}\nvar version = \"11.11.1\";\nclass HTMLInjectionError extends Error {\n    constructor(reason, html){\n        super(reason);\n        this.name = \"HTMLInjectionError\";\n        this.html = html;\n    }\n}\n/*\nSyntax highlighting with language autodetection.\nhttps://highlightjs.org/\n*/ /**\n@typedef {import('highlight.js').Mode} Mode\n@typedef {import('highlight.js').CompiledMode} CompiledMode\n@typedef {import('highlight.js').CompiledScope} CompiledScope\n@typedef {import('highlight.js').Language} Language\n@typedef {import('highlight.js').HLJSApi} HLJSApi\n@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin\n@typedef {import('highlight.js').PluginEvent} PluginEvent\n@typedef {import('highlight.js').HLJSOptions} HLJSOptions\n@typedef {import('highlight.js').LanguageFn} LanguageFn\n@typedef {import('highlight.js').HighlightedHTMLElement} HighlightedHTMLElement\n@typedef {import('highlight.js').BeforeHighlightContext} BeforeHighlightContext\n@typedef {import('highlight.js/private').MatchType} MatchType\n@typedef {import('highlight.js/private').KeywordData} KeywordData\n@typedef {import('highlight.js/private').EnhancedMatch} EnhancedMatch\n@typedef {import('highlight.js/private').AnnotatedError} AnnotatedError\n@typedef {import('highlight.js').AutoHighlightResult} AutoHighlightResult\n@typedef {import('highlight.js').HighlightOptions} HighlightOptions\n@typedef {import('highlight.js').HighlightResult} HighlightResult\n*/ const escape = escapeHTML;\nconst inherit = inherit$1;\nconst NO_MATCH = Symbol(\"nomatch\");\nconst MAX_KEYWORD_HITS = 7;\n/**\n * @param {any} hljs - object that is extended (legacy)\n * @returns {HLJSApi}\n */ const HLJS = function(hljs) {\n    // Global internal variables used within the highlight.js library.\n    /** @type {Record<string, Language>} */ const languages = Object.create(null);\n    /** @type {Record<string, string>} */ const aliases = Object.create(null);\n    /** @type {HLJSPlugin[]} */ const plugins = [];\n    // safe/production mode - swallows more errors, tries to keep running\n    // even if a single syntax or parse hits a fatal error\n    let SAFE_MODE = true;\n    const LANGUAGE_NOT_FOUND = \"Could not find the language '{}', did you forget to load/include a language module?\";\n    /** @type {Language} */ const PLAINTEXT_LANGUAGE = {\n        disableAutodetect: true,\n        name: \"Plain text\",\n        contains: []\n    };\n    // Global options used when within external APIs. This is modified when\n    // calling the `hljs.configure` function.\n    /** @type HLJSOptions */ let options = {\n        ignoreUnescapedHTML: false,\n        throwUnescapedHTML: false,\n        noHighlightRe: /^(no-?highlight)$/i,\n        languageDetectRe: /\\blang(?:uage)?-([\\w-]+)\\b/i,\n        classPrefix: \"hljs-\",\n        cssSelector: \"pre code\",\n        languages: null,\n        // beta configuration options, subject to change, welcome to discuss\n        // https://github.com/highlightjs/highlight.js/issues/1086\n        __emitter: TokenTreeEmitter\n    };\n    /* Utility functions */ /**\n   * Tests a language name to see if highlighting should be skipped\n   * @param {string} languageName\n   */ function shouldNotHighlight(languageName) {\n        return options.noHighlightRe.test(languageName);\n    }\n    /**\n   * @param {HighlightedHTMLElement} block - the HTML element to determine language for\n   */ function blockLanguage(block) {\n        let classes = block.className + \" \";\n        classes += block.parentNode ? block.parentNode.className : \"\";\n        // language-* takes precedence over non-prefixed class names.\n        const match = options.languageDetectRe.exec(classes);\n        if (match) {\n            const language = getLanguage(match[1]);\n            if (!language) {\n                warn(LANGUAGE_NOT_FOUND.replace(\"{}\", match[1]));\n                warn(\"Falling back to no-highlight mode for this block.\", block);\n            }\n            return language ? match[1] : \"no-highlight\";\n        }\n        return classes.split(/\\s+/).find((_class)=>shouldNotHighlight(_class) || getLanguage(_class));\n    }\n    /**\n   * Core highlighting function.\n   *\n   * OLD API\n   * highlight(lang, code, ignoreIllegals, continuation)\n   *\n   * NEW API\n   * highlight(code, {lang, ignoreIllegals})\n   *\n   * @param {string} codeOrLanguageName - the language to use for highlighting\n   * @param {string | HighlightOptions} optionsOrCode - the code to highlight\n   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   *\n   * @returns {HighlightResult} Result - an object that represents the result\n   * @property {string} language - the language name\n   * @property {number} relevance - the relevance score\n   * @property {string} value - the highlighted HTML code\n   * @property {string} code - the original raw code\n   * @property {CompiledMode} top - top of the current mode stack\n   * @property {boolean} illegal - indicates whether any illegal matches were found\n  */ function highlight(codeOrLanguageName, optionsOrCode, ignoreIllegals) {\n        let code = \"\";\n        let languageName = \"\";\n        if (typeof optionsOrCode === \"object\") {\n            code = codeOrLanguageName;\n            ignoreIllegals = optionsOrCode.ignoreIllegals;\n            languageName = optionsOrCode.language;\n        } else {\n            // old API\n            deprecated(\"10.7.0\", \"highlight(lang, code, ...args) has been deprecated.\");\n            deprecated(\"10.7.0\", \"Please use highlight(code, options) instead.\\nhttps://github.com/highlightjs/highlight.js/issues/2277\");\n            languageName = codeOrLanguageName;\n            code = optionsOrCode;\n        }\n        // https://github.com/highlightjs/highlight.js/issues/3149\n        // eslint-disable-next-line no-undefined\n        if (ignoreIllegals === undefined) {\n            ignoreIllegals = true;\n        }\n        /** @type {BeforeHighlightContext} */ const context = {\n            code,\n            language: languageName\n        };\n        // the plugin can change the desired language or the code to be highlighted\n        // just be changing the object it was passed\n        fire(\"before:highlight\", context);\n        // a before plugin can usurp the result completely by providing it's own\n        // in which case we don't even need to call highlight\n        const result = context.result ? context.result : _highlight(context.language, context.code, ignoreIllegals);\n        result.code = context.code;\n        // the plugin can change anything in result to suite it\n        fire(\"after:highlight\", result);\n        return result;\n    }\n    /**\n   * private highlight that's used internally and does not fire callbacks\n   *\n   * @param {string} languageName - the language to use for highlighting\n   * @param {string} codeToHighlight - the code to highlight\n   * @param {boolean?} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   * @param {CompiledMode?} [continuation] - current continuation mode, if any\n   * @returns {HighlightResult} - result of the highlight operation\n  */ function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {\n        const keywordHits = Object.create(null);\n        /**\n     * Return keyword data if a match is a keyword\n     * @param {CompiledMode} mode - current mode\n     * @param {string} matchText - the textual match\n     * @returns {KeywordData | false}\n     */ function keywordData(mode, matchText) {\n            return mode.keywords[matchText];\n        }\n        function processKeywords() {\n            if (!top.keywords) {\n                emitter.addText(modeBuffer);\n                return;\n            }\n            let lastIndex = 0;\n            top.keywordPatternRe.lastIndex = 0;\n            let match = top.keywordPatternRe.exec(modeBuffer);\n            let buf = \"\";\n            while(match){\n                buf += modeBuffer.substring(lastIndex, match.index);\n                const word = language.case_insensitive ? match[0].toLowerCase() : match[0];\n                const data = keywordData(top, word);\n                if (data) {\n                    const [kind, keywordRelevance] = data;\n                    emitter.addText(buf);\n                    buf = \"\";\n                    keywordHits[word] = (keywordHits[word] || 0) + 1;\n                    if (keywordHits[word] <= MAX_KEYWORD_HITS) relevance += keywordRelevance;\n                    if (kind.startsWith(\"_\")) {\n                        // _ implied for relevance only, do not highlight\n                        // by applying a class name\n                        buf += match[0];\n                    } else {\n                        const cssClass = language.classNameAliases[kind] || kind;\n                        emitKeyword(match[0], cssClass);\n                    }\n                } else {\n                    buf += match[0];\n                }\n                lastIndex = top.keywordPatternRe.lastIndex;\n                match = top.keywordPatternRe.exec(modeBuffer);\n            }\n            buf += modeBuffer.substring(lastIndex);\n            emitter.addText(buf);\n        }\n        function processSubLanguage() {\n            if (modeBuffer === \"\") return;\n            /** @type HighlightResult */ let result = null;\n            if (typeof top.subLanguage === \"string\") {\n                if (!languages[top.subLanguage]) {\n                    emitter.addText(modeBuffer);\n                    return;\n                }\n                result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);\n                continuations[top.subLanguage] = /** @type {CompiledMode} */ result._top;\n            } else {\n                result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);\n            }\n            // Counting embedded language score towards the host language may be disabled\n            // with zeroing the containing mode relevance. Use case in point is Markdown that\n            // allows XML everywhere and makes every XML snippet to have a much larger Markdown\n            // score.\n            if (top.relevance > 0) {\n                relevance += result.relevance;\n            }\n            emitter.__addSublanguage(result._emitter, result.language);\n        }\n        function processBuffer() {\n            if (top.subLanguage != null) {\n                processSubLanguage();\n            } else {\n                processKeywords();\n            }\n            modeBuffer = \"\";\n        }\n        /**\n     * @param {string} text\n     * @param {string} scope\n     */ function emitKeyword(keyword, scope) {\n            if (keyword === \"\") return;\n            emitter.startScope(scope);\n            emitter.addText(keyword);\n            emitter.endScope();\n        }\n        /**\n     * @param {CompiledScope} scope\n     * @param {RegExpMatchArray} match\n     */ function emitMultiClass(scope, match) {\n            let i = 1;\n            const max = match.length - 1;\n            while(i <= max){\n                if (!scope._emit[i]) {\n                    i++;\n                    continue;\n                }\n                const klass = language.classNameAliases[scope[i]] || scope[i];\n                const text = match[i];\n                if (klass) {\n                    emitKeyword(text, klass);\n                } else {\n                    modeBuffer = text;\n                    processKeywords();\n                    modeBuffer = \"\";\n                }\n                i++;\n            }\n        }\n        /**\n     * @param {CompiledMode} mode - new mode to start\n     * @param {RegExpMatchArray} match\n     */ function startNewMode(mode, match) {\n            if (mode.scope && typeof mode.scope === \"string\") {\n                emitter.openNode(language.classNameAliases[mode.scope] || mode.scope);\n            }\n            if (mode.beginScope) {\n                // beginScope just wraps the begin match itself in a scope\n                if (mode.beginScope._wrap) {\n                    emitKeyword(modeBuffer, language.classNameAliases[mode.beginScope._wrap] || mode.beginScope._wrap);\n                    modeBuffer = \"\";\n                } else if (mode.beginScope._multi) {\n                    // at this point modeBuffer should just be the match\n                    emitMultiClass(mode.beginScope, match);\n                    modeBuffer = \"\";\n                }\n            }\n            top = Object.create(mode, {\n                parent: {\n                    value: top\n                }\n            });\n            return top;\n        }\n        /**\n     * @param {CompiledMode } mode - the mode to potentially end\n     * @param {RegExpMatchArray} match - the latest match\n     * @param {string} matchPlusRemainder - match plus remainder of content\n     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode\n     */ function endOfMode(mode, match, matchPlusRemainder) {\n            let matched = startsWith(mode.endRe, matchPlusRemainder);\n            if (matched) {\n                if (mode[\"on:end\"]) {\n                    const resp = new Response(mode);\n                    mode[\"on:end\"](match, resp);\n                    if (resp.isMatchIgnored) matched = false;\n                }\n                if (matched) {\n                    while(mode.endsParent && mode.parent){\n                        mode = mode.parent;\n                    }\n                    return mode;\n                }\n            }\n            // even if on:end fires an `ignore` it's still possible\n            // that we might trigger the end node because of a parent mode\n            if (mode.endsWithParent) {\n                return endOfMode(mode.parent, match, matchPlusRemainder);\n            }\n        }\n        /**\n     * Handle matching but then ignoring a sequence of text\n     *\n     * @param {string} lexeme - string containing full match text\n     */ function doIgnore(lexeme) {\n            if (top.matcher.regexIndex === 0) {\n                // no more regexes to potentially match here, so we move the cursor forward one\n                // space\n                modeBuffer += lexeme[0];\n                return 1;\n            } else {\n                // no need to move the cursor, we still have additional regexes to try and\n                // match at this very spot\n                resumeScanAtSamePosition = true;\n                return 0;\n            }\n        }\n        /**\n     * Handle the start of a new potential mode match\n     *\n     * @param {EnhancedMatch} match - the current match\n     * @returns {number} how far to advance the parse cursor\n     */ function doBeginMatch(match) {\n            const lexeme = match[0];\n            const newMode = match.rule;\n            const resp = new Response(newMode);\n            // first internal before callbacks, then the public ones\n            const beforeCallbacks = [\n                newMode.__beforeBegin,\n                newMode[\"on:begin\"]\n            ];\n            for (const cb of beforeCallbacks){\n                if (!cb) continue;\n                cb(match, resp);\n                if (resp.isMatchIgnored) return doIgnore(lexeme);\n            }\n            if (newMode.skip) {\n                modeBuffer += lexeme;\n            } else {\n                if (newMode.excludeBegin) {\n                    modeBuffer += lexeme;\n                }\n                processBuffer();\n                if (!newMode.returnBegin && !newMode.excludeBegin) {\n                    modeBuffer = lexeme;\n                }\n            }\n            startNewMode(newMode, match);\n            return newMode.returnBegin ? 0 : lexeme.length;\n        }\n        /**\n     * Handle the potential end of mode\n     *\n     * @param {RegExpMatchArray} match - the current match\n     */ function doEndMatch(match) {\n            const lexeme = match[0];\n            const matchPlusRemainder = codeToHighlight.substring(match.index);\n            const endMode = endOfMode(top, match, matchPlusRemainder);\n            if (!endMode) {\n                return NO_MATCH;\n            }\n            const origin = top;\n            if (top.endScope && top.endScope._wrap) {\n                processBuffer();\n                emitKeyword(lexeme, top.endScope._wrap);\n            } else if (top.endScope && top.endScope._multi) {\n                processBuffer();\n                emitMultiClass(top.endScope, match);\n            } else if (origin.skip) {\n                modeBuffer += lexeme;\n            } else {\n                if (!(origin.returnEnd || origin.excludeEnd)) {\n                    modeBuffer += lexeme;\n                }\n                processBuffer();\n                if (origin.excludeEnd) {\n                    modeBuffer = lexeme;\n                }\n            }\n            do {\n                if (top.scope) {\n                    emitter.closeNode();\n                }\n                if (!top.skip && !top.subLanguage) {\n                    relevance += top.relevance;\n                }\n                top = top.parent;\n            }while (top !== endMode.parent);\n            if (endMode.starts) {\n                startNewMode(endMode.starts, match);\n            }\n            return origin.returnEnd ? 0 : lexeme.length;\n        }\n        function processContinuations() {\n            const list = [];\n            for(let current = top; current !== language; current = current.parent){\n                if (current.scope) {\n                    list.unshift(current.scope);\n                }\n            }\n            list.forEach((item)=>emitter.openNode(item));\n        }\n        /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */ let lastMatch = {};\n        /**\n     *  Process an individual match\n     *\n     * @param {string} textBeforeMatch - text preceding the match (since the last match)\n     * @param {EnhancedMatch} [match] - the match itself\n     */ function processLexeme(textBeforeMatch, match) {\n            const lexeme = match && match[0];\n            // add non-matched text to the current mode buffer\n            modeBuffer += textBeforeMatch;\n            if (lexeme == null) {\n                processBuffer();\n                return 0;\n            }\n            // we've found a 0 width match and we're stuck, so we need to advance\n            // this happens when we have badly behaved rules that have optional matchers to the degree that\n            // sometimes they can end up matching nothing at all\n            // Ref: https://github.com/highlightjs/highlight.js/issues/2140\n            if (lastMatch.type === \"begin\" && match.type === \"end\" && lastMatch.index === match.index && lexeme === \"\") {\n                // spit the \"skipped\" character that our regex choked on back into the output sequence\n                modeBuffer += codeToHighlight.slice(match.index, match.index + 1);\n                if (!SAFE_MODE) {\n                    /** @type {AnnotatedError} */ const err = new Error(`0 width match regex (${languageName})`);\n                    err.languageName = languageName;\n                    err.badRule = lastMatch.rule;\n                    throw err;\n                }\n                return 1;\n            }\n            lastMatch = match;\n            if (match.type === \"begin\") {\n                return doBeginMatch(match);\n            } else if (match.type === \"illegal\" && !ignoreIllegals) {\n                // illegal match, we do not continue processing\n                /** @type {AnnotatedError} */ const err = new Error('Illegal lexeme \"' + lexeme + '\" for mode \"' + (top.scope || \"<unnamed>\") + '\"');\n                err.mode = top;\n                throw err;\n            } else if (match.type === \"end\") {\n                const processed = doEndMatch(match);\n                if (processed !== NO_MATCH) {\n                    return processed;\n                }\n            }\n            // edge case for when illegal matches $ (end of line) which is technically\n            // a 0 width match but not a begin/end match so it's not caught by the\n            // first handler (when ignoreIllegals is true)\n            if (match.type === \"illegal\" && lexeme === \"\") {\n                // advance so we aren't stuck in an infinite loop\n                modeBuffer += \"\\n\";\n                return 1;\n            }\n            // infinite loops are BAD, this is a last ditch catch all. if we have a\n            // decent number of iterations yet our index (cursor position in our\n            // parsing) still 3x behind our index then something is very wrong\n            // so we bail\n            if (iterations > 100000 && iterations > match.index * 3) {\n                const err = new Error(\"potential infinite loop, way more iterations than matches\");\n                throw err;\n            }\n            /*\n      Why might be find ourselves here?  An potential end match that was\n      triggered but could not be completed.  IE, `doEndMatch` returned NO_MATCH.\n      (this could be because a callback requests the match be ignored, etc)\n\n      This causes no real harm other than stopping a few times too many.\n      */ modeBuffer += lexeme;\n            return lexeme.length;\n        }\n        const language = getLanguage(languageName);\n        if (!language) {\n            error(LANGUAGE_NOT_FOUND.replace(\"{}\", languageName));\n            throw new Error('Unknown language: \"' + languageName + '\"');\n        }\n        const md = compileLanguage(language);\n        let result = \"\";\n        /** @type {CompiledMode} */ let top = continuation || md;\n        /** @type Record<string,CompiledMode> */ const continuations = {}; // keep continuations for sub-languages\n        const emitter = new options.__emitter(options);\n        processContinuations();\n        let modeBuffer = \"\";\n        let relevance = 0;\n        let index = 0;\n        let iterations = 0;\n        let resumeScanAtSamePosition = false;\n        try {\n            if (!language.__emitTokens) {\n                top.matcher.considerAll();\n                for(;;){\n                    iterations++;\n                    if (resumeScanAtSamePosition) {\n                        // only regexes not matched previously will now be\n                        // considered for a potential match\n                        resumeScanAtSamePosition = false;\n                    } else {\n                        top.matcher.considerAll();\n                    }\n                    top.matcher.lastIndex = index;\n                    const match = top.matcher.exec(codeToHighlight);\n                    // console.log(\"match\", match[0], match.rule && match.rule.begin)\n                    if (!match) break;\n                    const beforeMatch = codeToHighlight.substring(index, match.index);\n                    const processedCount = processLexeme(beforeMatch, match);\n                    index = match.index + processedCount;\n                }\n                processLexeme(codeToHighlight.substring(index));\n            } else {\n                language.__emitTokens(codeToHighlight, emitter);\n            }\n            emitter.finalize();\n            result = emitter.toHTML();\n            return {\n                language: languageName,\n                value: result,\n                relevance,\n                illegal: false,\n                _emitter: emitter,\n                _top: top\n            };\n        } catch (err) {\n            if (err.message && err.message.includes(\"Illegal\")) {\n                return {\n                    language: languageName,\n                    value: escape(codeToHighlight),\n                    illegal: true,\n                    relevance: 0,\n                    _illegalBy: {\n                        message: err.message,\n                        index,\n                        context: codeToHighlight.slice(index - 100, index + 100),\n                        mode: err.mode,\n                        resultSoFar: result\n                    },\n                    _emitter: emitter\n                };\n            } else if (SAFE_MODE) {\n                return {\n                    language: languageName,\n                    value: escape(codeToHighlight),\n                    illegal: false,\n                    relevance: 0,\n                    errorRaised: err,\n                    _emitter: emitter,\n                    _top: top\n                };\n            } else {\n                throw err;\n            }\n        }\n    }\n    /**\n   * returns a valid highlight result, without actually doing any actual work,\n   * auto highlight starts with this and it's possible for small snippets that\n   * auto-detection may not find a better match\n   * @param {string} code\n   * @returns {HighlightResult}\n   */ function justTextHighlightResult(code) {\n        const result = {\n            value: escape(code),\n            illegal: false,\n            relevance: 0,\n            _top: PLAINTEXT_LANGUAGE,\n            _emitter: new options.__emitter(options)\n        };\n        result._emitter.addText(code);\n        return result;\n    }\n    /**\n  Highlighting with language detection. Accepts a string with the code to\n  highlight. Returns an object with the following properties:\n\n  - language (detected language)\n  - relevance (int)\n  - value (an HTML string with highlighting markup)\n  - secondBest (object with the same structure for second-best heuristically\n    detected language, may be absent)\n\n    @param {string} code\n    @param {Array<string>} [languageSubset]\n    @returns {AutoHighlightResult}\n  */ function highlightAuto(code, languageSubset) {\n        languageSubset = languageSubset || options.languages || Object.keys(languages);\n        const plaintext = justTextHighlightResult(code);\n        const results = languageSubset.filter(getLanguage).filter(autoDetection).map((name)=>_highlight(name, code, false));\n        results.unshift(plaintext); // plaintext is always an option\n        const sorted = results.sort((a, b)=>{\n            // sort base on relevance\n            if (a.relevance !== b.relevance) return b.relevance - a.relevance;\n            // always award the tie to the base language\n            // ie if C++ and Arduino are tied, it's more likely to be C++\n            if (a.language && b.language) {\n                if (getLanguage(a.language).supersetOf === b.language) {\n                    return 1;\n                } else if (getLanguage(b.language).supersetOf === a.language) {\n                    return -1;\n                }\n            }\n            // otherwise say they are equal, which has the effect of sorting on\n            // relevance while preserving the original ordering - which is how ties\n            // have historically been settled, ie the language that comes first always\n            // wins in the case of a tie\n            return 0;\n        });\n        const [best, secondBest] = sorted;\n        /** @type {AutoHighlightResult} */ const result = best;\n        result.secondBest = secondBest;\n        return result;\n    }\n    /**\n   * Builds new class name for block given the language name\n   *\n   * @param {HTMLElement} element\n   * @param {string} [currentLang]\n   * @param {string} [resultLang]\n   */ function updateClassName(element, currentLang, resultLang) {\n        const language = currentLang && aliases[currentLang] || resultLang;\n        element.classList.add(\"hljs\");\n        element.classList.add(`language-${language}`);\n    }\n    /**\n   * Applies highlighting to a DOM node containing code.\n   *\n   * @param {HighlightedHTMLElement} element - the HTML element to highlight\n  */ function highlightElement(element) {\n        /** @type HTMLElement */ let node = null;\n        const language = blockLanguage(element);\n        if (shouldNotHighlight(language)) return;\n        fire(\"before:highlightElement\", {\n            el: element,\n            language\n        });\n        if (element.dataset.highlighted) {\n            console.log(\"Element previously highlighted. To highlight again, first unset `dataset.highlighted`.\", element);\n            return;\n        }\n        // we should be all text, no child nodes (unescaped HTML) - this is possibly\n        // an HTML injection attack - it's likely too late if this is already in\n        // production (the code has likely already done its damage by the time\n        // we're seeing it)... but we yell loudly about this so that hopefully it's\n        // more likely to be caught in development before making it to production\n        if (element.children.length > 0) {\n            if (!options.ignoreUnescapedHTML) {\n                console.warn(\"One of your code blocks includes unescaped HTML. This is a potentially serious security risk.\");\n                console.warn(\"https://github.com/highlightjs/highlight.js/wiki/security\");\n                console.warn(\"The element with unescaped HTML:\");\n                console.warn(element);\n            }\n            if (options.throwUnescapedHTML) {\n                const err = new HTMLInjectionError(\"One of your code blocks includes unescaped HTML.\", element.innerHTML);\n                throw err;\n            }\n        }\n        node = element;\n        const text = node.textContent;\n        const result = language ? highlight(text, {\n            language,\n            ignoreIllegals: true\n        }) : highlightAuto(text);\n        element.innerHTML = result.value;\n        element.dataset.highlighted = \"yes\";\n        updateClassName(element, language, result.language);\n        element.result = {\n            language: result.language,\n            // TODO: remove with version 11.0\n            re: result.relevance,\n            relevance: result.relevance\n        };\n        if (result.secondBest) {\n            element.secondBest = {\n                language: result.secondBest.language,\n                relevance: result.secondBest.relevance\n            };\n        }\n        fire(\"after:highlightElement\", {\n            el: element,\n            result,\n            text\n        });\n    }\n    /**\n   * Updates highlight.js global options with the passed options\n   *\n   * @param {Partial<HLJSOptions>} userOptions\n   */ function configure(userOptions) {\n        options = inherit(options, userOptions);\n    }\n    // TODO: remove v12, deprecated\n    const initHighlighting = ()=>{\n        highlightAll();\n        deprecated(\"10.6.0\", \"initHighlighting() deprecated.  Use highlightAll() now.\");\n    };\n    // TODO: remove v12, deprecated\n    function initHighlightingOnLoad() {\n        highlightAll();\n        deprecated(\"10.6.0\", \"initHighlightingOnLoad() deprecated.  Use highlightAll() now.\");\n    }\n    let wantsHighlight = false;\n    /**\n   * auto-highlights all pre>code elements on the page\n   */ function highlightAll() {\n        function boot() {\n            // if a highlight was requested before DOM was loaded, do now\n            highlightAll();\n        }\n        // if we are called too early in the loading process\n        if (document.readyState === \"loading\") {\n            // make sure the event listener is only added once\n            if (!wantsHighlight) {\n                window.addEventListener(\"DOMContentLoaded\", boot, false);\n            }\n            wantsHighlight = true;\n            return;\n        }\n        const blocks = document.querySelectorAll(options.cssSelector);\n        blocks.forEach(highlightElement);\n    }\n    /**\n   * Register a language grammar module\n   *\n   * @param {string} languageName\n   * @param {LanguageFn} languageDefinition\n   */ function registerLanguage(languageName, languageDefinition) {\n        let lang = null;\n        try {\n            lang = languageDefinition(hljs);\n        } catch (error$1) {\n            error(\"Language definition for '{}' could not be registered.\".replace(\"{}\", languageName));\n            // hard or soft error\n            if (!SAFE_MODE) {\n                throw error$1;\n            } else {\n                error(error$1);\n            }\n            // languages that have serious errors are replaced with essentially a\n            // \"plaintext\" stand-in so that the code blocks will still get normal\n            // css classes applied to them - and one bad language won't break the\n            // entire highlighter\n            lang = PLAINTEXT_LANGUAGE;\n        }\n        // give it a temporary name if it doesn't have one in the meta-data\n        if (!lang.name) lang.name = languageName;\n        languages[languageName] = lang;\n        lang.rawDefinition = languageDefinition.bind(null, hljs);\n        if (lang.aliases) {\n            registerAliases(lang.aliases, {\n                languageName\n            });\n        }\n    }\n    /**\n   * Remove a language grammar module\n   *\n   * @param {string} languageName\n   */ function unregisterLanguage(languageName) {\n        delete languages[languageName];\n        for (const alias of Object.keys(aliases)){\n            if (aliases[alias] === languageName) {\n                delete aliases[alias];\n            }\n        }\n    }\n    /**\n   * @returns {string[]} List of language internal names\n   */ function listLanguages() {\n        return Object.keys(languages);\n    }\n    /**\n   * @param {string} name - name of the language to retrieve\n   * @returns {Language | undefined}\n   */ function getLanguage(name) {\n        name = (name || \"\").toLowerCase();\n        return languages[name] || languages[aliases[name]];\n    }\n    /**\n   *\n   * @param {string|string[]} aliasList - single alias or list of aliases\n   * @param {{languageName: string}} opts\n   */ function registerAliases(aliasList, { languageName }) {\n        if (typeof aliasList === \"string\") {\n            aliasList = [\n                aliasList\n            ];\n        }\n        aliasList.forEach((alias)=>{\n            aliases[alias.toLowerCase()] = languageName;\n        });\n    }\n    /**\n   * Determines if a given language has auto-detection enabled\n   * @param {string} name - name of the language\n   */ function autoDetection(name) {\n        const lang = getLanguage(name);\n        return lang && !lang.disableAutodetect;\n    }\n    /**\n   * Upgrades the old highlightBlock plugins to the new\n   * highlightElement API\n   * @param {HLJSPlugin} plugin\n   */ function upgradePluginAPI(plugin) {\n        // TODO: remove with v12\n        if (plugin[\"before:highlightBlock\"] && !plugin[\"before:highlightElement\"]) {\n            plugin[\"before:highlightElement\"] = (data)=>{\n                plugin[\"before:highlightBlock\"](Object.assign({\n                    block: data.el\n                }, data));\n            };\n        }\n        if (plugin[\"after:highlightBlock\"] && !plugin[\"after:highlightElement\"]) {\n            plugin[\"after:highlightElement\"] = (data)=>{\n                plugin[\"after:highlightBlock\"](Object.assign({\n                    block: data.el\n                }, data));\n            };\n        }\n    }\n    /**\n   * @param {HLJSPlugin} plugin\n   */ function addPlugin(plugin) {\n        upgradePluginAPI(plugin);\n        plugins.push(plugin);\n    }\n    /**\n   * @param {HLJSPlugin} plugin\n   */ function removePlugin(plugin) {\n        const index = plugins.indexOf(plugin);\n        if (index !== -1) {\n            plugins.splice(index, 1);\n        }\n    }\n    /**\n   *\n   * @param {PluginEvent} event\n   * @param {any} args\n   */ function fire(event, args) {\n        const cb = event;\n        plugins.forEach(function(plugin) {\n            if (plugin[cb]) {\n                plugin[cb](args);\n            }\n        });\n    }\n    /**\n   * DEPRECATED\n   * @param {HighlightedHTMLElement} el\n   */ function deprecateHighlightBlock(el) {\n        deprecated(\"10.7.0\", \"highlightBlock will be removed entirely in v12.0\");\n        deprecated(\"10.7.0\", \"Please use highlightElement now.\");\n        return highlightElement(el);\n    }\n    /* Interface definition */ Object.assign(hljs, {\n        highlight,\n        highlightAuto,\n        highlightAll,\n        highlightElement,\n        // TODO: Remove with v12 API\n        highlightBlock: deprecateHighlightBlock,\n        configure,\n        initHighlighting,\n        initHighlightingOnLoad,\n        registerLanguage,\n        unregisterLanguage,\n        listLanguages,\n        getLanguage,\n        registerAliases,\n        autoDetection,\n        inherit,\n        addPlugin,\n        removePlugin\n    });\n    hljs.debugMode = function() {\n        SAFE_MODE = false;\n    };\n    hljs.safeMode = function() {\n        SAFE_MODE = true;\n    };\n    hljs.versionString = version;\n    hljs.regex = {\n        concat: concat,\n        lookahead: lookahead,\n        either: either,\n        optional: optional,\n        anyNumberOfTimes: anyNumberOfTimes\n    };\n    for(const key in MODES){\n        // @ts-ignore\n        if (typeof MODES[key] === \"object\") {\n            // @ts-ignore\n            deepFreeze(MODES[key]);\n        }\n    }\n    // merge all the modes/regexes into our main object\n    Object.assign(hljs, MODES);\n    return hljs;\n};\n// Other names for the variable may break build script\nconst highlight = HLJS({});\n// returns a new instance of the highlighter to be used for extensions\n// check https://github.com/wooorm/lowlight/issues/47\nhighlight.newInstance = ()=>HLJS({});\nmodule.exports = highlight;\nhighlight.HighlightJS = highlight;\nhighlight.default = highlight;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/lib/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/core.js":
/*!**********************************************!*\
  !*** ./node_modules/highlight.js/es/core.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HighlightJS: () => (/* reexport default export from named module */ _lib_core_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/core.js */ \"(ssr)/./node_modules/highlight.js/lib/core.js\");\n// https://nodejs.org/api/packages.html#packages_writing_dual_packages_while_avoiding_or_minimizing_hazards\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_lib_core_js__WEBPACK_IMPORTED_MODULE_0__);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2NvcmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkdBQTJHO0FBQ2xFO0FBQ2xCO0FBQ3ZCLGlFQUFlQSx5Q0FBV0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL29tbmktY2hhdC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9oaWdobGlnaHQuanMvZXMvY29yZS5qcz8xZTE2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvcGFja2FnZXMuaHRtbCNwYWNrYWdlc193cml0aW5nX2R1YWxfcGFja2FnZXNfd2hpbGVfYXZvaWRpbmdfb3JfbWluaW1pemluZ19oYXphcmRzXG5pbXBvcnQgSGlnaGxpZ2h0SlMgZnJvbSAnLi4vbGliL2NvcmUuanMnO1xuZXhwb3J0IHsgSGlnaGxpZ2h0SlMgfTtcbmV4cG9ydCBkZWZhdWx0IEhpZ2hsaWdodEpTO1xuIl0sIm5hbWVzIjpbIkhpZ2hsaWdodEpTIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/arduino.js":
/*!***********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/arduino.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ arduino)\n/* harmony export */ });\n/*\nLanguage: C++\nCategory: common, system\nWebsite: https://isocpp.org\n*/ /** @type LanguageFn */ function cPlusPlus(hljs) {\n    const regex = hljs.regex;\n    // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n    // not include such support nor can we be sure all the grammars depending\n    // on it would desire this behavior\n    const C_LINE_COMMENT_MODE = hljs.COMMENT(\"//\", \"$\", {\n        contains: [\n            {\n                begin: /\\\\\\n/\n            }\n        ]\n    });\n    const DECLTYPE_AUTO_RE = \"decltype\\\\(auto\\\\)\";\n    const NAMESPACE_RE = \"[a-zA-Z_]\\\\w*::\";\n    const TEMPLATE_ARGUMENT_RE = \"<[^<>]+>\";\n    const FUNCTION_TYPE_RE = \"(?!struct)(\" + DECLTYPE_AUTO_RE + \"|\" + regex.optional(NAMESPACE_RE) + \"[a-zA-Z_]\\\\w*\" + regex.optional(TEMPLATE_ARGUMENT_RE) + \")\";\n    const CPP_PRIMITIVE_TYPES = {\n        className: \"type\",\n        begin: \"\\\\b[a-z\\\\d_]*_t\\\\b\"\n    };\n    // https://en.cppreference.com/w/cpp/language/escape\n    // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n    const CHARACTER_ESCAPES = \"\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)\";\n    const STRINGS = {\n        className: \"string\",\n        variants: [\n            {\n                begin: '(u8?|U|L)?\"',\n                end: '\"',\n                illegal: \"\\\\n\",\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ]\n            },\n            {\n                begin: \"(u8?|U|L)?'(\" + CHARACTER_ESCAPES + \"|.)\",\n                end: \"'\",\n                illegal: \".\"\n            },\n            hljs.END_SAME_AS_BEGIN({\n                begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n                end: /\\)([^()\\\\ ]{0,16})\"/\n            })\n        ]\n    };\n    const NUMBERS = {\n        className: \"number\",\n        variants: [\n            // Floating-point literal.\n            {\n                begin: \"[+-]?(?:\" // Leading sign.\n                 + \"(?:\" + \"[0-9](?:'?[0-9])*\\\\.(?:[0-9](?:'?[0-9])*)?\" + \"|\\\\.[0-9](?:'?[0-9])*\" + \")(?:[Ee][+-]?[0-9](?:'?[0-9])*)?\" + \"|[0-9](?:'?[0-9])*[Ee][+-]?[0-9](?:'?[0-9])*\" + \"|0[Xx](?:\" + \"[0-9A-Fa-f](?:'?[0-9A-Fa-f])*(?:\\\\.(?:[0-9A-Fa-f](?:'?[0-9A-Fa-f])*)?)?\" + \"|\\\\.[0-9A-Fa-f](?:'?[0-9A-Fa-f])*\" + \")[Pp][+-]?[0-9](?:'?[0-9])*\" + \")(?:\" // Literal suffixes.\n                 + \"[Ff](?:16|32|64|128)?\" + \"|(BF|bf)16\" + \"|[Ll]\" + \"|\" // Literal suffix is optional.\n                 + \")\"\n            },\n            // Integer literal.\n            {\n                begin: \"[+-]?\\\\b(?:\" // Leading sign.\n                 + \"0[Bb][01](?:'?[01])*\" // Binary.\n                 + \"|0[Xx][0-9A-Fa-f](?:'?[0-9A-Fa-f])*\" // Hexadecimal.\n                 + \"|0(?:'?[0-7])*\" // Octal or just a lone zero.\n                 + \"|[1-9](?:'?[0-9])*\" // Decimal.\n                 + \")(?:\" // Literal suffixes.\n                 + \"[Uu](?:LL?|ll?)\" + \"|[Uu][Zz]?\" + \"|(?:LL?|ll?)[Uu]?\" + \"|[Zz][Uu]\" + \"|\" // Literal suffix is optional.\n                 + \")\"\n            }\n        ],\n        relevance: 0\n    };\n    const PREPROCESSOR = {\n        className: \"meta\",\n        begin: /#\\s*[a-z]+\\b/,\n        end: /$/,\n        keywords: {\n            keyword: \"if else elif endif define undef warning error line \" + \"pragma _Pragma ifdef ifndef include\"\n        },\n        contains: [\n            {\n                begin: /\\\\\\n/,\n                relevance: 0\n            },\n            hljs.inherit(STRINGS, {\n                className: \"string\"\n            }),\n            {\n                className: \"string\",\n                begin: /<.*?>/\n            },\n            C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE\n        ]\n    };\n    const TITLE_MODE = {\n        className: \"title\",\n        begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,\n        relevance: 0\n    };\n    const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + \"\\\\s*\\\\(\";\n    // https://en.cppreference.com/w/cpp/keyword\n    const RESERVED_KEYWORDS = [\n        \"alignas\",\n        \"alignof\",\n        \"and\",\n        \"and_eq\",\n        \"asm\",\n        \"atomic_cancel\",\n        \"atomic_commit\",\n        \"atomic_noexcept\",\n        \"auto\",\n        \"bitand\",\n        \"bitor\",\n        \"break\",\n        \"case\",\n        \"catch\",\n        \"class\",\n        \"co_await\",\n        \"co_return\",\n        \"co_yield\",\n        \"compl\",\n        \"concept\",\n        \"const_cast|10\",\n        \"consteval\",\n        \"constexpr\",\n        \"constinit\",\n        \"continue\",\n        \"decltype\",\n        \"default\",\n        \"delete\",\n        \"do\",\n        \"dynamic_cast|10\",\n        \"else\",\n        \"enum\",\n        \"explicit\",\n        \"export\",\n        \"extern\",\n        \"false\",\n        \"final\",\n        \"for\",\n        \"friend\",\n        \"goto\",\n        \"if\",\n        \"import\",\n        \"inline\",\n        \"module\",\n        \"mutable\",\n        \"namespace\",\n        \"new\",\n        \"noexcept\",\n        \"not\",\n        \"not_eq\",\n        \"nullptr\",\n        \"operator\",\n        \"or\",\n        \"or_eq\",\n        \"override\",\n        \"private\",\n        \"protected\",\n        \"public\",\n        \"reflexpr\",\n        \"register\",\n        \"reinterpret_cast|10\",\n        \"requires\",\n        \"return\",\n        \"sizeof\",\n        \"static_assert\",\n        \"static_cast|10\",\n        \"struct\",\n        \"switch\",\n        \"synchronized\",\n        \"template\",\n        \"this\",\n        \"thread_local\",\n        \"throw\",\n        \"transaction_safe\",\n        \"transaction_safe_dynamic\",\n        \"true\",\n        \"try\",\n        \"typedef\",\n        \"typeid\",\n        \"typename\",\n        \"union\",\n        \"using\",\n        \"virtual\",\n        \"volatile\",\n        \"while\",\n        \"xor\",\n        \"xor_eq\"\n    ];\n    // https://en.cppreference.com/w/cpp/keyword\n    const RESERVED_TYPES = [\n        \"bool\",\n        \"char\",\n        \"char16_t\",\n        \"char32_t\",\n        \"char8_t\",\n        \"double\",\n        \"float\",\n        \"int\",\n        \"long\",\n        \"short\",\n        \"void\",\n        \"wchar_t\",\n        \"unsigned\",\n        \"signed\",\n        \"const\",\n        \"static\"\n    ];\n    const TYPE_HINTS = [\n        \"any\",\n        \"auto_ptr\",\n        \"barrier\",\n        \"binary_semaphore\",\n        \"bitset\",\n        \"complex\",\n        \"condition_variable\",\n        \"condition_variable_any\",\n        \"counting_semaphore\",\n        \"deque\",\n        \"false_type\",\n        \"flat_map\",\n        \"flat_set\",\n        \"future\",\n        \"imaginary\",\n        \"initializer_list\",\n        \"istringstream\",\n        \"jthread\",\n        \"latch\",\n        \"lock_guard\",\n        \"multimap\",\n        \"multiset\",\n        \"mutex\",\n        \"optional\",\n        \"ostringstream\",\n        \"packaged_task\",\n        \"pair\",\n        \"promise\",\n        \"priority_queue\",\n        \"queue\",\n        \"recursive_mutex\",\n        \"recursive_timed_mutex\",\n        \"scoped_lock\",\n        \"set\",\n        \"shared_future\",\n        \"shared_lock\",\n        \"shared_mutex\",\n        \"shared_timed_mutex\",\n        \"shared_ptr\",\n        \"stack\",\n        \"string_view\",\n        \"stringstream\",\n        \"timed_mutex\",\n        \"thread\",\n        \"true_type\",\n        \"tuple\",\n        \"unique_lock\",\n        \"unique_ptr\",\n        \"unordered_map\",\n        \"unordered_multimap\",\n        \"unordered_multiset\",\n        \"unordered_set\",\n        \"variant\",\n        \"vector\",\n        \"weak_ptr\",\n        \"wstring\",\n        \"wstring_view\"\n    ];\n    const FUNCTION_HINTS = [\n        \"abort\",\n        \"abs\",\n        \"acos\",\n        \"apply\",\n        \"as_const\",\n        \"asin\",\n        \"atan\",\n        \"atan2\",\n        \"calloc\",\n        \"ceil\",\n        \"cerr\",\n        \"cin\",\n        \"clog\",\n        \"cos\",\n        \"cosh\",\n        \"cout\",\n        \"declval\",\n        \"endl\",\n        \"exchange\",\n        \"exit\",\n        \"exp\",\n        \"fabs\",\n        \"floor\",\n        \"fmod\",\n        \"forward\",\n        \"fprintf\",\n        \"fputs\",\n        \"free\",\n        \"frexp\",\n        \"fscanf\",\n        \"future\",\n        \"invoke\",\n        \"isalnum\",\n        \"isalpha\",\n        \"iscntrl\",\n        \"isdigit\",\n        \"isgraph\",\n        \"islower\",\n        \"isprint\",\n        \"ispunct\",\n        \"isspace\",\n        \"isupper\",\n        \"isxdigit\",\n        \"labs\",\n        \"launder\",\n        \"ldexp\",\n        \"log\",\n        \"log10\",\n        \"make_pair\",\n        \"make_shared\",\n        \"make_shared_for_overwrite\",\n        \"make_tuple\",\n        \"make_unique\",\n        \"malloc\",\n        \"memchr\",\n        \"memcmp\",\n        \"memcpy\",\n        \"memset\",\n        \"modf\",\n        \"move\",\n        \"pow\",\n        \"printf\",\n        \"putchar\",\n        \"puts\",\n        \"realloc\",\n        \"scanf\",\n        \"sin\",\n        \"sinh\",\n        \"snprintf\",\n        \"sprintf\",\n        \"sqrt\",\n        \"sscanf\",\n        \"std\",\n        \"stderr\",\n        \"stdin\",\n        \"stdout\",\n        \"strcat\",\n        \"strchr\",\n        \"strcmp\",\n        \"strcpy\",\n        \"strcspn\",\n        \"strlen\",\n        \"strncat\",\n        \"strncmp\",\n        \"strncpy\",\n        \"strpbrk\",\n        \"strrchr\",\n        \"strspn\",\n        \"strstr\",\n        \"swap\",\n        \"tan\",\n        \"tanh\",\n        \"terminate\",\n        \"to_underlying\",\n        \"tolower\",\n        \"toupper\",\n        \"vfprintf\",\n        \"visit\",\n        \"vprintf\",\n        \"vsprintf\"\n    ];\n    const LITERALS = [\n        \"NULL\",\n        \"false\",\n        \"nullopt\",\n        \"nullptr\",\n        \"true\"\n    ];\n    // https://en.cppreference.com/w/cpp/keyword\n    const BUILT_IN = [\n        \"_Pragma\"\n    ];\n    const CPP_KEYWORDS = {\n        type: RESERVED_TYPES,\n        keyword: RESERVED_KEYWORDS,\n        literal: LITERALS,\n        built_in: BUILT_IN,\n        _type_hints: TYPE_HINTS\n    };\n    const FUNCTION_DISPATCH = {\n        className: \"function.dispatch\",\n        relevance: 0,\n        keywords: {\n            // Only for relevance, not highlighting.\n            _hint: FUNCTION_HINTS\n        },\n        begin: regex.concat(/\\b/, /(?!decltype)/, /(?!if)/, /(?!for)/, /(?!switch)/, /(?!while)/, hljs.IDENT_RE, regex.lookahead(/(<[^<>]+>|)\\s*\\(/))\n    };\n    const EXPRESSION_CONTAINS = [\n        FUNCTION_DISPATCH,\n        PREPROCESSOR,\n        CPP_PRIMITIVE_TYPES,\n        C_LINE_COMMENT_MODE,\n        hljs.C_BLOCK_COMMENT_MODE,\n        NUMBERS,\n        STRINGS\n    ];\n    const EXPRESSION_CONTEXT = {\n        // This mode covers expression context where we can't expect a function\n        // definition and shouldn't highlight anything that looks like one:\n        // `return some()`, `else if()`, `(x*sum(1, 2))`\n        variants: [\n            {\n                begin: /=/,\n                end: /;/\n            },\n            {\n                begin: /\\(/,\n                end: /\\)/\n            },\n            {\n                beginKeywords: \"new throw return else\",\n                end: /;/\n            }\n        ],\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                keywords: CPP_KEYWORDS,\n                contains: EXPRESSION_CONTAINS.concat([\n                    \"self\"\n                ]),\n                relevance: 0\n            }\n        ]),\n        relevance: 0\n    };\n    const FUNCTION_DECLARATION = {\n        className: \"function\",\n        begin: \"(\" + FUNCTION_TYPE_RE + \"[\\\\*&\\\\s]+)+\" + FUNCTION_TITLE,\n        returnBegin: true,\n        end: /[{;=]/,\n        excludeEnd: true,\n        keywords: CPP_KEYWORDS,\n        illegal: /[^\\w\\s\\*&:<>.]/,\n        contains: [\n            {\n                begin: DECLTYPE_AUTO_RE,\n                keywords: CPP_KEYWORDS,\n                relevance: 0\n            },\n            {\n                begin: FUNCTION_TITLE,\n                returnBegin: true,\n                contains: [\n                    TITLE_MODE\n                ],\n                relevance: 0\n            },\n            // needed because we do not have look-behind on the below rule\n            // to prevent it from grabbing the final : in a :: pair\n            {\n                begin: /::/,\n                relevance: 0\n            },\n            // initializers\n            {\n                begin: /:/,\n                endsWithParent: true,\n                contains: [\n                    STRINGS,\n                    NUMBERS\n                ]\n            },\n            // allow for multiple declarations, e.g.:\n            // extern void f(int), g(char);\n            {\n                relevance: 0,\n                match: /,/\n            },\n            {\n                className: \"params\",\n                begin: /\\(/,\n                end: /\\)/,\n                keywords: CPP_KEYWORDS,\n                relevance: 0,\n                contains: [\n                    C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    STRINGS,\n                    NUMBERS,\n                    CPP_PRIMITIVE_TYPES,\n                    // Count matching parentheses.\n                    {\n                        begin: /\\(/,\n                        end: /\\)/,\n                        keywords: CPP_KEYWORDS,\n                        relevance: 0,\n                        contains: [\n                            \"self\",\n                            C_LINE_COMMENT_MODE,\n                            hljs.C_BLOCK_COMMENT_MODE,\n                            STRINGS,\n                            NUMBERS,\n                            CPP_PRIMITIVE_TYPES\n                        ]\n                    }\n                ]\n            },\n            CPP_PRIMITIVE_TYPES,\n            C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            PREPROCESSOR\n        ]\n    };\n    return {\n        name: \"C++\",\n        aliases: [\n            \"cc\",\n            \"c++\",\n            \"h++\",\n            \"hpp\",\n            \"hh\",\n            \"hxx\",\n            \"cxx\"\n        ],\n        keywords: CPP_KEYWORDS,\n        illegal: \"</\",\n        classNameAliases: {\n            \"function.dispatch\": \"built_in\"\n        },\n        contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, FUNCTION_DISPATCH, EXPRESSION_CONTAINS, [\n            PREPROCESSOR,\n            {\n                begin: \"\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function|flat_map|flat_set)\\\\s*<(?!<)\",\n                end: \">\",\n                keywords: CPP_KEYWORDS,\n                contains: [\n                    \"self\",\n                    CPP_PRIMITIVE_TYPES\n                ]\n            },\n            {\n                begin: hljs.IDENT_RE + \"::\",\n                keywords: CPP_KEYWORDS\n            },\n            {\n                match: [\n                    // extra complexity to deal with `enum class` and `enum struct`\n                    /\\b(?:enum(?:\\s+(?:class|struct))?|class|struct|union)/,\n                    /\\s+/,\n                    /\\w+/\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                }\n            }\n        ])\n    };\n}\n/*\nLanguage: Arduino\nAuthor: Stefania Mellai <s.mellai@arduino.cc>\nDescription: The Arduino® Language is a superset of C++. This rules are designed to highlight the Arduino® source code. For info about language see http://www.arduino.cc.\nWebsite: https://www.arduino.cc\nCategory: system\n*/ /** @type LanguageFn */ function arduino(hljs) {\n    const ARDUINO_KW = {\n        type: [\n            \"boolean\",\n            \"byte\",\n            \"word\",\n            \"String\"\n        ],\n        built_in: [\n            \"KeyboardController\",\n            \"MouseController\",\n            \"SoftwareSerial\",\n            \"EthernetServer\",\n            \"EthernetClient\",\n            \"LiquidCrystal\",\n            \"RobotControl\",\n            \"GSMVoiceCall\",\n            \"EthernetUDP\",\n            \"EsploraTFT\",\n            \"HttpClient\",\n            \"RobotMotor\",\n            \"WiFiClient\",\n            \"GSMScanner\",\n            \"FileSystem\",\n            \"Scheduler\",\n            \"GSMServer\",\n            \"YunClient\",\n            \"YunServer\",\n            \"IPAddress\",\n            \"GSMClient\",\n            \"GSMModem\",\n            \"Keyboard\",\n            \"Ethernet\",\n            \"Console\",\n            \"GSMBand\",\n            \"Esplora\",\n            \"Stepper\",\n            \"Process\",\n            \"WiFiUDP\",\n            \"GSM_SMS\",\n            \"Mailbox\",\n            \"USBHost\",\n            \"Firmata\",\n            \"PImage\",\n            \"Client\",\n            \"Server\",\n            \"GSMPIN\",\n            \"FileIO\",\n            \"Bridge\",\n            \"Serial\",\n            \"EEPROM\",\n            \"Stream\",\n            \"Mouse\",\n            \"Audio\",\n            \"Servo\",\n            \"File\",\n            \"Task\",\n            \"GPRS\",\n            \"WiFi\",\n            \"Wire\",\n            \"TFT\",\n            \"GSM\",\n            \"SPI\",\n            \"SD\"\n        ],\n        _hints: [\n            \"setup\",\n            \"loop\",\n            \"runShellCommandAsynchronously\",\n            \"analogWriteResolution\",\n            \"retrieveCallingNumber\",\n            \"printFirmwareVersion\",\n            \"analogReadResolution\",\n            \"sendDigitalPortPair\",\n            \"noListenOnLocalhost\",\n            \"readJoystickButton\",\n            \"setFirmwareVersion\",\n            \"readJoystickSwitch\",\n            \"scrollDisplayRight\",\n            \"getVoiceCallStatus\",\n            \"scrollDisplayLeft\",\n            \"writeMicroseconds\",\n            \"delayMicroseconds\",\n            \"beginTransmission\",\n            \"getSignalStrength\",\n            \"runAsynchronously\",\n            \"getAsynchronously\",\n            \"listenOnLocalhost\",\n            \"getCurrentCarrier\",\n            \"readAccelerometer\",\n            \"messageAvailable\",\n            \"sendDigitalPorts\",\n            \"lineFollowConfig\",\n            \"countryNameWrite\",\n            \"runShellCommand\",\n            \"readStringUntil\",\n            \"rewindDirectory\",\n            \"readTemperature\",\n            \"setClockDivider\",\n            \"readLightSensor\",\n            \"endTransmission\",\n            \"analogReference\",\n            \"detachInterrupt\",\n            \"countryNameRead\",\n            \"attachInterrupt\",\n            \"encryptionType\",\n            \"readBytesUntil\",\n            \"robotNameWrite\",\n            \"readMicrophone\",\n            \"robotNameRead\",\n            \"cityNameWrite\",\n            \"userNameWrite\",\n            \"readJoystickY\",\n            \"readJoystickX\",\n            \"mouseReleased\",\n            \"openNextFile\",\n            \"scanNetworks\",\n            \"noInterrupts\",\n            \"digitalWrite\",\n            \"beginSpeaker\",\n            \"mousePressed\",\n            \"isActionDone\",\n            \"mouseDragged\",\n            \"displayLogos\",\n            \"noAutoscroll\",\n            \"addParameter\",\n            \"remoteNumber\",\n            \"getModifiers\",\n            \"keyboardRead\",\n            \"userNameRead\",\n            \"waitContinue\",\n            \"processInput\",\n            \"parseCommand\",\n            \"printVersion\",\n            \"readNetworks\",\n            \"writeMessage\",\n            \"blinkVersion\",\n            \"cityNameRead\",\n            \"readMessage\",\n            \"setDataMode\",\n            \"parsePacket\",\n            \"isListening\",\n            \"setBitOrder\",\n            \"beginPacket\",\n            \"isDirectory\",\n            \"motorsWrite\",\n            \"drawCompass\",\n            \"digitalRead\",\n            \"clearScreen\",\n            \"serialEvent\",\n            \"rightToLeft\",\n            \"setTextSize\",\n            \"leftToRight\",\n            \"requestFrom\",\n            \"keyReleased\",\n            \"compassRead\",\n            \"analogWrite\",\n            \"interrupts\",\n            \"WiFiServer\",\n            \"disconnect\",\n            \"playMelody\",\n            \"parseFloat\",\n            \"autoscroll\",\n            \"getPINUsed\",\n            \"setPINUsed\",\n            \"setTimeout\",\n            \"sendAnalog\",\n            \"readSlider\",\n            \"analogRead\",\n            \"beginWrite\",\n            \"createChar\",\n            \"motorsStop\",\n            \"keyPressed\",\n            \"tempoWrite\",\n            \"readButton\",\n            \"subnetMask\",\n            \"debugPrint\",\n            \"macAddress\",\n            \"writeGreen\",\n            \"randomSeed\",\n            \"attachGPRS\",\n            \"readString\",\n            \"sendString\",\n            \"remotePort\",\n            \"releaseAll\",\n            \"mouseMoved\",\n            \"background\",\n            \"getXChange\",\n            \"getYChange\",\n            \"answerCall\",\n            \"getResult\",\n            \"voiceCall\",\n            \"endPacket\",\n            \"constrain\",\n            \"getSocket\",\n            \"writeJSON\",\n            \"getButton\",\n            \"available\",\n            \"connected\",\n            \"findUntil\",\n            \"readBytes\",\n            \"exitValue\",\n            \"readGreen\",\n            \"writeBlue\",\n            \"startLoop\",\n            \"IPAddress\",\n            \"isPressed\",\n            \"sendSysex\",\n            \"pauseMode\",\n            \"gatewayIP\",\n            \"setCursor\",\n            \"getOemKey\",\n            \"tuneWrite\",\n            \"noDisplay\",\n            \"loadImage\",\n            \"switchPIN\",\n            \"onRequest\",\n            \"onReceive\",\n            \"changePIN\",\n            \"playFile\",\n            \"noBuffer\",\n            \"parseInt\",\n            \"overflow\",\n            \"checkPIN\",\n            \"knobRead\",\n            \"beginTFT\",\n            \"bitClear\",\n            \"updateIR\",\n            \"bitWrite\",\n            \"position\",\n            \"writeRGB\",\n            \"highByte\",\n            \"writeRed\",\n            \"setSpeed\",\n            \"readBlue\",\n            \"noStroke\",\n            \"remoteIP\",\n            \"transfer\",\n            \"shutdown\",\n            \"hangCall\",\n            \"beginSMS\",\n            \"endWrite\",\n            \"attached\",\n            \"maintain\",\n            \"noCursor\",\n            \"checkReg\",\n            \"checkPUK\",\n            \"shiftOut\",\n            \"isValid\",\n            \"shiftIn\",\n            \"pulseIn\",\n            \"connect\",\n            \"println\",\n            \"localIP\",\n            \"pinMode\",\n            \"getIMEI\",\n            \"display\",\n            \"noBlink\",\n            \"process\",\n            \"getBand\",\n            \"running\",\n            \"beginSD\",\n            \"drawBMP\",\n            \"lowByte\",\n            \"setBand\",\n            \"release\",\n            \"bitRead\",\n            \"prepare\",\n            \"pointTo\",\n            \"readRed\",\n            \"setMode\",\n            \"noFill\",\n            \"remove\",\n            \"listen\",\n            \"stroke\",\n            \"detach\",\n            \"attach\",\n            \"noTone\",\n            \"exists\",\n            \"buffer\",\n            \"height\",\n            \"bitSet\",\n            \"circle\",\n            \"config\",\n            \"cursor\",\n            \"random\",\n            \"IRread\",\n            \"setDNS\",\n            \"endSMS\",\n            \"getKey\",\n            \"micros\",\n            \"millis\",\n            \"begin\",\n            \"print\",\n            \"write\",\n            \"ready\",\n            \"flush\",\n            \"width\",\n            \"isPIN\",\n            \"blink\",\n            \"clear\",\n            \"press\",\n            \"mkdir\",\n            \"rmdir\",\n            \"close\",\n            \"point\",\n            \"yield\",\n            \"image\",\n            \"BSSID\",\n            \"click\",\n            \"delay\",\n            \"read\",\n            \"text\",\n            \"move\",\n            \"peek\",\n            \"beep\",\n            \"rect\",\n            \"line\",\n            \"open\",\n            \"seek\",\n            \"fill\",\n            \"size\",\n            \"turn\",\n            \"stop\",\n            \"home\",\n            \"find\",\n            \"step\",\n            \"tone\",\n            \"sqrt\",\n            \"RSSI\",\n            \"SSID\",\n            \"end\",\n            \"bit\",\n            \"tan\",\n            \"cos\",\n            \"sin\",\n            \"pow\",\n            \"map\",\n            \"abs\",\n            \"max\",\n            \"min\",\n            \"get\",\n            \"run\",\n            \"put\"\n        ],\n        literal: [\n            \"DIGITAL_MESSAGE\",\n            \"FIRMATA_STRING\",\n            \"ANALOG_MESSAGE\",\n            \"REPORT_DIGITAL\",\n            \"REPORT_ANALOG\",\n            \"INPUT_PULLUP\",\n            \"SET_PIN_MODE\",\n            \"INTERNAL2V56\",\n            \"SYSTEM_RESET\",\n            \"LED_BUILTIN\",\n            \"INTERNAL1V1\",\n            \"SYSEX_START\",\n            \"INTERNAL\",\n            \"EXTERNAL\",\n            \"DEFAULT\",\n            \"OUTPUT\",\n            \"INPUT\",\n            \"HIGH\",\n            \"LOW\"\n        ]\n    };\n    const ARDUINO = cPlusPlus(hljs);\n    const kws = /** @type {Record<string,any>} */ ARDUINO.keywords;\n    kws.type = [\n        ...kws.type,\n        ...ARDUINO_KW.type\n    ];\n    kws.literal = [\n        ...kws.literal,\n        ...ARDUINO_KW.literal\n    ];\n    kws.built_in = [\n        ...kws.built_in,\n        ...ARDUINO_KW.built_in\n    ];\n    kws._hints = ARDUINO_KW._hints;\n    ARDUINO.name = \"Arduino\";\n    ARDUINO.aliases = [\n        \"ino\"\n    ];\n    ARDUINO.supersetOf = \"cpp\";\n    return ARDUINO;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/arduino.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/bash.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/bash.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ bash)\n/* harmony export */ });\n/*\nLanguage: Bash\nAuthor: vah <vahtenberg@gmail.com>\nContributrors: Benjamin Pannell <contact@sierrasoftworks.com>\nWebsite: https://www.gnu.org/software/bash/\nCategory: common, scripting\n*/ /** @type LanguageFn */ function bash(hljs) {\n    const regex = hljs.regex;\n    const VAR = {};\n    const BRACED_VAR = {\n        begin: /\\$\\{/,\n        end: /\\}/,\n        contains: [\n            \"self\",\n            {\n                begin: /:-/,\n                contains: [\n                    VAR\n                ]\n            } // default values\n        ]\n    };\n    Object.assign(VAR, {\n        className: \"variable\",\n        variants: [\n            {\n                begin: regex.concat(/\\$[\\w\\d#@][\\w\\d_]*/, // negative look-ahead tries to avoid matching patterns that are not\n                // Perl at all like $ident$, @ident@, etc.\n                `(?![\\\\w\\\\d])(?![$])`)\n            },\n            BRACED_VAR\n        ]\n    });\n    const SUBST = {\n        className: \"subst\",\n        begin: /\\$\\(/,\n        end: /\\)/,\n        contains: [\n            hljs.BACKSLASH_ESCAPE\n        ]\n    };\n    const COMMENT = hljs.inherit(hljs.COMMENT(), {\n        match: [\n            /(^|\\s)/,\n            /#.*$/\n        ],\n        scope: {\n            2: \"comment\"\n        }\n    });\n    const HERE_DOC = {\n        begin: /<<-?\\s*(?=\\w+)/,\n        starts: {\n            contains: [\n                hljs.END_SAME_AS_BEGIN({\n                    begin: /(\\w+)/,\n                    end: /(\\w+)/,\n                    className: \"string\"\n                })\n            ]\n        }\n    };\n    const QUOTE_STRING = {\n        className: \"string\",\n        begin: /\"/,\n        end: /\"/,\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            VAR,\n            SUBST\n        ]\n    };\n    SUBST.contains.push(QUOTE_STRING);\n    const ESCAPED_QUOTE = {\n        match: /\\\\\"/\n    };\n    const APOS_STRING = {\n        className: \"string\",\n        begin: /'/,\n        end: /'/\n    };\n    const ESCAPED_APOS = {\n        match: /\\\\'/\n    };\n    const ARITHMETIC = {\n        begin: /\\$?\\(\\(/,\n        end: /\\)\\)/,\n        contains: [\n            {\n                begin: /\\d+#[0-9a-f]+/,\n                className: \"number\"\n            },\n            hljs.NUMBER_MODE,\n            VAR\n        ]\n    };\n    const SH_LIKE_SHELLS = [\n        \"fish\",\n        \"bash\",\n        \"zsh\",\n        \"sh\",\n        \"csh\",\n        \"ksh\",\n        \"tcsh\",\n        \"dash\",\n        \"scsh\"\n    ];\n    const KNOWN_SHEBANG = hljs.SHEBANG({\n        binary: `(${SH_LIKE_SHELLS.join(\"|\")})`,\n        relevance: 10\n    });\n    const FUNCTION = {\n        className: \"function\",\n        begin: /\\w[\\w\\d_]*\\s*\\(\\s*\\)\\s*\\{/,\n        returnBegin: true,\n        contains: [\n            hljs.inherit(hljs.TITLE_MODE, {\n                begin: /\\w[\\w\\d_]*/\n            })\n        ],\n        relevance: 0\n    };\n    const KEYWORDS = [\n        \"if\",\n        \"then\",\n        \"else\",\n        \"elif\",\n        \"fi\",\n        \"time\",\n        \"for\",\n        \"while\",\n        \"until\",\n        \"in\",\n        \"do\",\n        \"done\",\n        \"case\",\n        \"esac\",\n        \"coproc\",\n        \"function\",\n        \"select\"\n    ];\n    const LITERALS = [\n        \"true\",\n        \"false\"\n    ];\n    // to consume paths to prevent keyword matches inside them\n    const PATH_MODE = {\n        match: /(\\/[a-z._-]+)+/\n    };\n    // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    const SHELL_BUILT_INS = [\n        \"break\",\n        \"cd\",\n        \"continue\",\n        \"eval\",\n        \"exec\",\n        \"exit\",\n        \"export\",\n        \"getopts\",\n        \"hash\",\n        \"pwd\",\n        \"readonly\",\n        \"return\",\n        \"shift\",\n        \"test\",\n        \"times\",\n        \"trap\",\n        \"umask\",\n        \"unset\"\n    ];\n    const BASH_BUILT_INS = [\n        \"alias\",\n        \"bind\",\n        \"builtin\",\n        \"caller\",\n        \"command\",\n        \"declare\",\n        \"echo\",\n        \"enable\",\n        \"help\",\n        \"let\",\n        \"local\",\n        \"logout\",\n        \"mapfile\",\n        \"printf\",\n        \"read\",\n        \"readarray\",\n        \"source\",\n        \"sudo\",\n        \"type\",\n        \"typeset\",\n        \"ulimit\",\n        \"unalias\"\n    ];\n    const ZSH_BUILT_INS = [\n        \"autoload\",\n        \"bg\",\n        \"bindkey\",\n        \"bye\",\n        \"cap\",\n        \"chdir\",\n        \"clone\",\n        \"comparguments\",\n        \"compcall\",\n        \"compctl\",\n        \"compdescribe\",\n        \"compfiles\",\n        \"compgroups\",\n        \"compquote\",\n        \"comptags\",\n        \"comptry\",\n        \"compvalues\",\n        \"dirs\",\n        \"disable\",\n        \"disown\",\n        \"echotc\",\n        \"echoti\",\n        \"emulate\",\n        \"fc\",\n        \"fg\",\n        \"float\",\n        \"functions\",\n        \"getcap\",\n        \"getln\",\n        \"history\",\n        \"integer\",\n        \"jobs\",\n        \"kill\",\n        \"limit\",\n        \"log\",\n        \"noglob\",\n        \"popd\",\n        \"print\",\n        \"pushd\",\n        \"pushln\",\n        \"rehash\",\n        \"sched\",\n        \"setcap\",\n        \"setopt\",\n        \"stat\",\n        \"suspend\",\n        \"ttyctl\",\n        \"unfunction\",\n        \"unhash\",\n        \"unlimit\",\n        \"unsetopt\",\n        \"vared\",\n        \"wait\",\n        \"whence\",\n        \"where\",\n        \"which\",\n        \"zcompile\",\n        \"zformat\",\n        \"zftp\",\n        \"zle\",\n        \"zmodload\",\n        \"zparseopts\",\n        \"zprof\",\n        \"zpty\",\n        \"zregexparse\",\n        \"zsocket\",\n        \"zstyle\",\n        \"ztcp\"\n    ];\n    const GNU_CORE_UTILS = [\n        \"chcon\",\n        \"chgrp\",\n        \"chown\",\n        \"chmod\",\n        \"cp\",\n        \"dd\",\n        \"df\",\n        \"dir\",\n        \"dircolors\",\n        \"ln\",\n        \"ls\",\n        \"mkdir\",\n        \"mkfifo\",\n        \"mknod\",\n        \"mktemp\",\n        \"mv\",\n        \"realpath\",\n        \"rm\",\n        \"rmdir\",\n        \"shred\",\n        \"sync\",\n        \"touch\",\n        \"truncate\",\n        \"vdir\",\n        \"b2sum\",\n        \"base32\",\n        \"base64\",\n        \"cat\",\n        \"cksum\",\n        \"comm\",\n        \"csplit\",\n        \"cut\",\n        \"expand\",\n        \"fmt\",\n        \"fold\",\n        \"head\",\n        \"join\",\n        \"md5sum\",\n        \"nl\",\n        \"numfmt\",\n        \"od\",\n        \"paste\",\n        \"ptx\",\n        \"pr\",\n        \"sha1sum\",\n        \"sha224sum\",\n        \"sha256sum\",\n        \"sha384sum\",\n        \"sha512sum\",\n        \"shuf\",\n        \"sort\",\n        \"split\",\n        \"sum\",\n        \"tac\",\n        \"tail\",\n        \"tr\",\n        \"tsort\",\n        \"unexpand\",\n        \"uniq\",\n        \"wc\",\n        \"arch\",\n        \"basename\",\n        \"chroot\",\n        \"date\",\n        \"dirname\",\n        \"du\",\n        \"echo\",\n        \"env\",\n        \"expr\",\n        \"factor\",\n        // \"false\", // keyword literal already\n        \"groups\",\n        \"hostid\",\n        \"id\",\n        \"link\",\n        \"logname\",\n        \"nice\",\n        \"nohup\",\n        \"nproc\",\n        \"pathchk\",\n        \"pinky\",\n        \"printenv\",\n        \"printf\",\n        \"pwd\",\n        \"readlink\",\n        \"runcon\",\n        \"seq\",\n        \"sleep\",\n        \"stat\",\n        \"stdbuf\",\n        \"stty\",\n        \"tee\",\n        \"test\",\n        \"timeout\",\n        // \"true\", // keyword literal already\n        \"tty\",\n        \"uname\",\n        \"unlink\",\n        \"uptime\",\n        \"users\",\n        \"who\",\n        \"whoami\",\n        \"yes\"\n    ];\n    return {\n        name: \"Bash\",\n        aliases: [\n            \"sh\",\n            \"zsh\"\n        ],\n        keywords: {\n            $pattern: /\\b[a-z][a-z0-9._-]+\\b/,\n            keyword: KEYWORDS,\n            literal: LITERALS,\n            built_in: [\n                ...SHELL_BUILT_INS,\n                ...BASH_BUILT_INS,\n                // Shell modifiers\n                \"set\",\n                \"shopt\",\n                ...ZSH_BUILT_INS,\n                ...GNU_CORE_UTILS\n            ]\n        },\n        contains: [\n            KNOWN_SHEBANG,\n            hljs.SHEBANG(),\n            FUNCTION,\n            ARITHMETIC,\n            COMMENT,\n            HERE_DOC,\n            PATH_MODE,\n            QUOTE_STRING,\n            ESCAPED_QUOTE,\n            APOS_STRING,\n            ESCAPED_APOS,\n            VAR\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/bash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/c.js":
/*!*****************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/c.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ c)\n/* harmony export */ });\n/*\nLanguage: C\nCategory: common, system\nWebsite: https://en.wikipedia.org/wiki/C_(programming_language)\n*/ /** @type LanguageFn */ function c(hljs) {\n    const regex = hljs.regex;\n    // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n    // not include such support nor can we be sure all the grammars depending\n    // on it would desire this behavior\n    const C_LINE_COMMENT_MODE = hljs.COMMENT(\"//\", \"$\", {\n        contains: [\n            {\n                begin: /\\\\\\n/\n            }\n        ]\n    });\n    const DECLTYPE_AUTO_RE = \"decltype\\\\(auto\\\\)\";\n    const NAMESPACE_RE = \"[a-zA-Z_]\\\\w*::\";\n    const TEMPLATE_ARGUMENT_RE = \"<[^<>]+>\";\n    const FUNCTION_TYPE_RE = \"(\" + DECLTYPE_AUTO_RE + \"|\" + regex.optional(NAMESPACE_RE) + \"[a-zA-Z_]\\\\w*\" + regex.optional(TEMPLATE_ARGUMENT_RE) + \")\";\n    const TYPES = {\n        className: \"type\",\n        variants: [\n            {\n                begin: \"\\\\b[a-z\\\\d_]*_t\\\\b\"\n            },\n            {\n                match: /\\batomic_[a-z]{3,6}\\b/\n            }\n        ]\n    };\n    // https://en.cppreference.com/w/cpp/language/escape\n    // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n    const CHARACTER_ESCAPES = \"\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)\";\n    const STRINGS = {\n        className: \"string\",\n        variants: [\n            {\n                begin: '(u8?|U|L)?\"',\n                end: '\"',\n                illegal: \"\\\\n\",\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ]\n            },\n            {\n                begin: \"(u8?|U|L)?'(\" + CHARACTER_ESCAPES + \"|.)\",\n                end: \"'\",\n                illegal: \".\"\n            },\n            hljs.END_SAME_AS_BEGIN({\n                begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n                end: /\\)([^()\\\\ ]{0,16})\"/\n            })\n        ]\n    };\n    const NUMBERS = {\n        className: \"number\",\n        variants: [\n            {\n                match: /\\b(0b[01']+)/\n            },\n            {\n                match: /(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)/\n            },\n            {\n                match: /(-?)\\b(0[xX][a-fA-F0-9]+(?:'[a-fA-F0-9]+)*(?:\\.[a-fA-F0-9]*(?:'[a-fA-F0-9]*)*)?(?:[pP][-+]?[0-9]+)?(l|L)?(u|U)?)/\n            },\n            {\n                match: /(-?)\\b\\d+(?:'\\d+)*(?:\\.\\d*(?:'\\d*)*)?(?:[eE][-+]?\\d+)?/\n            }\n        ],\n        relevance: 0\n    };\n    const PREPROCESSOR = {\n        className: \"meta\",\n        begin: /#\\s*[a-z]+\\b/,\n        end: /$/,\n        keywords: {\n            keyword: \"if else elif endif define undef warning error line \" + \"pragma _Pragma ifdef ifndef elifdef elifndef include\"\n        },\n        contains: [\n            {\n                begin: /\\\\\\n/,\n                relevance: 0\n            },\n            hljs.inherit(STRINGS, {\n                className: \"string\"\n            }),\n            {\n                className: \"string\",\n                begin: /<.*?>/\n            },\n            C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE\n        ]\n    };\n    const TITLE_MODE = {\n        className: \"title\",\n        begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,\n        relevance: 0\n    };\n    const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + \"\\\\s*\\\\(\";\n    const C_KEYWORDS = [\n        \"asm\",\n        \"auto\",\n        \"break\",\n        \"case\",\n        \"continue\",\n        \"default\",\n        \"do\",\n        \"else\",\n        \"enum\",\n        \"extern\",\n        \"for\",\n        \"fortran\",\n        \"goto\",\n        \"if\",\n        \"inline\",\n        \"register\",\n        \"restrict\",\n        \"return\",\n        \"sizeof\",\n        \"typeof\",\n        \"typeof_unqual\",\n        \"struct\",\n        \"switch\",\n        \"typedef\",\n        \"union\",\n        \"volatile\",\n        \"while\",\n        \"_Alignas\",\n        \"_Alignof\",\n        \"_Atomic\",\n        \"_Generic\",\n        \"_Noreturn\",\n        \"_Static_assert\",\n        \"_Thread_local\",\n        // aliases\n        \"alignas\",\n        \"alignof\",\n        \"noreturn\",\n        \"static_assert\",\n        \"thread_local\",\n        // not a C keyword but is, for all intents and purposes, treated exactly like one.\n        \"_Pragma\"\n    ];\n    const C_TYPES = [\n        \"float\",\n        \"double\",\n        \"signed\",\n        \"unsigned\",\n        \"int\",\n        \"short\",\n        \"long\",\n        \"char\",\n        \"void\",\n        \"_Bool\",\n        \"_BitInt\",\n        \"_Complex\",\n        \"_Imaginary\",\n        \"_Decimal32\",\n        \"_Decimal64\",\n        \"_Decimal96\",\n        \"_Decimal128\",\n        \"_Decimal64x\",\n        \"_Decimal128x\",\n        \"_Float16\",\n        \"_Float32\",\n        \"_Float64\",\n        \"_Float128\",\n        \"_Float32x\",\n        \"_Float64x\",\n        \"_Float128x\",\n        // modifiers\n        \"const\",\n        \"static\",\n        \"constexpr\",\n        // aliases\n        \"complex\",\n        \"bool\",\n        \"imaginary\"\n    ];\n    const KEYWORDS = {\n        keyword: C_KEYWORDS,\n        type: C_TYPES,\n        literal: \"true false NULL\",\n        // TODO: apply hinting work similar to what was done in cpp.js\n        built_in: \"std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream \" + \"auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set \" + \"unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos \" + \"asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp \" + \"fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper \" + \"isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow \" + \"printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp \" + \"strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan \" + \"vfprintf vprintf vsprintf endl initializer_list unique_ptr\"\n    };\n    const EXPRESSION_CONTAINS = [\n        PREPROCESSOR,\n        TYPES,\n        C_LINE_COMMENT_MODE,\n        hljs.C_BLOCK_COMMENT_MODE,\n        NUMBERS,\n        STRINGS\n    ];\n    const EXPRESSION_CONTEXT = {\n        // This mode covers expression context where we can't expect a function\n        // definition and shouldn't highlight anything that looks like one:\n        // `return some()`, `else if()`, `(x*sum(1, 2))`\n        variants: [\n            {\n                begin: /=/,\n                end: /;/\n            },\n            {\n                begin: /\\(/,\n                end: /\\)/\n            },\n            {\n                beginKeywords: \"new throw return else\",\n                end: /;/\n            }\n        ],\n        keywords: KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                keywords: KEYWORDS,\n                contains: EXPRESSION_CONTAINS.concat([\n                    \"self\"\n                ]),\n                relevance: 0\n            }\n        ]),\n        relevance: 0\n    };\n    const FUNCTION_DECLARATION = {\n        begin: \"(\" + FUNCTION_TYPE_RE + \"[\\\\*&\\\\s]+)+\" + FUNCTION_TITLE,\n        returnBegin: true,\n        end: /[{;=]/,\n        excludeEnd: true,\n        keywords: KEYWORDS,\n        illegal: /[^\\w\\s\\*&:<>.]/,\n        contains: [\n            {\n                begin: DECLTYPE_AUTO_RE,\n                keywords: KEYWORDS,\n                relevance: 0\n            },\n            {\n                begin: FUNCTION_TITLE,\n                returnBegin: true,\n                contains: [\n                    hljs.inherit(TITLE_MODE, {\n                        className: \"title.function\"\n                    })\n                ],\n                relevance: 0\n            },\n            // allow for multiple declarations, e.g.:\n            // extern void f(int), g(char);\n            {\n                relevance: 0,\n                match: /,/\n            },\n            {\n                className: \"params\",\n                begin: /\\(/,\n                end: /\\)/,\n                keywords: KEYWORDS,\n                relevance: 0,\n                contains: [\n                    C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    STRINGS,\n                    NUMBERS,\n                    TYPES,\n                    // Count matching parentheses.\n                    {\n                        begin: /\\(/,\n                        end: /\\)/,\n                        keywords: KEYWORDS,\n                        relevance: 0,\n                        contains: [\n                            \"self\",\n                            C_LINE_COMMENT_MODE,\n                            hljs.C_BLOCK_COMMENT_MODE,\n                            STRINGS,\n                            NUMBERS,\n                            TYPES\n                        ]\n                    }\n                ]\n            },\n            TYPES,\n            C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            PREPROCESSOR\n        ]\n    };\n    return {\n        name: \"C\",\n        aliases: [\n            \"h\"\n        ],\n        keywords: KEYWORDS,\n        // Until differentiations are added between `c` and `cpp`, `c` will\n        // not be auto-detected to avoid auto-detect conflicts between C and C++\n        disableAutodetect: true,\n        illegal: \"</\",\n        contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, EXPRESSION_CONTAINS, [\n            PREPROCESSOR,\n            {\n                begin: hljs.IDENT_RE + \"::\",\n                keywords: KEYWORDS\n            },\n            {\n                className: \"class\",\n                beginKeywords: \"enum class struct union\",\n                end: /[{;:<>=]/,\n                contains: [\n                    {\n                        beginKeywords: \"final class struct\"\n                    },\n                    hljs.TITLE_MODE\n                ]\n            }\n        ]),\n        exports: {\n            preprocessor: PREPROCESSOR,\n            strings: STRINGS,\n            keywords: KEYWORDS\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9jLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztBQUlBLEdBRUEscUJBQXFCLEdBQ3JCLFNBQVNBLEVBQUVDLElBQUk7SUFDYixNQUFNQyxRQUFRRCxLQUFLQyxLQUFLO0lBQ3hCLHFFQUFxRTtJQUNyRSx5RUFBeUU7SUFDekUsbUNBQW1DO0lBQ25DLE1BQU1DLHNCQUFzQkYsS0FBS0csT0FBTyxDQUFDLE1BQU0sS0FBSztRQUFFQyxVQUFVO1lBQUU7Z0JBQUVDLE9BQU87WUFBTztTQUFHO0lBQUM7SUFDdEYsTUFBTUMsbUJBQW1CO0lBQ3pCLE1BQU1DLGVBQWU7SUFDckIsTUFBTUMsdUJBQXVCO0lBQzdCLE1BQU1DLG1CQUFtQixNQUNyQkgsbUJBQW1CLE1BQ25CTCxNQUFNUyxRQUFRLENBQUNILGdCQUNmLGtCQUFrQk4sTUFBTVMsUUFBUSxDQUFDRix3QkFDbkM7SUFHRixNQUFNRyxRQUFRO1FBQ1pDLFdBQVc7UUFDWEMsVUFBVTtZQUNSO2dCQUFFUixPQUFPO1lBQXFCO1lBQzlCO2dCQUFFUyxPQUFPO1lBQXdCO1NBQ2xDO0lBRUg7SUFFQSxvREFBb0Q7SUFDcEQsb0NBQW9DO0lBQ3BDLE1BQU1DLG9CQUFvQjtJQUMxQixNQUFNQyxVQUFVO1FBQ2RKLFdBQVc7UUFDWEMsVUFBVTtZQUNSO2dCQUNFUixPQUFPO2dCQUNQWSxLQUFLO2dCQUNMQyxTQUFTO2dCQUNUZCxVQUFVO29CQUFFSixLQUFLbUIsZ0JBQWdCO2lCQUFFO1lBQ3JDO1lBQ0E7Z0JBQ0VkLE9BQU8saUJBQWtCVSxvQkFBb0I7Z0JBQzdDRSxLQUFLO2dCQUNMQyxTQUFTO1lBQ1g7WUFDQWxCLEtBQUtvQixpQkFBaUIsQ0FBQztnQkFDckJmLE9BQU87Z0JBQ1BZLEtBQUs7WUFDUDtTQUNEO0lBQ0g7SUFFQSxNQUFNSSxVQUFVO1FBQ2RULFdBQVc7UUFDWEMsVUFBVTtZQUNSO2dCQUFFQyxPQUFPO1lBQWU7WUFDeEI7Z0JBQUVBLE9BQU87WUFBa0Y7WUFDM0Y7Z0JBQUVBLE9BQU87WUFBbUg7WUFDNUg7Z0JBQUVBLE9BQU87WUFBeUQ7U0FDckU7UUFDQ1EsV0FBVztJQUNiO0lBRUEsTUFBTUMsZUFBZTtRQUNuQlgsV0FBVztRQUNYUCxPQUFPO1FBQ1BZLEtBQUs7UUFDTE8sVUFBVTtZQUFFQyxTQUNSLHdEQUNFO1FBQXVEO1FBQzdEckIsVUFBVTtZQUNSO2dCQUNFQyxPQUFPO2dCQUNQaUIsV0FBVztZQUNiO1lBQ0F0QixLQUFLMEIsT0FBTyxDQUFDVixTQUFTO2dCQUFFSixXQUFXO1lBQVM7WUFDNUM7Z0JBQ0VBLFdBQVc7Z0JBQ1hQLE9BQU87WUFDVDtZQUNBSDtZQUNBRixLQUFLMkIsb0JBQW9CO1NBQzFCO0lBQ0g7SUFFQSxNQUFNQyxhQUFhO1FBQ2pCaEIsV0FBVztRQUNYUCxPQUFPSixNQUFNUyxRQUFRLENBQUNILGdCQUFnQlAsS0FBSzZCLFFBQVE7UUFDbkRQLFdBQVc7SUFDYjtJQUVBLE1BQU1RLGlCQUFpQjdCLE1BQU1TLFFBQVEsQ0FBQ0gsZ0JBQWdCUCxLQUFLNkIsUUFBUSxHQUFHO0lBRXRFLE1BQU1FLGFBQWE7UUFDakI7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxVQUFVO1FBQ1Y7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLGtGQUFrRjtRQUNsRjtLQUNEO0lBRUQsTUFBTUMsVUFBVTtRQUNkO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxZQUFZO1FBQ1o7UUFDQTtRQUNBO1FBQ0EsVUFBVTtRQUNWO1FBQ0E7UUFDQTtLQUNEO0lBRUQsTUFBTUMsV0FBVztRQUNmUixTQUFTTTtRQUNURyxNQUFNRjtRQUNORyxTQUFTO1FBQ1QsOERBQThEO1FBQzlEQyxVQUFVLHdHQUNOLGdHQUNBLDRIQUNBLDRGQUNBLG1HQUNBLHVHQUNBLDBGQUNBLDBGQUNBO0lBQ047SUFFQSxNQUFNQyxzQkFBc0I7UUFDMUJkO1FBQ0FaO1FBQ0FUO1FBQ0FGLEtBQUsyQixvQkFBb0I7UUFDekJOO1FBQ0FMO0tBQ0Q7SUFFRCxNQUFNc0IscUJBQXFCO1FBQ3pCLHVFQUF1RTtRQUN2RSxtRUFBbUU7UUFDbkUsZ0RBQWdEO1FBQ2hEekIsVUFBVTtZQUNSO2dCQUNFUixPQUFPO2dCQUNQWSxLQUFLO1lBQ1A7WUFDQTtnQkFDRVosT0FBTztnQkFDUFksS0FBSztZQUNQO1lBQ0E7Z0JBQ0VzQixlQUFlO2dCQUNmdEIsS0FBSztZQUNQO1NBQ0Q7UUFDRE8sVUFBVVM7UUFDVjdCLFVBQVVpQyxvQkFBb0JHLE1BQU0sQ0FBQztZQUNuQztnQkFDRW5DLE9BQU87Z0JBQ1BZLEtBQUs7Z0JBQ0xPLFVBQVVTO2dCQUNWN0IsVUFBVWlDLG9CQUFvQkcsTUFBTSxDQUFDO29CQUFFO2lCQUFRO2dCQUMvQ2xCLFdBQVc7WUFDYjtTQUNEO1FBQ0RBLFdBQVc7SUFDYjtJQUVBLE1BQU1tQix1QkFBdUI7UUFDM0JwQyxPQUFPLE1BQU1JLG1CQUFtQixpQkFBaUJxQjtRQUNqRFksYUFBYTtRQUNiekIsS0FBSztRQUNMMEIsWUFBWTtRQUNabkIsVUFBVVM7UUFDVmYsU0FBUztRQUNUZCxVQUFVO1lBQ1I7Z0JBQ0VDLE9BQU9DO2dCQUNQa0IsVUFBVVM7Z0JBQ1ZYLFdBQVc7WUFDYjtZQUNBO2dCQUNFakIsT0FBT3lCO2dCQUNQWSxhQUFhO2dCQUNidEMsVUFBVTtvQkFBRUosS0FBSzBCLE9BQU8sQ0FBQ0UsWUFBWTt3QkFBRWhCLFdBQVc7b0JBQWlCO2lCQUFJO2dCQUN2RVUsV0FBVztZQUNiO1lBQ0EseUNBQXlDO1lBQ3pDLCtCQUErQjtZQUMvQjtnQkFDRUEsV0FBVztnQkFDWFIsT0FBTztZQUNUO1lBQ0E7Z0JBQ0VGLFdBQVc7Z0JBQ1hQLE9BQU87Z0JBQ1BZLEtBQUs7Z0JBQ0xPLFVBQVVTO2dCQUNWWCxXQUFXO2dCQUNYbEIsVUFBVTtvQkFDUkY7b0JBQ0FGLEtBQUsyQixvQkFBb0I7b0JBQ3pCWDtvQkFDQUs7b0JBQ0FWO29CQUNBLDhCQUE4QjtvQkFDOUI7d0JBQ0VOLE9BQU87d0JBQ1BZLEtBQUs7d0JBQ0xPLFVBQVVTO3dCQUNWWCxXQUFXO3dCQUNYbEIsVUFBVTs0QkFDUjs0QkFDQUY7NEJBQ0FGLEtBQUsyQixvQkFBb0I7NEJBQ3pCWDs0QkFDQUs7NEJBQ0FWO3lCQUNEO29CQUNIO2lCQUNEO1lBQ0g7WUFDQUE7WUFDQVQ7WUFDQUYsS0FBSzJCLG9CQUFvQjtZQUN6Qko7U0FDRDtJQUNIO0lBRUEsT0FBTztRQUNMcUIsTUFBTTtRQUNOQyxTQUFTO1lBQUU7U0FBSztRQUNoQnJCLFVBQVVTO1FBQ1YsbUVBQW1FO1FBQ25FLHdFQUF3RTtRQUN4RWEsbUJBQW1CO1FBQ25CNUIsU0FBUztRQUNUZCxVQUFVLEVBQUUsQ0FBQ29DLE1BQU0sQ0FDakJGLG9CQUNBRyxzQkFDQUoscUJBQ0E7WUFDRWQ7WUFDQTtnQkFDRWxCLE9BQU9MLEtBQUs2QixRQUFRLEdBQUc7Z0JBQ3ZCTCxVQUFVUztZQUNaO1lBQ0E7Z0JBQ0VyQixXQUFXO2dCQUNYMkIsZUFBZTtnQkFDZnRCLEtBQUs7Z0JBQ0xiLFVBQVU7b0JBQ1I7d0JBQUVtQyxlQUFlO29CQUFxQjtvQkFDdEN2QyxLQUFLNEIsVUFBVTtpQkFDaEI7WUFDSDtTQUNEO1FBQ0htQixTQUFTO1lBQ1BDLGNBQWN6QjtZQUNkMEIsU0FBU2pDO1lBQ1RRLFVBQVVTO1FBQ1o7SUFDRjtBQUNGO0FBRXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb21uaS1jaGF0LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9lcy9sYW5ndWFnZXMvYy5qcz9hNDRlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogQ1xuQ2F0ZWdvcnk6IGNvbW1vbiwgc3lzdGVtXG5XZWJzaXRlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DXyhwcm9ncmFtbWluZ19sYW5ndWFnZSlcbiovXG5cbi8qKiBAdHlwZSBMYW5ndWFnZUZuICovXG5mdW5jdGlvbiBjKGhsanMpIHtcbiAgY29uc3QgcmVnZXggPSBobGpzLnJlZ2V4O1xuICAvLyBhZGRlZCBmb3IgaGlzdG9yaWMgcmVhc29ucyBiZWNhdXNlIGBobGpzLkNfTElORV9DT01NRU5UX01PREVgIGRvZXNcbiAgLy8gbm90IGluY2x1ZGUgc3VjaCBzdXBwb3J0IG5vciBjYW4gd2UgYmUgc3VyZSBhbGwgdGhlIGdyYW1tYXJzIGRlcGVuZGluZ1xuICAvLyBvbiBpdCB3b3VsZCBkZXNpcmUgdGhpcyBiZWhhdmlvclxuICBjb25zdCBDX0xJTkVfQ09NTUVOVF9NT0RFID0gaGxqcy5DT01NRU5UKCcvLycsICckJywgeyBjb250YWluczogWyB7IGJlZ2luOiAvXFxcXFxcbi8gfSBdIH0pO1xuICBjb25zdCBERUNMVFlQRV9BVVRPX1JFID0gJ2RlY2x0eXBlXFxcXChhdXRvXFxcXCknO1xuICBjb25zdCBOQU1FU1BBQ0VfUkUgPSAnW2EtekEtWl9dXFxcXHcqOjonO1xuICBjb25zdCBURU1QTEFURV9BUkdVTUVOVF9SRSA9ICc8W148Pl0rPic7XG4gIGNvbnN0IEZVTkNUSU9OX1RZUEVfUkUgPSAnKCdcbiAgICArIERFQ0xUWVBFX0FVVE9fUkUgKyAnfCdcbiAgICArIHJlZ2V4Lm9wdGlvbmFsKE5BTUVTUEFDRV9SRSlcbiAgICArICdbYS16QS1aX11cXFxcdyonICsgcmVnZXgub3B0aW9uYWwoVEVNUExBVEVfQVJHVU1FTlRfUkUpXG4gICsgJyknO1xuXG5cbiAgY29uc3QgVFlQRVMgPSB7XG4gICAgY2xhc3NOYW1lOiAndHlwZScsXG4gICAgdmFyaWFudHM6IFtcbiAgICAgIHsgYmVnaW46ICdcXFxcYlthLXpcXFxcZF9dKl90XFxcXGInIH0sXG4gICAgICB7IG1hdGNoOiAvXFxiYXRvbWljX1thLXpdezMsNn1cXGIvIH1cbiAgICBdXG5cbiAgfTtcblxuICAvLyBodHRwczovL2VuLmNwcHJlZmVyZW5jZS5jb20vdy9jcHAvbGFuZ3VhZ2UvZXNjYXBlXG4gIC8vIFxcXFwgXFx4IFxceEZGIFxcdTI4MzcgXFx1MDAzMjM3NDcgXFwzNzRcbiAgY29uc3QgQ0hBUkFDVEVSX0VTQ0FQRVMgPSAnXFxcXFxcXFwoeFswLTlBLUZhLWZdezJ9fHVbMC05QS1GYS1mXXs0LDh9fFswLTddezN9fFxcXFxTKSc7XG4gIGNvbnN0IFNUUklOR1MgPSB7XG4gICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICB2YXJpYW50czogW1xuICAgICAge1xuICAgICAgICBiZWdpbjogJyh1OD98VXxMKT9cIicsXG4gICAgICAgIGVuZDogJ1wiJyxcbiAgICAgICAgaWxsZWdhbDogJ1xcXFxuJyxcbiAgICAgICAgY29udGFpbnM6IFsgaGxqcy5CQUNLU0xBU0hfRVNDQVBFIF1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiAnKHU4P3xVfEwpP1xcJygnICsgQ0hBUkFDVEVSX0VTQ0FQRVMgKyBcInwuKVwiLFxuICAgICAgICBlbmQ6ICdcXCcnLFxuICAgICAgICBpbGxlZ2FsOiAnLidcbiAgICAgIH0sXG4gICAgICBobGpzLkVORF9TQU1FX0FTX0JFR0lOKHtcbiAgICAgICAgYmVnaW46IC8oPzp1OD98VXxMKT9SXCIoW14oKVxcXFwgXXswLDE2fSlcXCgvLFxuICAgICAgICBlbmQ6IC9cXCkoW14oKVxcXFwgXXswLDE2fSlcIi9cbiAgICAgIH0pXG4gICAgXVxuICB9O1xuXG4gIGNvbnN0IE5VTUJFUlMgPSB7XG4gICAgY2xhc3NOYW1lOiAnbnVtYmVyJyxcbiAgICB2YXJpYW50czogW1xuICAgICAgeyBtYXRjaDogL1xcYigwYlswMSddKykvIH0sICBcbiAgICAgIHsgbWF0Y2g6IC8oLT8pXFxiKFtcXGQnXSsoXFwuW1xcZCddKik/fFxcLltcXGQnXSspKChsbHxMTHxsfEwpKHV8VSk/fCh1fFUpKGxsfExMfGx8TCk/fGZ8RnxifEIpLyB9LCAgXG4gICAgICB7IG1hdGNoOiAvKC0/KVxcYigwW3hYXVthLWZBLUYwLTldKyg/OidbYS1mQS1GMC05XSspKig/OlxcLlthLWZBLUYwLTldKig/OidbYS1mQS1GMC05XSopKik/KD86W3BQXVstK10/WzAtOV0rKT8obHxMKT8odXxVKT8pLyB9LCAgXG4gICAgICB7IG1hdGNoOiAvKC0/KVxcYlxcZCsoPzonXFxkKykqKD86XFwuXFxkKig/OidcXGQqKSopPyg/OltlRV1bLStdP1xcZCspPy8gfSAgXG4gIF0sXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07ICBcbiAgXG4gIGNvbnN0IFBSRVBST0NFU1NPUiA9IHtcbiAgICBjbGFzc05hbWU6ICdtZXRhJyxcbiAgICBiZWdpbjogLyNcXHMqW2Etel0rXFxiLyxcbiAgICBlbmQ6IC8kLyxcbiAgICBrZXl3b3JkczogeyBrZXl3b3JkOlxuICAgICAgICAnaWYgZWxzZSBlbGlmIGVuZGlmIGRlZmluZSB1bmRlZiB3YXJuaW5nIGVycm9yIGxpbmUgJ1xuICAgICAgICArICdwcmFnbWEgX1ByYWdtYSBpZmRlZiBpZm5kZWYgZWxpZmRlZiBlbGlmbmRlZiBpbmNsdWRlJyB9LFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiAvXFxcXFxcbi8sXG4gICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgfSxcbiAgICAgIGhsanMuaW5oZXJpdChTVFJJTkdTLCB7IGNsYXNzTmFtZTogJ3N0cmluZycgfSksXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ3N0cmluZycsXG4gICAgICAgIGJlZ2luOiAvPC4qPz4vXG4gICAgICB9LFxuICAgICAgQ19MSU5FX0NPTU1FTlRfTU9ERSxcbiAgICAgIGhsanMuQ19CTE9DS19DT01NRU5UX01PREVcbiAgICBdXG4gIH07XG5cbiAgY29uc3QgVElUTEVfTU9ERSA9IHtcbiAgICBjbGFzc05hbWU6ICd0aXRsZScsXG4gICAgYmVnaW46IHJlZ2V4Lm9wdGlvbmFsKE5BTUVTUEFDRV9SRSkgKyBobGpzLklERU5UX1JFLFxuICAgIHJlbGV2YW5jZTogMFxuICB9O1xuXG4gIGNvbnN0IEZVTkNUSU9OX1RJVExFID0gcmVnZXgub3B0aW9uYWwoTkFNRVNQQUNFX1JFKSArIGhsanMuSURFTlRfUkUgKyAnXFxcXHMqXFxcXCgnO1xuXG4gIGNvbnN0IENfS0VZV09SRFMgPSBbXG4gICAgXCJhc21cIixcbiAgICBcImF1dG9cIixcbiAgICBcImJyZWFrXCIsXG4gICAgXCJjYXNlXCIsXG4gICAgXCJjb250aW51ZVwiLFxuICAgIFwiZGVmYXVsdFwiLFxuICAgIFwiZG9cIixcbiAgICBcImVsc2VcIixcbiAgICBcImVudW1cIixcbiAgICBcImV4dGVyblwiLFxuICAgIFwiZm9yXCIsXG4gICAgXCJmb3J0cmFuXCIsXG4gICAgXCJnb3RvXCIsXG4gICAgXCJpZlwiLFxuICAgIFwiaW5saW5lXCIsXG4gICAgXCJyZWdpc3RlclwiLFxuICAgIFwicmVzdHJpY3RcIixcbiAgICBcInJldHVyblwiLFxuICAgIFwic2l6ZW9mXCIsXG4gICAgXCJ0eXBlb2ZcIixcbiAgICBcInR5cGVvZl91bnF1YWxcIixcbiAgICBcInN0cnVjdFwiLFxuICAgIFwic3dpdGNoXCIsXG4gICAgXCJ0eXBlZGVmXCIsXG4gICAgXCJ1bmlvblwiLFxuICAgIFwidm9sYXRpbGVcIixcbiAgICBcIndoaWxlXCIsXG4gICAgXCJfQWxpZ25hc1wiLFxuICAgIFwiX0FsaWdub2ZcIixcbiAgICBcIl9BdG9taWNcIixcbiAgICBcIl9HZW5lcmljXCIsXG4gICAgXCJfTm9yZXR1cm5cIixcbiAgICBcIl9TdGF0aWNfYXNzZXJ0XCIsXG4gICAgXCJfVGhyZWFkX2xvY2FsXCIsXG4gICAgLy8gYWxpYXNlc1xuICAgIFwiYWxpZ25hc1wiLFxuICAgIFwiYWxpZ25vZlwiLFxuICAgIFwibm9yZXR1cm5cIixcbiAgICBcInN0YXRpY19hc3NlcnRcIixcbiAgICBcInRocmVhZF9sb2NhbFwiLFxuICAgIC8vIG5vdCBhIEMga2V5d29yZCBidXQgaXMsIGZvciBhbGwgaW50ZW50cyBhbmQgcHVycG9zZXMsIHRyZWF0ZWQgZXhhY3RseSBsaWtlIG9uZS5cbiAgICBcIl9QcmFnbWFcIlxuICBdO1xuXG4gIGNvbnN0IENfVFlQRVMgPSBbXG4gICAgXCJmbG9hdFwiLFxuICAgIFwiZG91YmxlXCIsXG4gICAgXCJzaWduZWRcIixcbiAgICBcInVuc2lnbmVkXCIsXG4gICAgXCJpbnRcIixcbiAgICBcInNob3J0XCIsXG4gICAgXCJsb25nXCIsXG4gICAgXCJjaGFyXCIsXG4gICAgXCJ2b2lkXCIsXG4gICAgXCJfQm9vbFwiLFxuICAgIFwiX0JpdEludFwiLFxuICAgIFwiX0NvbXBsZXhcIixcbiAgICBcIl9JbWFnaW5hcnlcIixcbiAgICBcIl9EZWNpbWFsMzJcIixcbiAgICBcIl9EZWNpbWFsNjRcIixcbiAgICBcIl9EZWNpbWFsOTZcIixcbiAgICBcIl9EZWNpbWFsMTI4XCIsXG4gICAgXCJfRGVjaW1hbDY0eFwiLFxuICAgIFwiX0RlY2ltYWwxMjh4XCIsXG4gICAgXCJfRmxvYXQxNlwiLFxuICAgIFwiX0Zsb2F0MzJcIixcbiAgICBcIl9GbG9hdDY0XCIsXG4gICAgXCJfRmxvYXQxMjhcIixcbiAgICBcIl9GbG9hdDMyeFwiLFxuICAgIFwiX0Zsb2F0NjR4XCIsXG4gICAgXCJfRmxvYXQxMjh4XCIsXG4gICAgLy8gbW9kaWZpZXJzXG4gICAgXCJjb25zdFwiLFxuICAgIFwic3RhdGljXCIsXG4gICAgXCJjb25zdGV4cHJcIixcbiAgICAvLyBhbGlhc2VzXG4gICAgXCJjb21wbGV4XCIsXG4gICAgXCJib29sXCIsXG4gICAgXCJpbWFnaW5hcnlcIlxuICBdO1xuXG4gIGNvbnN0IEtFWVdPUkRTID0ge1xuICAgIGtleXdvcmQ6IENfS0VZV09SRFMsXG4gICAgdHlwZTogQ19UWVBFUyxcbiAgICBsaXRlcmFsOiAndHJ1ZSBmYWxzZSBOVUxMJyxcbiAgICAvLyBUT0RPOiBhcHBseSBoaW50aW5nIHdvcmsgc2ltaWxhciB0byB3aGF0IHdhcyBkb25lIGluIGNwcC5qc1xuICAgIGJ1aWx0X2luOiAnc3RkIHN0cmluZyB3c3RyaW5nIGNpbiBjb3V0IGNlcnIgY2xvZyBzdGRpbiBzdGRvdXQgc3RkZXJyIHN0cmluZ3N0cmVhbSBpc3RyaW5nc3RyZWFtIG9zdHJpbmdzdHJlYW0gJ1xuICAgICAgKyAnYXV0b19wdHIgZGVxdWUgbGlzdCBxdWV1ZSBzdGFjayB2ZWN0b3IgbWFwIHNldCBwYWlyIGJpdHNldCBtdWx0aXNldCBtdWx0aW1hcCB1bm9yZGVyZWRfc2V0ICdcbiAgICAgICsgJ3Vub3JkZXJlZF9tYXAgdW5vcmRlcmVkX211bHRpc2V0IHVub3JkZXJlZF9tdWx0aW1hcCBwcmlvcml0eV9xdWV1ZSBtYWtlX3BhaXIgYXJyYXkgc2hhcmVkX3B0ciBhYm9ydCB0ZXJtaW5hdGUgYWJzIGFjb3MgJ1xuICAgICAgKyAnYXNpbiBhdGFuMiBhdGFuIGNhbGxvYyBjZWlsIGNvc2ggY29zIGV4aXQgZXhwIGZhYnMgZmxvb3IgZm1vZCBmcHJpbnRmIGZwdXRzIGZyZWUgZnJleHAgJ1xuICAgICAgKyAnZnNjYW5mIGZ1dHVyZSBpc2FsbnVtIGlzYWxwaGEgaXNjbnRybCBpc2RpZ2l0IGlzZ3JhcGggaXNsb3dlciBpc3ByaW50IGlzcHVuY3QgaXNzcGFjZSBpc3VwcGVyICdcbiAgICAgICsgJ2lzeGRpZ2l0IHRvbG93ZXIgdG91cHBlciBsYWJzIGxkZXhwIGxvZzEwIGxvZyBtYWxsb2MgcmVhbGxvYyBtZW1jaHIgbWVtY21wIG1lbWNweSBtZW1zZXQgbW9kZiBwb3cgJ1xuICAgICAgKyAncHJpbnRmIHB1dGNoYXIgcHV0cyBzY2FuZiBzaW5oIHNpbiBzbnByaW50ZiBzcHJpbnRmIHNxcnQgc3NjYW5mIHN0cmNhdCBzdHJjaHIgc3RyY21wICdcbiAgICAgICsgJ3N0cmNweSBzdHJjc3BuIHN0cmxlbiBzdHJuY2F0IHN0cm5jbXAgc3RybmNweSBzdHJwYnJrIHN0cnJjaHIgc3Ryc3BuIHN0cnN0ciB0YW5oIHRhbiAnXG4gICAgICArICd2ZnByaW50ZiB2cHJpbnRmIHZzcHJpbnRmIGVuZGwgaW5pdGlhbGl6ZXJfbGlzdCB1bmlxdWVfcHRyJyxcbiAgfTtcblxuICBjb25zdCBFWFBSRVNTSU9OX0NPTlRBSU5TID0gW1xuICAgIFBSRVBST0NFU1NPUixcbiAgICBUWVBFUyxcbiAgICBDX0xJTkVfQ09NTUVOVF9NT0RFLFxuICAgIGhsanMuQ19CTE9DS19DT01NRU5UX01PREUsXG4gICAgTlVNQkVSUyxcbiAgICBTVFJJTkdTXG4gIF07XG5cbiAgY29uc3QgRVhQUkVTU0lPTl9DT05URVhUID0ge1xuICAgIC8vIFRoaXMgbW9kZSBjb3ZlcnMgZXhwcmVzc2lvbiBjb250ZXh0IHdoZXJlIHdlIGNhbid0IGV4cGVjdCBhIGZ1bmN0aW9uXG4gICAgLy8gZGVmaW5pdGlvbiBhbmQgc2hvdWxkbid0IGhpZ2hsaWdodCBhbnl0aGluZyB0aGF0IGxvb2tzIGxpa2Ugb25lOlxuICAgIC8vIGByZXR1cm4gc29tZSgpYCwgYGVsc2UgaWYoKWAsIGAoeCpzdW0oMSwgMikpYFxuICAgIHZhcmlhbnRzOiBbXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiAvPS8sXG4gICAgICAgIGVuZDogLzsvXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBiZWdpbjogL1xcKC8sXG4gICAgICAgIGVuZDogL1xcKS9cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGJlZ2luS2V5d29yZHM6ICduZXcgdGhyb3cgcmV0dXJuIGVsc2UnLFxuICAgICAgICBlbmQ6IC87L1xuICAgICAgfVxuICAgIF0sXG4gICAga2V5d29yZHM6IEtFWVdPUkRTLFxuICAgIGNvbnRhaW5zOiBFWFBSRVNTSU9OX0NPTlRBSU5TLmNvbmNhdChbXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiAvXFwoLyxcbiAgICAgICAgZW5kOiAvXFwpLyxcbiAgICAgICAga2V5d29yZHM6IEtFWVdPUkRTLFxuICAgICAgICBjb250YWluczogRVhQUkVTU0lPTl9DT05UQUlOUy5jb25jYXQoWyAnc2VsZicgXSksXG4gICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgfVxuICAgIF0pLFxuICAgIHJlbGV2YW5jZTogMFxuICB9O1xuXG4gIGNvbnN0IEZVTkNUSU9OX0RFQ0xBUkFUSU9OID0ge1xuICAgIGJlZ2luOiAnKCcgKyBGVU5DVElPTl9UWVBFX1JFICsgJ1tcXFxcKiZcXFxcc10rKSsnICsgRlVOQ1RJT05fVElUTEUsXG4gICAgcmV0dXJuQmVnaW46IHRydWUsXG4gICAgZW5kOiAvW3s7PV0vLFxuICAgIGV4Y2x1ZGVFbmQ6IHRydWUsXG4gICAga2V5d29yZHM6IEtFWVdPUkRTLFxuICAgIGlsbGVnYWw6IC9bXlxcd1xcc1xcKiY6PD4uXS8sXG4gICAgY29udGFpbnM6IFtcbiAgICAgIHsgLy8gdG8gcHJldmVudCBpdCBmcm9tIGJlaW5nIGNvbmZ1c2VkIGFzIHRoZSBmdW5jdGlvbiB0aXRsZVxuICAgICAgICBiZWdpbjogREVDTFRZUEVfQVVUT19SRSxcbiAgICAgICAga2V5d29yZHM6IEtFWVdPUkRTLFxuICAgICAgICByZWxldmFuY2U6IDBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiBGVU5DVElPTl9USVRMRSxcbiAgICAgICAgcmV0dXJuQmVnaW46IHRydWUsXG4gICAgICAgIGNvbnRhaW5zOiBbIGhsanMuaW5oZXJpdChUSVRMRV9NT0RFLCB7IGNsYXNzTmFtZTogXCJ0aXRsZS5mdW5jdGlvblwiIH0pIF0sXG4gICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgfSxcbiAgICAgIC8vIGFsbG93IGZvciBtdWx0aXBsZSBkZWNsYXJhdGlvbnMsIGUuZy46XG4gICAgICAvLyBleHRlcm4gdm9pZCBmKGludCksIGcoY2hhcik7XG4gICAgICB7XG4gICAgICAgIHJlbGV2YW5jZTogMCxcbiAgICAgICAgbWF0Y2g6IC8sL1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAncGFyYW1zJyxcbiAgICAgICAgYmVnaW46IC9cXCgvLFxuICAgICAgICBlbmQ6IC9cXCkvLFxuICAgICAgICBrZXl3b3JkczogS0VZV09SRFMsXG4gICAgICAgIHJlbGV2YW5jZTogMCxcbiAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICBDX0xJTkVfQ09NTUVOVF9NT0RFLFxuICAgICAgICAgIGhsanMuQ19CTE9DS19DT01NRU5UX01PREUsXG4gICAgICAgICAgU1RSSU5HUyxcbiAgICAgICAgICBOVU1CRVJTLFxuICAgICAgICAgIFRZUEVTLFxuICAgICAgICAgIC8vIENvdW50IG1hdGNoaW5nIHBhcmVudGhlc2VzLlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGJlZ2luOiAvXFwoLyxcbiAgICAgICAgICAgIGVuZDogL1xcKS8sXG4gICAgICAgICAgICBrZXl3b3JkczogS0VZV09SRFMsXG4gICAgICAgICAgICByZWxldmFuY2U6IDAsXG4gICAgICAgICAgICBjb250YWluczogW1xuICAgICAgICAgICAgICAnc2VsZicsXG4gICAgICAgICAgICAgIENfTElORV9DT01NRU5UX01PREUsXG4gICAgICAgICAgICAgIGhsanMuQ19CTE9DS19DT01NRU5UX01PREUsXG4gICAgICAgICAgICAgIFNUUklOR1MsXG4gICAgICAgICAgICAgIE5VTUJFUlMsXG4gICAgICAgICAgICAgIFRZUEVTXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgVFlQRVMsXG4gICAgICBDX0xJTkVfQ09NTUVOVF9NT0RFLFxuICAgICAgaGxqcy5DX0JMT0NLX0NPTU1FTlRfTU9ERSxcbiAgICAgIFBSRVBST0NFU1NPUlxuICAgIF1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IFwiQ1wiLFxuICAgIGFsaWFzZXM6IFsgJ2gnIF0sXG4gICAga2V5d29yZHM6IEtFWVdPUkRTLFxuICAgIC8vIFVudGlsIGRpZmZlcmVudGlhdGlvbnMgYXJlIGFkZGVkIGJldHdlZW4gYGNgIGFuZCBgY3BwYCwgYGNgIHdpbGxcbiAgICAvLyBub3QgYmUgYXV0by1kZXRlY3RlZCB0byBhdm9pZCBhdXRvLWRldGVjdCBjb25mbGljdHMgYmV0d2VlbiBDIGFuZCBDKytcbiAgICBkaXNhYmxlQXV0b2RldGVjdDogdHJ1ZSxcbiAgICBpbGxlZ2FsOiAnPC8nLFxuICAgIGNvbnRhaW5zOiBbXS5jb25jYXQoXG4gICAgICBFWFBSRVNTSU9OX0NPTlRFWFQsXG4gICAgICBGVU5DVElPTl9ERUNMQVJBVElPTixcbiAgICAgIEVYUFJFU1NJT05fQ09OVEFJTlMsXG4gICAgICBbXG4gICAgICAgIFBSRVBST0NFU1NPUixcbiAgICAgICAge1xuICAgICAgICAgIGJlZ2luOiBobGpzLklERU5UX1JFICsgJzo6JyxcbiAgICAgICAgICBrZXl3b3JkczogS0VZV09SRFNcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzTmFtZTogJ2NsYXNzJyxcbiAgICAgICAgICBiZWdpbktleXdvcmRzOiAnZW51bSBjbGFzcyBzdHJ1Y3QgdW5pb24nLFxuICAgICAgICAgIGVuZDogL1t7Ozo8Pj1dLyxcbiAgICAgICAgICBjb250YWluczogW1xuICAgICAgICAgICAgeyBiZWdpbktleXdvcmRzOiBcImZpbmFsIGNsYXNzIHN0cnVjdFwiIH0sXG4gICAgICAgICAgICBobGpzLlRJVExFX01PREVcbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pLFxuICAgIGV4cG9ydHM6IHtcbiAgICAgIHByZXByb2Nlc3NvcjogUFJFUFJPQ0VTU09SLFxuICAgICAgc3RyaW5nczogU1RSSU5HUyxcbiAgICAgIGtleXdvcmRzOiBLRVlXT1JEU1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IHsgYyBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsiYyIsImhsanMiLCJyZWdleCIsIkNfTElORV9DT01NRU5UX01PREUiLCJDT01NRU5UIiwiY29udGFpbnMiLCJiZWdpbiIsIkRFQ0xUWVBFX0FVVE9fUkUiLCJOQU1FU1BBQ0VfUkUiLCJURU1QTEFURV9BUkdVTUVOVF9SRSIsIkZVTkNUSU9OX1RZUEVfUkUiLCJvcHRpb25hbCIsIlRZUEVTIiwiY2xhc3NOYW1lIiwidmFyaWFudHMiLCJtYXRjaCIsIkNIQVJBQ1RFUl9FU0NBUEVTIiwiU1RSSU5HUyIsImVuZCIsImlsbGVnYWwiLCJCQUNLU0xBU0hfRVNDQVBFIiwiRU5EX1NBTUVfQVNfQkVHSU4iLCJOVU1CRVJTIiwicmVsZXZhbmNlIiwiUFJFUFJPQ0VTU09SIiwia2V5d29yZHMiLCJrZXl3b3JkIiwiaW5oZXJpdCIsIkNfQkxPQ0tfQ09NTUVOVF9NT0RFIiwiVElUTEVfTU9ERSIsIklERU5UX1JFIiwiRlVOQ1RJT05fVElUTEUiLCJDX0tFWVdPUkRTIiwiQ19UWVBFUyIsIktFWVdPUkRTIiwidHlwZSIsImxpdGVyYWwiLCJidWlsdF9pbiIsIkVYUFJFU1NJT05fQ09OVEFJTlMiLCJFWFBSRVNTSU9OX0NPTlRFWFQiLCJiZWdpbktleXdvcmRzIiwiY29uY2F0IiwiRlVOQ1RJT05fREVDTEFSQVRJT04iLCJyZXR1cm5CZWdpbiIsImV4Y2x1ZGVFbmQiLCJuYW1lIiwiYWxpYXNlcyIsImRpc2FibGVBdXRvZGV0ZWN0IiwiZXhwb3J0cyIsInByZXByb2Nlc3NvciIsInN0cmluZ3MiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/c.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/cpp.js":
/*!*******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/cpp.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ cpp)\n/* harmony export */ });\n/*\nLanguage: C++\nCategory: common, system\nWebsite: https://isocpp.org\n*/ /** @type LanguageFn */ function cpp(hljs) {\n    const regex = hljs.regex;\n    // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n    // not include such support nor can we be sure all the grammars depending\n    // on it would desire this behavior\n    const C_LINE_COMMENT_MODE = hljs.COMMENT(\"//\", \"$\", {\n        contains: [\n            {\n                begin: /\\\\\\n/\n            }\n        ]\n    });\n    const DECLTYPE_AUTO_RE = \"decltype\\\\(auto\\\\)\";\n    const NAMESPACE_RE = \"[a-zA-Z_]\\\\w*::\";\n    const TEMPLATE_ARGUMENT_RE = \"<[^<>]+>\";\n    const FUNCTION_TYPE_RE = \"(?!struct)(\" + DECLTYPE_AUTO_RE + \"|\" + regex.optional(NAMESPACE_RE) + \"[a-zA-Z_]\\\\w*\" + regex.optional(TEMPLATE_ARGUMENT_RE) + \")\";\n    const CPP_PRIMITIVE_TYPES = {\n        className: \"type\",\n        begin: \"\\\\b[a-z\\\\d_]*_t\\\\b\"\n    };\n    // https://en.cppreference.com/w/cpp/language/escape\n    // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n    const CHARACTER_ESCAPES = \"\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)\";\n    const STRINGS = {\n        className: \"string\",\n        variants: [\n            {\n                begin: '(u8?|U|L)?\"',\n                end: '\"',\n                illegal: \"\\\\n\",\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ]\n            },\n            {\n                begin: \"(u8?|U|L)?'(\" + CHARACTER_ESCAPES + \"|.)\",\n                end: \"'\",\n                illegal: \".\"\n            },\n            hljs.END_SAME_AS_BEGIN({\n                begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n                end: /\\)([^()\\\\ ]{0,16})\"/\n            })\n        ]\n    };\n    const NUMBERS = {\n        className: \"number\",\n        variants: [\n            // Floating-point literal.\n            {\n                begin: \"[+-]?(?:\" // Leading sign.\n                 + \"(?:\" + \"[0-9](?:'?[0-9])*\\\\.(?:[0-9](?:'?[0-9])*)?\" + \"|\\\\.[0-9](?:'?[0-9])*\" + \")(?:[Ee][+-]?[0-9](?:'?[0-9])*)?\" + \"|[0-9](?:'?[0-9])*[Ee][+-]?[0-9](?:'?[0-9])*\" + \"|0[Xx](?:\" + \"[0-9A-Fa-f](?:'?[0-9A-Fa-f])*(?:\\\\.(?:[0-9A-Fa-f](?:'?[0-9A-Fa-f])*)?)?\" + \"|\\\\.[0-9A-Fa-f](?:'?[0-9A-Fa-f])*\" + \")[Pp][+-]?[0-9](?:'?[0-9])*\" + \")(?:\" // Literal suffixes.\n                 + \"[Ff](?:16|32|64|128)?\" + \"|(BF|bf)16\" + \"|[Ll]\" + \"|\" // Literal suffix is optional.\n                 + \")\"\n            },\n            // Integer literal.\n            {\n                begin: \"[+-]?\\\\b(?:\" // Leading sign.\n                 + \"0[Bb][01](?:'?[01])*\" // Binary.\n                 + \"|0[Xx][0-9A-Fa-f](?:'?[0-9A-Fa-f])*\" // Hexadecimal.\n                 + \"|0(?:'?[0-7])*\" // Octal or just a lone zero.\n                 + \"|[1-9](?:'?[0-9])*\" // Decimal.\n                 + \")(?:\" // Literal suffixes.\n                 + \"[Uu](?:LL?|ll?)\" + \"|[Uu][Zz]?\" + \"|(?:LL?|ll?)[Uu]?\" + \"|[Zz][Uu]\" + \"|\" // Literal suffix is optional.\n                 + \")\"\n            }\n        ],\n        relevance: 0\n    };\n    const PREPROCESSOR = {\n        className: \"meta\",\n        begin: /#\\s*[a-z]+\\b/,\n        end: /$/,\n        keywords: {\n            keyword: \"if else elif endif define undef warning error line \" + \"pragma _Pragma ifdef ifndef include\"\n        },\n        contains: [\n            {\n                begin: /\\\\\\n/,\n                relevance: 0\n            },\n            hljs.inherit(STRINGS, {\n                className: \"string\"\n            }),\n            {\n                className: \"string\",\n                begin: /<.*?>/\n            },\n            C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE\n        ]\n    };\n    const TITLE_MODE = {\n        className: \"title\",\n        begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,\n        relevance: 0\n    };\n    const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + \"\\\\s*\\\\(\";\n    // https://en.cppreference.com/w/cpp/keyword\n    const RESERVED_KEYWORDS = [\n        \"alignas\",\n        \"alignof\",\n        \"and\",\n        \"and_eq\",\n        \"asm\",\n        \"atomic_cancel\",\n        \"atomic_commit\",\n        \"atomic_noexcept\",\n        \"auto\",\n        \"bitand\",\n        \"bitor\",\n        \"break\",\n        \"case\",\n        \"catch\",\n        \"class\",\n        \"co_await\",\n        \"co_return\",\n        \"co_yield\",\n        \"compl\",\n        \"concept\",\n        \"const_cast|10\",\n        \"consteval\",\n        \"constexpr\",\n        \"constinit\",\n        \"continue\",\n        \"decltype\",\n        \"default\",\n        \"delete\",\n        \"do\",\n        \"dynamic_cast|10\",\n        \"else\",\n        \"enum\",\n        \"explicit\",\n        \"export\",\n        \"extern\",\n        \"false\",\n        \"final\",\n        \"for\",\n        \"friend\",\n        \"goto\",\n        \"if\",\n        \"import\",\n        \"inline\",\n        \"module\",\n        \"mutable\",\n        \"namespace\",\n        \"new\",\n        \"noexcept\",\n        \"not\",\n        \"not_eq\",\n        \"nullptr\",\n        \"operator\",\n        \"or\",\n        \"or_eq\",\n        \"override\",\n        \"private\",\n        \"protected\",\n        \"public\",\n        \"reflexpr\",\n        \"register\",\n        \"reinterpret_cast|10\",\n        \"requires\",\n        \"return\",\n        \"sizeof\",\n        \"static_assert\",\n        \"static_cast|10\",\n        \"struct\",\n        \"switch\",\n        \"synchronized\",\n        \"template\",\n        \"this\",\n        \"thread_local\",\n        \"throw\",\n        \"transaction_safe\",\n        \"transaction_safe_dynamic\",\n        \"true\",\n        \"try\",\n        \"typedef\",\n        \"typeid\",\n        \"typename\",\n        \"union\",\n        \"using\",\n        \"virtual\",\n        \"volatile\",\n        \"while\",\n        \"xor\",\n        \"xor_eq\"\n    ];\n    // https://en.cppreference.com/w/cpp/keyword\n    const RESERVED_TYPES = [\n        \"bool\",\n        \"char\",\n        \"char16_t\",\n        \"char32_t\",\n        \"char8_t\",\n        \"double\",\n        \"float\",\n        \"int\",\n        \"long\",\n        \"short\",\n        \"void\",\n        \"wchar_t\",\n        \"unsigned\",\n        \"signed\",\n        \"const\",\n        \"static\"\n    ];\n    const TYPE_HINTS = [\n        \"any\",\n        \"auto_ptr\",\n        \"barrier\",\n        \"binary_semaphore\",\n        \"bitset\",\n        \"complex\",\n        \"condition_variable\",\n        \"condition_variable_any\",\n        \"counting_semaphore\",\n        \"deque\",\n        \"false_type\",\n        \"flat_map\",\n        \"flat_set\",\n        \"future\",\n        \"imaginary\",\n        \"initializer_list\",\n        \"istringstream\",\n        \"jthread\",\n        \"latch\",\n        \"lock_guard\",\n        \"multimap\",\n        \"multiset\",\n        \"mutex\",\n        \"optional\",\n        \"ostringstream\",\n        \"packaged_task\",\n        \"pair\",\n        \"promise\",\n        \"priority_queue\",\n        \"queue\",\n        \"recursive_mutex\",\n        \"recursive_timed_mutex\",\n        \"scoped_lock\",\n        \"set\",\n        \"shared_future\",\n        \"shared_lock\",\n        \"shared_mutex\",\n        \"shared_timed_mutex\",\n        \"shared_ptr\",\n        \"stack\",\n        \"string_view\",\n        \"stringstream\",\n        \"timed_mutex\",\n        \"thread\",\n        \"true_type\",\n        \"tuple\",\n        \"unique_lock\",\n        \"unique_ptr\",\n        \"unordered_map\",\n        \"unordered_multimap\",\n        \"unordered_multiset\",\n        \"unordered_set\",\n        \"variant\",\n        \"vector\",\n        \"weak_ptr\",\n        \"wstring\",\n        \"wstring_view\"\n    ];\n    const FUNCTION_HINTS = [\n        \"abort\",\n        \"abs\",\n        \"acos\",\n        \"apply\",\n        \"as_const\",\n        \"asin\",\n        \"atan\",\n        \"atan2\",\n        \"calloc\",\n        \"ceil\",\n        \"cerr\",\n        \"cin\",\n        \"clog\",\n        \"cos\",\n        \"cosh\",\n        \"cout\",\n        \"declval\",\n        \"endl\",\n        \"exchange\",\n        \"exit\",\n        \"exp\",\n        \"fabs\",\n        \"floor\",\n        \"fmod\",\n        \"forward\",\n        \"fprintf\",\n        \"fputs\",\n        \"free\",\n        \"frexp\",\n        \"fscanf\",\n        \"future\",\n        \"invoke\",\n        \"isalnum\",\n        \"isalpha\",\n        \"iscntrl\",\n        \"isdigit\",\n        \"isgraph\",\n        \"islower\",\n        \"isprint\",\n        \"ispunct\",\n        \"isspace\",\n        \"isupper\",\n        \"isxdigit\",\n        \"labs\",\n        \"launder\",\n        \"ldexp\",\n        \"log\",\n        \"log10\",\n        \"make_pair\",\n        \"make_shared\",\n        \"make_shared_for_overwrite\",\n        \"make_tuple\",\n        \"make_unique\",\n        \"malloc\",\n        \"memchr\",\n        \"memcmp\",\n        \"memcpy\",\n        \"memset\",\n        \"modf\",\n        \"move\",\n        \"pow\",\n        \"printf\",\n        \"putchar\",\n        \"puts\",\n        \"realloc\",\n        \"scanf\",\n        \"sin\",\n        \"sinh\",\n        \"snprintf\",\n        \"sprintf\",\n        \"sqrt\",\n        \"sscanf\",\n        \"std\",\n        \"stderr\",\n        \"stdin\",\n        \"stdout\",\n        \"strcat\",\n        \"strchr\",\n        \"strcmp\",\n        \"strcpy\",\n        \"strcspn\",\n        \"strlen\",\n        \"strncat\",\n        \"strncmp\",\n        \"strncpy\",\n        \"strpbrk\",\n        \"strrchr\",\n        \"strspn\",\n        \"strstr\",\n        \"swap\",\n        \"tan\",\n        \"tanh\",\n        \"terminate\",\n        \"to_underlying\",\n        \"tolower\",\n        \"toupper\",\n        \"vfprintf\",\n        \"visit\",\n        \"vprintf\",\n        \"vsprintf\"\n    ];\n    const LITERALS = [\n        \"NULL\",\n        \"false\",\n        \"nullopt\",\n        \"nullptr\",\n        \"true\"\n    ];\n    // https://en.cppreference.com/w/cpp/keyword\n    const BUILT_IN = [\n        \"_Pragma\"\n    ];\n    const CPP_KEYWORDS = {\n        type: RESERVED_TYPES,\n        keyword: RESERVED_KEYWORDS,\n        literal: LITERALS,\n        built_in: BUILT_IN,\n        _type_hints: TYPE_HINTS\n    };\n    const FUNCTION_DISPATCH = {\n        className: \"function.dispatch\",\n        relevance: 0,\n        keywords: {\n            // Only for relevance, not highlighting.\n            _hint: FUNCTION_HINTS\n        },\n        begin: regex.concat(/\\b/, /(?!decltype)/, /(?!if)/, /(?!for)/, /(?!switch)/, /(?!while)/, hljs.IDENT_RE, regex.lookahead(/(<[^<>]+>|)\\s*\\(/))\n    };\n    const EXPRESSION_CONTAINS = [\n        FUNCTION_DISPATCH,\n        PREPROCESSOR,\n        CPP_PRIMITIVE_TYPES,\n        C_LINE_COMMENT_MODE,\n        hljs.C_BLOCK_COMMENT_MODE,\n        NUMBERS,\n        STRINGS\n    ];\n    const EXPRESSION_CONTEXT = {\n        // This mode covers expression context where we can't expect a function\n        // definition and shouldn't highlight anything that looks like one:\n        // `return some()`, `else if()`, `(x*sum(1, 2))`\n        variants: [\n            {\n                begin: /=/,\n                end: /;/\n            },\n            {\n                begin: /\\(/,\n                end: /\\)/\n            },\n            {\n                beginKeywords: \"new throw return else\",\n                end: /;/\n            }\n        ],\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                keywords: CPP_KEYWORDS,\n                contains: EXPRESSION_CONTAINS.concat([\n                    \"self\"\n                ]),\n                relevance: 0\n            }\n        ]),\n        relevance: 0\n    };\n    const FUNCTION_DECLARATION = {\n        className: \"function\",\n        begin: \"(\" + FUNCTION_TYPE_RE + \"[\\\\*&\\\\s]+)+\" + FUNCTION_TITLE,\n        returnBegin: true,\n        end: /[{;=]/,\n        excludeEnd: true,\n        keywords: CPP_KEYWORDS,\n        illegal: /[^\\w\\s\\*&:<>.]/,\n        contains: [\n            {\n                begin: DECLTYPE_AUTO_RE,\n                keywords: CPP_KEYWORDS,\n                relevance: 0\n            },\n            {\n                begin: FUNCTION_TITLE,\n                returnBegin: true,\n                contains: [\n                    TITLE_MODE\n                ],\n                relevance: 0\n            },\n            // needed because we do not have look-behind on the below rule\n            // to prevent it from grabbing the final : in a :: pair\n            {\n                begin: /::/,\n                relevance: 0\n            },\n            // initializers\n            {\n                begin: /:/,\n                endsWithParent: true,\n                contains: [\n                    STRINGS,\n                    NUMBERS\n                ]\n            },\n            // allow for multiple declarations, e.g.:\n            // extern void f(int), g(char);\n            {\n                relevance: 0,\n                match: /,/\n            },\n            {\n                className: \"params\",\n                begin: /\\(/,\n                end: /\\)/,\n                keywords: CPP_KEYWORDS,\n                relevance: 0,\n                contains: [\n                    C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    STRINGS,\n                    NUMBERS,\n                    CPP_PRIMITIVE_TYPES,\n                    // Count matching parentheses.\n                    {\n                        begin: /\\(/,\n                        end: /\\)/,\n                        keywords: CPP_KEYWORDS,\n                        relevance: 0,\n                        contains: [\n                            \"self\",\n                            C_LINE_COMMENT_MODE,\n                            hljs.C_BLOCK_COMMENT_MODE,\n                            STRINGS,\n                            NUMBERS,\n                            CPP_PRIMITIVE_TYPES\n                        ]\n                    }\n                ]\n            },\n            CPP_PRIMITIVE_TYPES,\n            C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            PREPROCESSOR\n        ]\n    };\n    return {\n        name: \"C++\",\n        aliases: [\n            \"cc\",\n            \"c++\",\n            \"h++\",\n            \"hpp\",\n            \"hh\",\n            \"hxx\",\n            \"cxx\"\n        ],\n        keywords: CPP_KEYWORDS,\n        illegal: \"</\",\n        classNameAliases: {\n            \"function.dispatch\": \"built_in\"\n        },\n        contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, FUNCTION_DISPATCH, EXPRESSION_CONTAINS, [\n            PREPROCESSOR,\n            {\n                begin: \"\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function|flat_map|flat_set)\\\\s*<(?!<)\",\n                end: \">\",\n                keywords: CPP_KEYWORDS,\n                contains: [\n                    \"self\",\n                    CPP_PRIMITIVE_TYPES\n                ]\n            },\n            {\n                begin: hljs.IDENT_RE + \"::\",\n                keywords: CPP_KEYWORDS\n            },\n            {\n                match: [\n                    // extra complexity to deal with `enum class` and `enum struct`\n                    /\\b(?:enum(?:\\s+(?:class|struct))?|class|struct|union)/,\n                    /\\s+/,\n                    /\\w+/\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                }\n            }\n        ])\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/cpp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/csharp.js":
/*!**********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/csharp.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ csharp)\n/* harmony export */ });\n/*\nLanguage: C#\nAuthor: Jason Diamond <jason@diamond.name>\nContributor: Nicolas LLOBERA <nllobera@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, David Pine <david.pine@microsoft.com>\nWebsite: https://docs.microsoft.com/dotnet/csharp/\nCategory: common\n*/ /** @type LanguageFn */ function csharp(hljs) {\n    const BUILT_IN_KEYWORDS = [\n        \"bool\",\n        \"byte\",\n        \"char\",\n        \"decimal\",\n        \"delegate\",\n        \"double\",\n        \"dynamic\",\n        \"enum\",\n        \"float\",\n        \"int\",\n        \"long\",\n        \"nint\",\n        \"nuint\",\n        \"object\",\n        \"sbyte\",\n        \"short\",\n        \"string\",\n        \"ulong\",\n        \"uint\",\n        \"ushort\"\n    ];\n    const FUNCTION_MODIFIERS = [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"static\",\n        \"internal\",\n        \"protected\",\n        \"abstract\",\n        \"async\",\n        \"extern\",\n        \"override\",\n        \"unsafe\",\n        \"virtual\",\n        \"new\",\n        \"sealed\",\n        \"partial\"\n    ];\n    const LITERAL_KEYWORDS = [\n        \"default\",\n        \"false\",\n        \"null\",\n        \"true\"\n    ];\n    const NORMAL_KEYWORDS = [\n        \"abstract\",\n        \"as\",\n        \"base\",\n        \"break\",\n        \"case\",\n        \"catch\",\n        \"class\",\n        \"const\",\n        \"continue\",\n        \"do\",\n        \"else\",\n        \"event\",\n        \"explicit\",\n        \"extern\",\n        \"finally\",\n        \"fixed\",\n        \"for\",\n        \"foreach\",\n        \"goto\",\n        \"if\",\n        \"implicit\",\n        \"in\",\n        \"interface\",\n        \"internal\",\n        \"is\",\n        \"lock\",\n        \"namespace\",\n        \"new\",\n        \"operator\",\n        \"out\",\n        \"override\",\n        \"params\",\n        \"private\",\n        \"protected\",\n        \"public\",\n        \"readonly\",\n        \"record\",\n        \"ref\",\n        \"return\",\n        \"scoped\",\n        \"sealed\",\n        \"sizeof\",\n        \"stackalloc\",\n        \"static\",\n        \"struct\",\n        \"switch\",\n        \"this\",\n        \"throw\",\n        \"try\",\n        \"typeof\",\n        \"unchecked\",\n        \"unsafe\",\n        \"using\",\n        \"virtual\",\n        \"void\",\n        \"volatile\",\n        \"while\"\n    ];\n    const CONTEXTUAL_KEYWORDS = [\n        \"add\",\n        \"alias\",\n        \"and\",\n        \"ascending\",\n        \"args\",\n        \"async\",\n        \"await\",\n        \"by\",\n        \"descending\",\n        \"dynamic\",\n        \"equals\",\n        \"file\",\n        \"from\",\n        \"get\",\n        \"global\",\n        \"group\",\n        \"init\",\n        \"into\",\n        \"join\",\n        \"let\",\n        \"nameof\",\n        \"not\",\n        \"notnull\",\n        \"on\",\n        \"or\",\n        \"orderby\",\n        \"partial\",\n        \"record\",\n        \"remove\",\n        \"required\",\n        \"scoped\",\n        \"select\",\n        \"set\",\n        \"unmanaged\",\n        \"value|0\",\n        \"var\",\n        \"when\",\n        \"where\",\n        \"with\",\n        \"yield\"\n    ];\n    const KEYWORDS = {\n        keyword: NORMAL_KEYWORDS.concat(CONTEXTUAL_KEYWORDS),\n        built_in: BUILT_IN_KEYWORDS,\n        literal: LITERAL_KEYWORDS\n    };\n    const TITLE_MODE = hljs.inherit(hljs.TITLE_MODE, {\n        begin: \"[a-zA-Z](\\\\.?\\\\w)*\"\n    });\n    const NUMBERS = {\n        className: \"number\",\n        variants: [\n            {\n                begin: \"\\\\b(0b[01']+)\"\n            },\n            {\n                begin: \"(-?)\\\\b([\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)(u|U|l|L|ul|UL|f|F|b|B)\"\n            },\n            {\n                begin: \"(-?)(\\\\b0[xX][a-fA-F0-9']+|(\\\\b[\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)([eE][-+]?[\\\\d']+)?)\"\n            }\n        ],\n        relevance: 0\n    };\n    const RAW_STRING = {\n        className: \"string\",\n        begin: /\"\"\"(\"*)(?!\")(.|\\n)*?\"\"\"\\1/,\n        relevance: 1\n    };\n    const VERBATIM_STRING = {\n        className: \"string\",\n        begin: '@\"',\n        end: '\"',\n        contains: [\n            {\n                begin: '\"\"'\n            }\n        ]\n    };\n    const VERBATIM_STRING_NO_LF = hljs.inherit(VERBATIM_STRING, {\n        illegal: /\\n/\n    });\n    const SUBST = {\n        className: \"subst\",\n        begin: /\\{/,\n        end: /\\}/,\n        keywords: KEYWORDS\n    };\n    const SUBST_NO_LF = hljs.inherit(SUBST, {\n        illegal: /\\n/\n    });\n    const INTERPOLATED_STRING = {\n        className: \"string\",\n        begin: /\\$\"/,\n        end: '\"',\n        illegal: /\\n/,\n        contains: [\n            {\n                begin: /\\{\\{/\n            },\n            {\n                begin: /\\}\\}/\n            },\n            hljs.BACKSLASH_ESCAPE,\n            SUBST_NO_LF\n        ]\n    };\n    const INTERPOLATED_VERBATIM_STRING = {\n        className: \"string\",\n        begin: /\\$@\"/,\n        end: '\"',\n        contains: [\n            {\n                begin: /\\{\\{/\n            },\n            {\n                begin: /\\}\\}/\n            },\n            {\n                begin: '\"\"'\n            },\n            SUBST\n        ]\n    };\n    const INTERPOLATED_VERBATIM_STRING_NO_LF = hljs.inherit(INTERPOLATED_VERBATIM_STRING, {\n        illegal: /\\n/,\n        contains: [\n            {\n                begin: /\\{\\{/\n            },\n            {\n                begin: /\\}\\}/\n            },\n            {\n                begin: '\"\"'\n            },\n            SUBST_NO_LF\n        ]\n    });\n    SUBST.contains = [\n        INTERPOLATED_VERBATIM_STRING,\n        INTERPOLATED_STRING,\n        VERBATIM_STRING,\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE,\n        NUMBERS,\n        hljs.C_BLOCK_COMMENT_MODE\n    ];\n    SUBST_NO_LF.contains = [\n        INTERPOLATED_VERBATIM_STRING_NO_LF,\n        INTERPOLATED_STRING,\n        VERBATIM_STRING_NO_LF,\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE,\n        NUMBERS,\n        hljs.inherit(hljs.C_BLOCK_COMMENT_MODE, {\n            illegal: /\\n/\n        })\n    ];\n    const STRING = {\n        variants: [\n            RAW_STRING,\n            INTERPOLATED_VERBATIM_STRING,\n            INTERPOLATED_STRING,\n            VERBATIM_STRING,\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE\n        ]\n    };\n    const GENERIC_MODIFIER = {\n        begin: \"<\",\n        end: \">\",\n        contains: [\n            {\n                beginKeywords: \"in out\"\n            },\n            TITLE_MODE\n        ]\n    };\n    const TYPE_IDENT_RE = hljs.IDENT_RE + \"(<\" + hljs.IDENT_RE + \"(\\\\s*,\\\\s*\" + hljs.IDENT_RE + \")*>)?(\\\\[\\\\])?\";\n    const AT_IDENTIFIER = {\n        // prevents expressions like `@class` from incorrect flagging\n        // `class` as a keyword\n        begin: \"@\" + hljs.IDENT_RE,\n        relevance: 0\n    };\n    return {\n        name: \"C#\",\n        aliases: [\n            \"cs\",\n            \"c#\"\n        ],\n        keywords: KEYWORDS,\n        illegal: /::/,\n        contains: [\n            hljs.COMMENT(\"///\", \"$\", {\n                returnBegin: true,\n                contains: [\n                    {\n                        className: \"doctag\",\n                        variants: [\n                            {\n                                begin: \"///\",\n                                relevance: 0\n                            },\n                            {\n                                begin: \"<!--|-->\"\n                            },\n                            {\n                                begin: \"</?\",\n                                end: \">\"\n                            }\n                        ]\n                    }\n                ]\n            }),\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            {\n                className: \"meta\",\n                begin: \"#\",\n                end: \"$\",\n                keywords: {\n                    keyword: \"if else elif endif define undef warning error line region endregion pragma checksum\"\n                }\n            },\n            STRING,\n            NUMBERS,\n            {\n                beginKeywords: \"class interface\",\n                relevance: 0,\n                end: /[{;=]/,\n                illegal: /[^\\s:,]/,\n                contains: [\n                    {\n                        beginKeywords: \"where class\"\n                    },\n                    TITLE_MODE,\n                    GENERIC_MODIFIER,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            {\n                beginKeywords: \"namespace\",\n                relevance: 0,\n                end: /[{;=]/,\n                illegal: /[^\\s:]/,\n                contains: [\n                    TITLE_MODE,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            {\n                beginKeywords: \"record\",\n                relevance: 0,\n                end: /[{;=]/,\n                illegal: /[^\\s:]/,\n                contains: [\n                    TITLE_MODE,\n                    GENERIC_MODIFIER,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            {\n                // [Attributes(\"\")]\n                className: \"meta\",\n                begin: \"^\\\\s*\\\\[(?=[\\\\w])\",\n                excludeBegin: true,\n                end: \"\\\\]\",\n                excludeEnd: true,\n                contains: [\n                    {\n                        className: \"string\",\n                        begin: /\"/,\n                        end: /\"/\n                    }\n                ]\n            },\n            {\n                // Expression keywords prevent 'keyword Name(...)' from being\n                // recognized as a function definition\n                beginKeywords: \"new return throw await else\",\n                relevance: 0\n            },\n            {\n                className: \"function\",\n                begin: \"(\" + TYPE_IDENT_RE + \"\\\\s+)+\" + hljs.IDENT_RE + \"\\\\s*(<[^=]+>\\\\s*)?\\\\(\",\n                returnBegin: true,\n                end: /\\s*[{;=]/,\n                excludeEnd: true,\n                keywords: KEYWORDS,\n                contains: [\n                    // prevents these from being highlighted `title`\n                    {\n                        beginKeywords: FUNCTION_MODIFIERS.join(\" \"),\n                        relevance: 0\n                    },\n                    {\n                        begin: hljs.IDENT_RE + \"\\\\s*(<[^=]+>\\\\s*)?\\\\(\",\n                        returnBegin: true,\n                        contains: [\n                            hljs.TITLE_MODE,\n                            GENERIC_MODIFIER\n                        ],\n                        relevance: 0\n                    },\n                    {\n                        match: /\\(\\)/\n                    },\n                    {\n                        className: \"params\",\n                        begin: /\\(/,\n                        end: /\\)/,\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        keywords: KEYWORDS,\n                        relevance: 0,\n                        contains: [\n                            STRING,\n                            NUMBERS,\n                            hljs.C_BLOCK_COMMENT_MODE\n                        ]\n                    },\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            AT_IDENTIFIER\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9jc2hhcnAuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7QUFNQSxHQUVBLHFCQUFxQixHQUNyQixTQUFTQSxPQUFPQyxJQUFJO0lBQ2xCLE1BQU1DLG9CQUFvQjtRQUN4QjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFDRCxNQUFNQyxxQkFBcUI7UUFDekI7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFDRCxNQUFNQyxtQkFBbUI7UUFDdkI7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUNELE1BQU1DLGtCQUFrQjtRQUN0QjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUNELE1BQU1DLHNCQUFzQjtRQUMxQjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtLQUNEO0lBRUQsTUFBTUMsV0FBVztRQUNmQyxTQUFTSCxnQkFBZ0JJLE1BQU0sQ0FBQ0g7UUFDaENJLFVBQVVSO1FBQ1ZTLFNBQVNQO0lBQ1g7SUFDQSxNQUFNUSxhQUFhWCxLQUFLWSxPQUFPLENBQUNaLEtBQUtXLFVBQVUsRUFBRTtRQUFFRSxPQUFPO0lBQXFCO0lBQy9FLE1BQU1DLFVBQVU7UUFDZEMsV0FBVztRQUNYQyxVQUFVO1lBQ1I7Z0JBQUVILE9BQU87WUFBaUI7WUFDMUI7Z0JBQUVBLE9BQU87WUFBcUU7WUFDOUU7Z0JBQUVBLE9BQU87WUFBMkY7U0FDckc7UUFDREksV0FBVztJQUNiO0lBQ0EsTUFBTUMsYUFBYTtRQUNqQkgsV0FBVztRQUNYRixPQUFPO1FBQ1BJLFdBQVc7SUFDYjtJQUNBLE1BQU1FLGtCQUFrQjtRQUN0QkosV0FBVztRQUNYRixPQUFPO1FBQ1BPLEtBQUs7UUFDTEMsVUFBVTtZQUFFO2dCQUFFUixPQUFPO1lBQUs7U0FBRztJQUMvQjtJQUNBLE1BQU1TLHdCQUF3QnRCLEtBQUtZLE9BQU8sQ0FBQ08saUJBQWlCO1FBQUVJLFNBQVM7SUFBSztJQUM1RSxNQUFNQyxRQUFRO1FBQ1pULFdBQVc7UUFDWEYsT0FBTztRQUNQTyxLQUFLO1FBQ0xLLFVBQVVuQjtJQUNaO0lBQ0EsTUFBTW9CLGNBQWMxQixLQUFLWSxPQUFPLENBQUNZLE9BQU87UUFBRUQsU0FBUztJQUFLO0lBQ3hELE1BQU1JLHNCQUFzQjtRQUMxQlosV0FBVztRQUNYRixPQUFPO1FBQ1BPLEtBQUs7UUFDTEcsU0FBUztRQUNURixVQUFVO1lBQ1I7Z0JBQUVSLE9BQU87WUFBTztZQUNoQjtnQkFBRUEsT0FBTztZQUFPO1lBQ2hCYixLQUFLNEIsZ0JBQWdCO1lBQ3JCRjtTQUNEO0lBQ0g7SUFDQSxNQUFNRywrQkFBK0I7UUFDbkNkLFdBQVc7UUFDWEYsT0FBTztRQUNQTyxLQUFLO1FBQ0xDLFVBQVU7WUFDUjtnQkFBRVIsT0FBTztZQUFPO1lBQ2hCO2dCQUFFQSxPQUFPO1lBQU87WUFDaEI7Z0JBQUVBLE9BQU87WUFBSztZQUNkVztTQUNEO0lBQ0g7SUFDQSxNQUFNTSxxQ0FBcUM5QixLQUFLWSxPQUFPLENBQUNpQiw4QkFBOEI7UUFDcEZOLFNBQVM7UUFDVEYsVUFBVTtZQUNSO2dCQUFFUixPQUFPO1lBQU87WUFDaEI7Z0JBQUVBLE9BQU87WUFBTztZQUNoQjtnQkFBRUEsT0FBTztZQUFLO1lBQ2RhO1NBQ0Q7SUFDSDtJQUNBRixNQUFNSCxRQUFRLEdBQUc7UUFDZlE7UUFDQUY7UUFDQVI7UUFDQW5CLEtBQUsrQixnQkFBZ0I7UUFDckIvQixLQUFLZ0MsaUJBQWlCO1FBQ3RCbEI7UUFDQWQsS0FBS2lDLG9CQUFvQjtLQUMxQjtJQUNEUCxZQUFZTCxRQUFRLEdBQUc7UUFDckJTO1FBQ0FIO1FBQ0FMO1FBQ0F0QixLQUFLK0IsZ0JBQWdCO1FBQ3JCL0IsS0FBS2dDLGlCQUFpQjtRQUN0QmxCO1FBQ0FkLEtBQUtZLE9BQU8sQ0FBQ1osS0FBS2lDLG9CQUFvQixFQUFFO1lBQUVWLFNBQVM7UUFBSztLQUN6RDtJQUNELE1BQU1XLFNBQVM7UUFBRWxCLFVBQVU7WUFDekJFO1lBQ0FXO1lBQ0FGO1lBQ0FSO1lBQ0FuQixLQUFLK0IsZ0JBQWdCO1lBQ3JCL0IsS0FBS2dDLGlCQUFpQjtTQUN2QjtJQUFDO0lBRUYsTUFBTUcsbUJBQW1CO1FBQ3ZCdEIsT0FBTztRQUNQTyxLQUFLO1FBQ0xDLFVBQVU7WUFDUjtnQkFBRWUsZUFBZTtZQUFTO1lBQzFCekI7U0FDRDtJQUNIO0lBQ0EsTUFBTTBCLGdCQUFnQnJDLEtBQUtzQyxRQUFRLEdBQUcsT0FBT3RDLEtBQUtzQyxRQUFRLEdBQUcsZUFBZXRDLEtBQUtzQyxRQUFRLEdBQUc7SUFDNUYsTUFBTUMsZ0JBQWdCO1FBQ3BCLDZEQUE2RDtRQUM3RCx1QkFBdUI7UUFDdkIxQixPQUFPLE1BQU1iLEtBQUtzQyxRQUFRO1FBQzFCckIsV0FBVztJQUNiO0lBRUEsT0FBTztRQUNMdUIsTUFBTTtRQUNOQyxTQUFTO1lBQ1A7WUFDQTtTQUNEO1FBQ0RoQixVQUFVbkI7UUFDVmlCLFNBQVM7UUFDVEYsVUFBVTtZQUNSckIsS0FBSzBDLE9BQU8sQ0FDVixPQUNBLEtBQ0E7Z0JBQ0VDLGFBQWE7Z0JBQ2J0QixVQUFVO29CQUNSO3dCQUNFTixXQUFXO3dCQUNYQyxVQUFVOzRCQUNSO2dDQUNFSCxPQUFPO2dDQUNQSSxXQUFXOzRCQUNiOzRCQUNBO2dDQUFFSixPQUFPOzRCQUFXOzRCQUNwQjtnQ0FDRUEsT0FBTztnQ0FDUE8sS0FBSzs0QkFDUDt5QkFDRDtvQkFDSDtpQkFDRDtZQUNIO1lBRUZwQixLQUFLNEMsbUJBQW1CO1lBQ3hCNUMsS0FBS2lDLG9CQUFvQjtZQUN6QjtnQkFDRWxCLFdBQVc7Z0JBQ1hGLE9BQU87Z0JBQ1BPLEtBQUs7Z0JBQ0xLLFVBQVU7b0JBQUVsQixTQUFTO2dCQUFzRjtZQUM3RztZQUNBMkI7WUFDQXBCO1lBQ0E7Z0JBQ0VzQixlQUFlO2dCQUNmbkIsV0FBVztnQkFDWEcsS0FBSztnQkFDTEcsU0FBUztnQkFDVEYsVUFBVTtvQkFDUjt3QkFBRWUsZUFBZTtvQkFBYztvQkFDL0J6QjtvQkFDQXdCO29CQUNBbkMsS0FBSzRDLG1CQUFtQjtvQkFDeEI1QyxLQUFLaUMsb0JBQW9CO2lCQUMxQjtZQUNIO1lBQ0E7Z0JBQ0VHLGVBQWU7Z0JBQ2ZuQixXQUFXO2dCQUNYRyxLQUFLO2dCQUNMRyxTQUFTO2dCQUNURixVQUFVO29CQUNSVjtvQkFDQVgsS0FBSzRDLG1CQUFtQjtvQkFDeEI1QyxLQUFLaUMsb0JBQW9CO2lCQUMxQjtZQUNIO1lBQ0E7Z0JBQ0VHLGVBQWU7Z0JBQ2ZuQixXQUFXO2dCQUNYRyxLQUFLO2dCQUNMRyxTQUFTO2dCQUNURixVQUFVO29CQUNSVjtvQkFDQXdCO29CQUNBbkMsS0FBSzRDLG1CQUFtQjtvQkFDeEI1QyxLQUFLaUMsb0JBQW9CO2lCQUMxQjtZQUNIO1lBQ0E7Z0JBQ0UsbUJBQW1CO2dCQUNuQmxCLFdBQVc7Z0JBQ1hGLE9BQU87Z0JBQ1BnQyxjQUFjO2dCQUNkekIsS0FBSztnQkFDTDBCLFlBQVk7Z0JBQ1p6QixVQUFVO29CQUNSO3dCQUNFTixXQUFXO3dCQUNYRixPQUFPO3dCQUNQTyxLQUFLO29CQUNQO2lCQUNEO1lBQ0g7WUFDQTtnQkFDRSw2REFBNkQ7Z0JBQzdELHNDQUFzQztnQkFDdENnQixlQUFlO2dCQUNmbkIsV0FBVztZQUNiO1lBQ0E7Z0JBQ0VGLFdBQVc7Z0JBQ1hGLE9BQU8sTUFBTXdCLGdCQUFnQixXQUFXckMsS0FBS3NDLFFBQVEsR0FBRztnQkFDeERLLGFBQWE7Z0JBQ2J2QixLQUFLO2dCQUNMMEIsWUFBWTtnQkFDWnJCLFVBQVVuQjtnQkFDVmUsVUFBVTtvQkFDUixnREFBZ0Q7b0JBQ2hEO3dCQUNFZSxlQUFlbEMsbUJBQW1CNkMsSUFBSSxDQUFDO3dCQUN2QzlCLFdBQVc7b0JBQ2I7b0JBQ0E7d0JBQ0VKLE9BQU9iLEtBQUtzQyxRQUFRLEdBQUc7d0JBQ3ZCSyxhQUFhO3dCQUNidEIsVUFBVTs0QkFDUnJCLEtBQUtXLFVBQVU7NEJBQ2Z3Qjt5QkFDRDt3QkFDRGxCLFdBQVc7b0JBQ2I7b0JBQ0E7d0JBQUUrQixPQUFPO29CQUFPO29CQUNoQjt3QkFDRWpDLFdBQVc7d0JBQ1hGLE9BQU87d0JBQ1BPLEtBQUs7d0JBQ0x5QixjQUFjO3dCQUNkQyxZQUFZO3dCQUNackIsVUFBVW5CO3dCQUNWVyxXQUFXO3dCQUNYSSxVQUFVOzRCQUNSYTs0QkFDQXBCOzRCQUNBZCxLQUFLaUMsb0JBQW9CO3lCQUMxQjtvQkFDSDtvQkFDQWpDLEtBQUs0QyxtQkFBbUI7b0JBQ3hCNUMsS0FBS2lDLG9CQUFvQjtpQkFDMUI7WUFDSDtZQUNBTTtTQUNEO0lBQ0g7QUFDRjtBQUU2QiIsInNvdXJjZXMiOlsid2VicGFjazovL29tbmktY2hhdC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9oaWdobGlnaHQuanMvZXMvbGFuZ3VhZ2VzL2NzaGFycC5qcz9lOTUxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogQyNcbkF1dGhvcjogSmFzb24gRGlhbW9uZCA8amFzb25AZGlhbW9uZC5uYW1lPlxuQ29udHJpYnV0b3I6IE5pY29sYXMgTExPQkVSQSA8bmxsb2JlcmFAZ21haWwuY29tPiwgUGlldGVyIFZhbnRvcnJlIDxwaWV0ZXJ2YW50b3JyZUBnbWFpbC5jb20+LCBEYXZpZCBQaW5lIDxkYXZpZC5waW5lQG1pY3Jvc29mdC5jb20+XG5XZWJzaXRlOiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9kb3RuZXQvY3NoYXJwL1xuQ2F0ZWdvcnk6IGNvbW1vblxuKi9cblxuLyoqIEB0eXBlIExhbmd1YWdlRm4gKi9cbmZ1bmN0aW9uIGNzaGFycChobGpzKSB7XG4gIGNvbnN0IEJVSUxUX0lOX0tFWVdPUkRTID0gW1xuICAgICdib29sJyxcbiAgICAnYnl0ZScsXG4gICAgJ2NoYXInLFxuICAgICdkZWNpbWFsJyxcbiAgICAnZGVsZWdhdGUnLFxuICAgICdkb3VibGUnLFxuICAgICdkeW5hbWljJyxcbiAgICAnZW51bScsXG4gICAgJ2Zsb2F0JyxcbiAgICAnaW50JyxcbiAgICAnbG9uZycsXG4gICAgJ25pbnQnLFxuICAgICdudWludCcsXG4gICAgJ29iamVjdCcsXG4gICAgJ3NieXRlJyxcbiAgICAnc2hvcnQnLFxuICAgICdzdHJpbmcnLFxuICAgICd1bG9uZycsXG4gICAgJ3VpbnQnLFxuICAgICd1c2hvcnQnXG4gIF07XG4gIGNvbnN0IEZVTkNUSU9OX01PRElGSUVSUyA9IFtcbiAgICAncHVibGljJyxcbiAgICAncHJpdmF0ZScsXG4gICAgJ3Byb3RlY3RlZCcsXG4gICAgJ3N0YXRpYycsXG4gICAgJ2ludGVybmFsJyxcbiAgICAncHJvdGVjdGVkJyxcbiAgICAnYWJzdHJhY3QnLFxuICAgICdhc3luYycsXG4gICAgJ2V4dGVybicsXG4gICAgJ292ZXJyaWRlJyxcbiAgICAndW5zYWZlJyxcbiAgICAndmlydHVhbCcsXG4gICAgJ25ldycsXG4gICAgJ3NlYWxlZCcsXG4gICAgJ3BhcnRpYWwnXG4gIF07XG4gIGNvbnN0IExJVEVSQUxfS0VZV09SRFMgPSBbXG4gICAgJ2RlZmF1bHQnLFxuICAgICdmYWxzZScsXG4gICAgJ251bGwnLFxuICAgICd0cnVlJ1xuICBdO1xuICBjb25zdCBOT1JNQUxfS0VZV09SRFMgPSBbXG4gICAgJ2Fic3RyYWN0JyxcbiAgICAnYXMnLFxuICAgICdiYXNlJyxcbiAgICAnYnJlYWsnLFxuICAgICdjYXNlJyxcbiAgICAnY2F0Y2gnLFxuICAgICdjbGFzcycsXG4gICAgJ2NvbnN0JyxcbiAgICAnY29udGludWUnLFxuICAgICdkbycsXG4gICAgJ2Vsc2UnLFxuICAgICdldmVudCcsXG4gICAgJ2V4cGxpY2l0JyxcbiAgICAnZXh0ZXJuJyxcbiAgICAnZmluYWxseScsXG4gICAgJ2ZpeGVkJyxcbiAgICAnZm9yJyxcbiAgICAnZm9yZWFjaCcsXG4gICAgJ2dvdG8nLFxuICAgICdpZicsXG4gICAgJ2ltcGxpY2l0JyxcbiAgICAnaW4nLFxuICAgICdpbnRlcmZhY2UnLFxuICAgICdpbnRlcm5hbCcsXG4gICAgJ2lzJyxcbiAgICAnbG9jaycsXG4gICAgJ25hbWVzcGFjZScsXG4gICAgJ25ldycsXG4gICAgJ29wZXJhdG9yJyxcbiAgICAnb3V0JyxcbiAgICAnb3ZlcnJpZGUnLFxuICAgICdwYXJhbXMnLFxuICAgICdwcml2YXRlJyxcbiAgICAncHJvdGVjdGVkJyxcbiAgICAncHVibGljJyxcbiAgICAncmVhZG9ubHknLFxuICAgICdyZWNvcmQnLFxuICAgICdyZWYnLFxuICAgICdyZXR1cm4nLFxuICAgICdzY29wZWQnLFxuICAgICdzZWFsZWQnLFxuICAgICdzaXplb2YnLFxuICAgICdzdGFja2FsbG9jJyxcbiAgICAnc3RhdGljJyxcbiAgICAnc3RydWN0JyxcbiAgICAnc3dpdGNoJyxcbiAgICAndGhpcycsXG4gICAgJ3Rocm93JyxcbiAgICAndHJ5JyxcbiAgICAndHlwZW9mJyxcbiAgICAndW5jaGVja2VkJyxcbiAgICAndW5zYWZlJyxcbiAgICAndXNpbmcnLFxuICAgICd2aXJ0dWFsJyxcbiAgICAndm9pZCcsXG4gICAgJ3ZvbGF0aWxlJyxcbiAgICAnd2hpbGUnXG4gIF07XG4gIGNvbnN0IENPTlRFWFRVQUxfS0VZV09SRFMgPSBbXG4gICAgJ2FkZCcsXG4gICAgJ2FsaWFzJyxcbiAgICAnYW5kJyxcbiAgICAnYXNjZW5kaW5nJyxcbiAgICAnYXJncycsXG4gICAgJ2FzeW5jJyxcbiAgICAnYXdhaXQnLFxuICAgICdieScsXG4gICAgJ2Rlc2NlbmRpbmcnLFxuICAgICdkeW5hbWljJyxcbiAgICAnZXF1YWxzJyxcbiAgICAnZmlsZScsXG4gICAgJ2Zyb20nLFxuICAgICdnZXQnLFxuICAgICdnbG9iYWwnLFxuICAgICdncm91cCcsXG4gICAgJ2luaXQnLFxuICAgICdpbnRvJyxcbiAgICAnam9pbicsXG4gICAgJ2xldCcsXG4gICAgJ25hbWVvZicsXG4gICAgJ25vdCcsXG4gICAgJ25vdG51bGwnLFxuICAgICdvbicsXG4gICAgJ29yJyxcbiAgICAnb3JkZXJieScsXG4gICAgJ3BhcnRpYWwnLFxuICAgICdyZWNvcmQnLFxuICAgICdyZW1vdmUnLFxuICAgICdyZXF1aXJlZCcsXG4gICAgJ3Njb3BlZCcsXG4gICAgJ3NlbGVjdCcsXG4gICAgJ3NldCcsXG4gICAgJ3VubWFuYWdlZCcsXG4gICAgJ3ZhbHVlfDAnLFxuICAgICd2YXInLFxuICAgICd3aGVuJyxcbiAgICAnd2hlcmUnLFxuICAgICd3aXRoJyxcbiAgICAneWllbGQnXG4gIF07XG5cbiAgY29uc3QgS0VZV09SRFMgPSB7XG4gICAga2V5d29yZDogTk9STUFMX0tFWVdPUkRTLmNvbmNhdChDT05URVhUVUFMX0tFWVdPUkRTKSxcbiAgICBidWlsdF9pbjogQlVJTFRfSU5fS0VZV09SRFMsXG4gICAgbGl0ZXJhbDogTElURVJBTF9LRVlXT1JEU1xuICB9O1xuICBjb25zdCBUSVRMRV9NT0RFID0gaGxqcy5pbmhlcml0KGhsanMuVElUTEVfTU9ERSwgeyBiZWdpbjogJ1thLXpBLVpdKFxcXFwuP1xcXFx3KSonIH0pO1xuICBjb25zdCBOVU1CRVJTID0ge1xuICAgIGNsYXNzTmFtZTogJ251bWJlcicsXG4gICAgdmFyaWFudHM6IFtcbiAgICAgIHsgYmVnaW46ICdcXFxcYigwYlswMVxcJ10rKScgfSxcbiAgICAgIHsgYmVnaW46ICcoLT8pXFxcXGIoW1xcXFxkXFwnXSsoXFxcXC5bXFxcXGRcXCddKik/fFxcXFwuW1xcXFxkXFwnXSspKHV8VXxsfEx8dWx8VUx8ZnxGfGJ8QiknIH0sXG4gICAgICB7IGJlZ2luOiAnKC0/KShcXFxcYjBbeFhdW2EtZkEtRjAtOVxcJ10rfChcXFxcYltcXFxcZFxcJ10rKFxcXFwuW1xcXFxkXFwnXSopP3xcXFxcLltcXFxcZFxcJ10rKShbZUVdWy0rXT9bXFxcXGRcXCddKyk/KScgfVxuICAgIF0sXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07XG4gIGNvbnN0IFJBV19TVFJJTkcgPSB7XG4gICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICBiZWdpbjogL1wiXCJcIihcIiopKD8hXCIpKC58XFxuKSo/XCJcIlwiXFwxLyxcbiAgICByZWxldmFuY2U6IDFcbiAgfTtcbiAgY29uc3QgVkVSQkFUSU1fU1RSSU5HID0ge1xuICAgIGNsYXNzTmFtZTogJ3N0cmluZycsXG4gICAgYmVnaW46ICdAXCInLFxuICAgIGVuZDogJ1wiJyxcbiAgICBjb250YWluczogWyB7IGJlZ2luOiAnXCJcIicgfSBdXG4gIH07XG4gIGNvbnN0IFZFUkJBVElNX1NUUklOR19OT19MRiA9IGhsanMuaW5oZXJpdChWRVJCQVRJTV9TVFJJTkcsIHsgaWxsZWdhbDogL1xcbi8gfSk7XG4gIGNvbnN0IFNVQlNUID0ge1xuICAgIGNsYXNzTmFtZTogJ3N1YnN0JyxcbiAgICBiZWdpbjogL1xcey8sXG4gICAgZW5kOiAvXFx9LyxcbiAgICBrZXl3b3JkczogS0VZV09SRFNcbiAgfTtcbiAgY29uc3QgU1VCU1RfTk9fTEYgPSBobGpzLmluaGVyaXQoU1VCU1QsIHsgaWxsZWdhbDogL1xcbi8gfSk7XG4gIGNvbnN0IElOVEVSUE9MQVRFRF9TVFJJTkcgPSB7XG4gICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICBiZWdpbjogL1xcJFwiLyxcbiAgICBlbmQ6ICdcIicsXG4gICAgaWxsZWdhbDogL1xcbi8sXG4gICAgY29udGFpbnM6IFtcbiAgICAgIHsgYmVnaW46IC9cXHtcXHsvIH0sXG4gICAgICB7IGJlZ2luOiAvXFx9XFx9LyB9LFxuICAgICAgaGxqcy5CQUNLU0xBU0hfRVNDQVBFLFxuICAgICAgU1VCU1RfTk9fTEZcbiAgICBdXG4gIH07XG4gIGNvbnN0IElOVEVSUE9MQVRFRF9WRVJCQVRJTV9TVFJJTkcgPSB7XG4gICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICBiZWdpbjogL1xcJEBcIi8sXG4gICAgZW5kOiAnXCInLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICB7IGJlZ2luOiAvXFx7XFx7LyB9LFxuICAgICAgeyBiZWdpbjogL1xcfVxcfS8gfSxcbiAgICAgIHsgYmVnaW46ICdcIlwiJyB9LFxuICAgICAgU1VCU1RcbiAgICBdXG4gIH07XG4gIGNvbnN0IElOVEVSUE9MQVRFRF9WRVJCQVRJTV9TVFJJTkdfTk9fTEYgPSBobGpzLmluaGVyaXQoSU5URVJQT0xBVEVEX1ZFUkJBVElNX1NUUklORywge1xuICAgIGlsbGVnYWw6IC9cXG4vLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICB7IGJlZ2luOiAvXFx7XFx7LyB9LFxuICAgICAgeyBiZWdpbjogL1xcfVxcfS8gfSxcbiAgICAgIHsgYmVnaW46ICdcIlwiJyB9LFxuICAgICAgU1VCU1RfTk9fTEZcbiAgICBdXG4gIH0pO1xuICBTVUJTVC5jb250YWlucyA9IFtcbiAgICBJTlRFUlBPTEFURURfVkVSQkFUSU1fU1RSSU5HLFxuICAgIElOVEVSUE9MQVRFRF9TVFJJTkcsXG4gICAgVkVSQkFUSU1fU1RSSU5HLFxuICAgIGhsanMuQVBPU19TVFJJTkdfTU9ERSxcbiAgICBobGpzLlFVT1RFX1NUUklOR19NT0RFLFxuICAgIE5VTUJFUlMsXG4gICAgaGxqcy5DX0JMT0NLX0NPTU1FTlRfTU9ERVxuICBdO1xuICBTVUJTVF9OT19MRi5jb250YWlucyA9IFtcbiAgICBJTlRFUlBPTEFURURfVkVSQkFUSU1fU1RSSU5HX05PX0xGLFxuICAgIElOVEVSUE9MQVRFRF9TVFJJTkcsXG4gICAgVkVSQkFUSU1fU1RSSU5HX05PX0xGLFxuICAgIGhsanMuQVBPU19TVFJJTkdfTU9ERSxcbiAgICBobGpzLlFVT1RFX1NUUklOR19NT0RFLFxuICAgIE5VTUJFUlMsXG4gICAgaGxqcy5pbmhlcml0KGhsanMuQ19CTE9DS19DT01NRU5UX01PREUsIHsgaWxsZWdhbDogL1xcbi8gfSlcbiAgXTtcbiAgY29uc3QgU1RSSU5HID0geyB2YXJpYW50czogW1xuICAgIFJBV19TVFJJTkcsXG4gICAgSU5URVJQT0xBVEVEX1ZFUkJBVElNX1NUUklORyxcbiAgICBJTlRFUlBPTEFURURfU1RSSU5HLFxuICAgIFZFUkJBVElNX1NUUklORyxcbiAgICBobGpzLkFQT1NfU1RSSU5HX01PREUsXG4gICAgaGxqcy5RVU9URV9TVFJJTkdfTU9ERVxuICBdIH07XG5cbiAgY29uc3QgR0VORVJJQ19NT0RJRklFUiA9IHtcbiAgICBiZWdpbjogXCI8XCIsXG4gICAgZW5kOiBcIj5cIixcbiAgICBjb250YWluczogW1xuICAgICAgeyBiZWdpbktleXdvcmRzOiBcImluIG91dFwiIH0sXG4gICAgICBUSVRMRV9NT0RFXG4gICAgXVxuICB9O1xuICBjb25zdCBUWVBFX0lERU5UX1JFID0gaGxqcy5JREVOVF9SRSArICcoPCcgKyBobGpzLklERU5UX1JFICsgJyhcXFxccyosXFxcXHMqJyArIGhsanMuSURFTlRfUkUgKyAnKSo+KT8oXFxcXFtcXFxcXSk/JztcbiAgY29uc3QgQVRfSURFTlRJRklFUiA9IHtcbiAgICAvLyBwcmV2ZW50cyBleHByZXNzaW9ucyBsaWtlIGBAY2xhc3NgIGZyb20gaW5jb3JyZWN0IGZsYWdnaW5nXG4gICAgLy8gYGNsYXNzYCBhcyBhIGtleXdvcmRcbiAgICBiZWdpbjogXCJAXCIgKyBobGpzLklERU5UX1JFLFxuICAgIHJlbGV2YW5jZTogMFxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ0MjJyxcbiAgICBhbGlhc2VzOiBbXG4gICAgICAnY3MnLFxuICAgICAgJ2MjJ1xuICAgIF0sXG4gICAga2V5d29yZHM6IEtFWVdPUkRTLFxuICAgIGlsbGVnYWw6IC86Oi8sXG4gICAgY29udGFpbnM6IFtcbiAgICAgIGhsanMuQ09NTUVOVChcbiAgICAgICAgJy8vLycsXG4gICAgICAgICckJyxcbiAgICAgICAge1xuICAgICAgICAgIHJldHVybkJlZ2luOiB0cnVlLFxuICAgICAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2RvY3RhZycsXG4gICAgICAgICAgICAgIHZhcmlhbnRzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgYmVnaW46ICcvLy8nLFxuICAgICAgICAgICAgICAgICAgcmVsZXZhbmNlOiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7IGJlZ2luOiAnPCEtLXwtLT4nIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgYmVnaW46ICc8Lz8nLFxuICAgICAgICAgICAgICAgICAgZW5kOiAnPidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgICksXG4gICAgICBobGpzLkNfTElORV9DT01NRU5UX01PREUsXG4gICAgICBobGpzLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdtZXRhJyxcbiAgICAgICAgYmVnaW46ICcjJyxcbiAgICAgICAgZW5kOiAnJCcsXG4gICAgICAgIGtleXdvcmRzOiB7IGtleXdvcmQ6ICdpZiBlbHNlIGVsaWYgZW5kaWYgZGVmaW5lIHVuZGVmIHdhcm5pbmcgZXJyb3IgbGluZSByZWdpb24gZW5kcmVnaW9uIHByYWdtYSBjaGVja3N1bScgfVxuICAgICAgfSxcbiAgICAgIFNUUklORyxcbiAgICAgIE5VTUJFUlMsXG4gICAgICB7XG4gICAgICAgIGJlZ2luS2V5d29yZHM6ICdjbGFzcyBpbnRlcmZhY2UnLFxuICAgICAgICByZWxldmFuY2U6IDAsXG4gICAgICAgIGVuZDogL1t7Oz1dLyxcbiAgICAgICAgaWxsZWdhbDogL1teXFxzOixdLyxcbiAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICB7IGJlZ2luS2V5d29yZHM6IFwid2hlcmUgY2xhc3NcIiB9LFxuICAgICAgICAgIFRJVExFX01PREUsXG4gICAgICAgICAgR0VORVJJQ19NT0RJRklFUixcbiAgICAgICAgICBobGpzLkNfTElORV9DT01NRU5UX01PREUsXG4gICAgICAgICAgaGxqcy5DX0JMT0NLX0NPTU1FTlRfTU9ERVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBiZWdpbktleXdvcmRzOiAnbmFtZXNwYWNlJyxcbiAgICAgICAgcmVsZXZhbmNlOiAwLFxuICAgICAgICBlbmQ6IC9bezs9XS8sXG4gICAgICAgIGlsbGVnYWw6IC9bXlxcczpdLyxcbiAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICBUSVRMRV9NT0RFLFxuICAgICAgICAgIGhsanMuQ19MSU5FX0NPTU1FTlRfTU9ERSxcbiAgICAgICAgICBobGpzLkNfQkxPQ0tfQ09NTUVOVF9NT0RFXG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGJlZ2luS2V5d29yZHM6ICdyZWNvcmQnLFxuICAgICAgICByZWxldmFuY2U6IDAsXG4gICAgICAgIGVuZDogL1t7Oz1dLyxcbiAgICAgICAgaWxsZWdhbDogL1teXFxzOl0vLFxuICAgICAgICBjb250YWluczogW1xuICAgICAgICAgIFRJVExFX01PREUsXG4gICAgICAgICAgR0VORVJJQ19NT0RJRklFUixcbiAgICAgICAgICBobGpzLkNfTElORV9DT01NRU5UX01PREUsXG4gICAgICAgICAgaGxqcy5DX0JMT0NLX0NPTU1FTlRfTU9ERVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAvLyBbQXR0cmlidXRlcyhcIlwiKV1cbiAgICAgICAgY2xhc3NOYW1lOiAnbWV0YScsXG4gICAgICAgIGJlZ2luOiAnXlxcXFxzKlxcXFxbKD89W1xcXFx3XSknLFxuICAgICAgICBleGNsdWRlQmVnaW46IHRydWUsXG4gICAgICAgIGVuZDogJ1xcXFxdJyxcbiAgICAgICAgZXhjbHVkZUVuZDogdHJ1ZSxcbiAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgYmVnaW46IC9cIi8sXG4gICAgICAgICAgICBlbmQ6IC9cIi9cbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIC8vIEV4cHJlc3Npb24ga2V5d29yZHMgcHJldmVudCAna2V5d29yZCBOYW1lKC4uLiknIGZyb20gYmVpbmdcbiAgICAgICAgLy8gcmVjb2duaXplZCBhcyBhIGZ1bmN0aW9uIGRlZmluaXRpb25cbiAgICAgICAgYmVnaW5LZXl3b3JkczogJ25ldyByZXR1cm4gdGhyb3cgYXdhaXQgZWxzZScsXG4gICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnZnVuY3Rpb24nLFxuICAgICAgICBiZWdpbjogJygnICsgVFlQRV9JREVOVF9SRSArICdcXFxccyspKycgKyBobGpzLklERU5UX1JFICsgJ1xcXFxzKig8W149XSs+XFxcXHMqKT9cXFxcKCcsXG4gICAgICAgIHJldHVybkJlZ2luOiB0cnVlLFxuICAgICAgICBlbmQ6IC9cXHMqW3s7PV0vLFxuICAgICAgICBleGNsdWRlRW5kOiB0cnVlLFxuICAgICAgICBrZXl3b3JkczogS0VZV09SRFMsXG4gICAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgICAgLy8gcHJldmVudHMgdGhlc2UgZnJvbSBiZWluZyBoaWdobGlnaHRlZCBgdGl0bGVgXG4gICAgICAgICAge1xuICAgICAgICAgICAgYmVnaW5LZXl3b3JkczogRlVOQ1RJT05fTU9ESUZJRVJTLmpvaW4oXCIgXCIpLFxuICAgICAgICAgICAgcmVsZXZhbmNlOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBiZWdpbjogaGxqcy5JREVOVF9SRSArICdcXFxccyooPFtePV0rPlxcXFxzKik/XFxcXCgnLFxuICAgICAgICAgICAgcmV0dXJuQmVnaW46IHRydWUsXG4gICAgICAgICAgICBjb250YWluczogW1xuICAgICAgICAgICAgICBobGpzLlRJVExFX01PREUsXG4gICAgICAgICAgICAgIEdFTkVSSUNfTU9ESUZJRVJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICByZWxldmFuY2U6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIHsgbWF0Y2g6IC9cXChcXCkvIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAncGFyYW1zJyxcbiAgICAgICAgICAgIGJlZ2luOiAvXFwoLyxcbiAgICAgICAgICAgIGVuZDogL1xcKS8sXG4gICAgICAgICAgICBleGNsdWRlQmVnaW46IHRydWUsXG4gICAgICAgICAgICBleGNsdWRlRW5kOiB0cnVlLFxuICAgICAgICAgICAga2V5d29yZHM6IEtFWVdPUkRTLFxuICAgICAgICAgICAgcmVsZXZhbmNlOiAwLFxuICAgICAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICAgICAgU1RSSU5HLFxuICAgICAgICAgICAgICBOVU1CRVJTLFxuICAgICAgICAgICAgICBobGpzLkNfQkxPQ0tfQ09NTUVOVF9NT0RFXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBobGpzLkNfTElORV9DT01NRU5UX01PREUsXG4gICAgICAgICAgaGxqcy5DX0JMT0NLX0NPTU1FTlRfTU9ERVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgQVRfSURFTlRJRklFUlxuICAgIF1cbiAgfTtcbn1cblxuZXhwb3J0IHsgY3NoYXJwIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJjc2hhcnAiLCJobGpzIiwiQlVJTFRfSU5fS0VZV09SRFMiLCJGVU5DVElPTl9NT0RJRklFUlMiLCJMSVRFUkFMX0tFWVdPUkRTIiwiTk9STUFMX0tFWVdPUkRTIiwiQ09OVEVYVFVBTF9LRVlXT1JEUyIsIktFWVdPUkRTIiwia2V5d29yZCIsImNvbmNhdCIsImJ1aWx0X2luIiwibGl0ZXJhbCIsIlRJVExFX01PREUiLCJpbmhlcml0IiwiYmVnaW4iLCJOVU1CRVJTIiwiY2xhc3NOYW1lIiwidmFyaWFudHMiLCJyZWxldmFuY2UiLCJSQVdfU1RSSU5HIiwiVkVSQkFUSU1fU1RSSU5HIiwiZW5kIiwiY29udGFpbnMiLCJWRVJCQVRJTV9TVFJJTkdfTk9fTEYiLCJpbGxlZ2FsIiwiU1VCU1QiLCJrZXl3b3JkcyIsIlNVQlNUX05PX0xGIiwiSU5URVJQT0xBVEVEX1NUUklORyIsIkJBQ0tTTEFTSF9FU0NBUEUiLCJJTlRFUlBPTEFURURfVkVSQkFUSU1fU1RSSU5HIiwiSU5URVJQT0xBVEVEX1ZFUkJBVElNX1NUUklOR19OT19MRiIsIkFQT1NfU1RSSU5HX01PREUiLCJRVU9URV9TVFJJTkdfTU9ERSIsIkNfQkxPQ0tfQ09NTUVOVF9NT0RFIiwiU1RSSU5HIiwiR0VORVJJQ19NT0RJRklFUiIsImJlZ2luS2V5d29yZHMiLCJUWVBFX0lERU5UX1JFIiwiSURFTlRfUkUiLCJBVF9JREVOVElGSUVSIiwibmFtZSIsImFsaWFzZXMiLCJDT01NRU5UIiwicmV0dXJuQmVnaW4iLCJDX0xJTkVfQ09NTUVOVF9NT0RFIiwiZXhjbHVkZUJlZ2luIiwiZXhjbHVkZUVuZCIsImpvaW4iLCJtYXRjaCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/csharp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/css.js":
/*!*******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/css.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ css)\n/* harmony export */ });\nconst MODES = (hljs)=>{\n    return {\n        IMPORTANT: {\n            scope: \"meta\",\n            begin: \"!important\"\n        },\n        BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,\n        HEXCOLOR: {\n            scope: \"number\",\n            begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\\b/\n        },\n        FUNCTION_DISPATCH: {\n            className: \"built_in\",\n            begin: /[\\w-]+(?=\\()/\n        },\n        ATTRIBUTE_SELECTOR_MODE: {\n            scope: \"selector-attr\",\n            begin: /\\[/,\n            end: /\\]/,\n            illegal: \"$\",\n            contains: [\n                hljs.APOS_STRING_MODE,\n                hljs.QUOTE_STRING_MODE\n            ]\n        },\n        CSS_NUMBER_MODE: {\n            scope: \"number\",\n            begin: hljs.NUMBER_RE + \"(\" + \"%|em|ex|ch|rem\" + \"|vw|vh|vmin|vmax\" + \"|cm|mm|in|pt|pc|px\" + \"|deg|grad|rad|turn\" + \"|s|ms\" + \"|Hz|kHz\" + \"|dpi|dpcm|dppx\" + \")?\",\n            relevance: 0\n        },\n        CSS_VARIABLE: {\n            className: \"attr\",\n            begin: /--[A-Za-z_][A-Za-z0-9_-]*/\n        }\n    };\n};\nconst HTML_TAGS = [\n    \"a\",\n    \"abbr\",\n    \"address\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"b\",\n    \"blockquote\",\n    \"body\",\n    \"button\",\n    \"canvas\",\n    \"caption\",\n    \"cite\",\n    \"code\",\n    \"dd\",\n    \"del\",\n    \"details\",\n    \"dfn\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"em\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"header\",\n    \"hgroup\",\n    \"html\",\n    \"i\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"main\",\n    \"mark\",\n    \"menu\",\n    \"nav\",\n    \"object\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"p\",\n    \"picture\",\n    \"q\",\n    \"quote\",\n    \"samp\",\n    \"section\",\n    \"select\",\n    \"source\",\n    \"span\",\n    \"strong\",\n    \"summary\",\n    \"sup\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"time\",\n    \"tr\",\n    \"ul\",\n    \"var\",\n    \"video\"\n];\nconst SVG_TAGS = [\n    \"defs\",\n    \"g\",\n    \"marker\",\n    \"mask\",\n    \"pattern\",\n    \"svg\",\n    \"switch\",\n    \"symbol\",\n    \"feBlend\",\n    \"feColorMatrix\",\n    \"feComponentTransfer\",\n    \"feComposite\",\n    \"feConvolveMatrix\",\n    \"feDiffuseLighting\",\n    \"feDisplacementMap\",\n    \"feFlood\",\n    \"feGaussianBlur\",\n    \"feImage\",\n    \"feMerge\",\n    \"feMorphology\",\n    \"feOffset\",\n    \"feSpecularLighting\",\n    \"feTile\",\n    \"feTurbulence\",\n    \"linearGradient\",\n    \"radialGradient\",\n    \"stop\",\n    \"circle\",\n    \"ellipse\",\n    \"image\",\n    \"line\",\n    \"path\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"text\",\n    \"use\",\n    \"textPath\",\n    \"tspan\",\n    \"foreignObject\",\n    \"clipPath\"\n];\nconst TAGS = [\n    ...HTML_TAGS,\n    ...SVG_TAGS\n];\n// Sorting, then reversing makes sure longer attributes/elements like\n// `font-weight` are matched fully instead of getting false positives on say `font`\nconst MEDIA_FEATURES = [\n    \"any-hover\",\n    \"any-pointer\",\n    \"aspect-ratio\",\n    \"color\",\n    \"color-gamut\",\n    \"color-index\",\n    \"device-aspect-ratio\",\n    \"device-height\",\n    \"device-width\",\n    \"display-mode\",\n    \"forced-colors\",\n    \"grid\",\n    \"height\",\n    \"hover\",\n    \"inverted-colors\",\n    \"monochrome\",\n    \"orientation\",\n    \"overflow-block\",\n    \"overflow-inline\",\n    \"pointer\",\n    \"prefers-color-scheme\",\n    \"prefers-contrast\",\n    \"prefers-reduced-motion\",\n    \"prefers-reduced-transparency\",\n    \"resolution\",\n    \"scan\",\n    \"scripting\",\n    \"update\",\n    \"width\",\n    // TODO: find a better solution?\n    \"min-width\",\n    \"max-width\",\n    \"min-height\",\n    \"max-height\"\n].sort().reverse();\n// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\nconst PSEUDO_CLASSES = [\n    \"active\",\n    \"any-link\",\n    \"blank\",\n    \"checked\",\n    \"current\",\n    \"default\",\n    \"defined\",\n    \"dir\",\n    \"disabled\",\n    \"drop\",\n    \"empty\",\n    \"enabled\",\n    \"first\",\n    \"first-child\",\n    \"first-of-type\",\n    \"fullscreen\",\n    \"future\",\n    \"focus\",\n    \"focus-visible\",\n    \"focus-within\",\n    \"has\",\n    \"host\",\n    \"host-context\",\n    \"hover\",\n    \"indeterminate\",\n    \"in-range\",\n    \"invalid\",\n    \"is\",\n    \"lang\",\n    \"last-child\",\n    \"last-of-type\",\n    \"left\",\n    \"link\",\n    \"local-link\",\n    \"not\",\n    \"nth-child\",\n    \"nth-col\",\n    \"nth-last-child\",\n    \"nth-last-col\",\n    \"nth-last-of-type\",\n    \"nth-of-type\",\n    \"only-child\",\n    \"only-of-type\",\n    \"optional\",\n    \"out-of-range\",\n    \"past\",\n    \"placeholder-shown\",\n    \"read-only\",\n    \"read-write\",\n    \"required\",\n    \"right\",\n    \"root\",\n    \"scope\",\n    \"target\",\n    \"target-within\",\n    \"user-invalid\",\n    \"valid\",\n    \"visited\",\n    \"where\" // where()\n].sort().reverse();\n// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements\nconst PSEUDO_ELEMENTS = [\n    \"after\",\n    \"backdrop\",\n    \"before\",\n    \"cue\",\n    \"cue-region\",\n    \"first-letter\",\n    \"first-line\",\n    \"grammar-error\",\n    \"marker\",\n    \"part\",\n    \"placeholder\",\n    \"selection\",\n    \"slotted\",\n    \"spelling-error\"\n].sort().reverse();\nconst ATTRIBUTES = [\n    \"accent-color\",\n    \"align-content\",\n    \"align-items\",\n    \"align-self\",\n    \"alignment-baseline\",\n    \"all\",\n    \"anchor-name\",\n    \"animation\",\n    \"animation-composition\",\n    \"animation-delay\",\n    \"animation-direction\",\n    \"animation-duration\",\n    \"animation-fill-mode\",\n    \"animation-iteration-count\",\n    \"animation-name\",\n    \"animation-play-state\",\n    \"animation-range\",\n    \"animation-range-end\",\n    \"animation-range-start\",\n    \"animation-timeline\",\n    \"animation-timing-function\",\n    \"appearance\",\n    \"aspect-ratio\",\n    \"backdrop-filter\",\n    \"backface-visibility\",\n    \"background\",\n    \"background-attachment\",\n    \"background-blend-mode\",\n    \"background-clip\",\n    \"background-color\",\n    \"background-image\",\n    \"background-origin\",\n    \"background-position\",\n    \"background-position-x\",\n    \"background-position-y\",\n    \"background-repeat\",\n    \"background-size\",\n    \"baseline-shift\",\n    \"block-size\",\n    \"border\",\n    \"border-block\",\n    \"border-block-color\",\n    \"border-block-end\",\n    \"border-block-end-color\",\n    \"border-block-end-style\",\n    \"border-block-end-width\",\n    \"border-block-start\",\n    \"border-block-start-color\",\n    \"border-block-start-style\",\n    \"border-block-start-width\",\n    \"border-block-style\",\n    \"border-block-width\",\n    \"border-bottom\",\n    \"border-bottom-color\",\n    \"border-bottom-left-radius\",\n    \"border-bottom-right-radius\",\n    \"border-bottom-style\",\n    \"border-bottom-width\",\n    \"border-collapse\",\n    \"border-color\",\n    \"border-end-end-radius\",\n    \"border-end-start-radius\",\n    \"border-image\",\n    \"border-image-outset\",\n    \"border-image-repeat\",\n    \"border-image-slice\",\n    \"border-image-source\",\n    \"border-image-width\",\n    \"border-inline\",\n    \"border-inline-color\",\n    \"border-inline-end\",\n    \"border-inline-end-color\",\n    \"border-inline-end-style\",\n    \"border-inline-end-width\",\n    \"border-inline-start\",\n    \"border-inline-start-color\",\n    \"border-inline-start-style\",\n    \"border-inline-start-width\",\n    \"border-inline-style\",\n    \"border-inline-width\",\n    \"border-left\",\n    \"border-left-color\",\n    \"border-left-style\",\n    \"border-left-width\",\n    \"border-radius\",\n    \"border-right\",\n    \"border-right-color\",\n    \"border-right-style\",\n    \"border-right-width\",\n    \"border-spacing\",\n    \"border-start-end-radius\",\n    \"border-start-start-radius\",\n    \"border-style\",\n    \"border-top\",\n    \"border-top-color\",\n    \"border-top-left-radius\",\n    \"border-top-right-radius\",\n    \"border-top-style\",\n    \"border-top-width\",\n    \"border-width\",\n    \"bottom\",\n    \"box-align\",\n    \"box-decoration-break\",\n    \"box-direction\",\n    \"box-flex\",\n    \"box-flex-group\",\n    \"box-lines\",\n    \"box-ordinal-group\",\n    \"box-orient\",\n    \"box-pack\",\n    \"box-shadow\",\n    \"box-sizing\",\n    \"break-after\",\n    \"break-before\",\n    \"break-inside\",\n    \"caption-side\",\n    \"caret-color\",\n    \"clear\",\n    \"clip\",\n    \"clip-path\",\n    \"clip-rule\",\n    \"color\",\n    \"color-interpolation\",\n    \"color-interpolation-filters\",\n    \"color-profile\",\n    \"color-rendering\",\n    \"color-scheme\",\n    \"column-count\",\n    \"column-fill\",\n    \"column-gap\",\n    \"column-rule\",\n    \"column-rule-color\",\n    \"column-rule-style\",\n    \"column-rule-width\",\n    \"column-span\",\n    \"column-width\",\n    \"columns\",\n    \"contain\",\n    \"contain-intrinsic-block-size\",\n    \"contain-intrinsic-height\",\n    \"contain-intrinsic-inline-size\",\n    \"contain-intrinsic-size\",\n    \"contain-intrinsic-width\",\n    \"container\",\n    \"container-name\",\n    \"container-type\",\n    \"content\",\n    \"content-visibility\",\n    \"counter-increment\",\n    \"counter-reset\",\n    \"counter-set\",\n    \"cue\",\n    \"cue-after\",\n    \"cue-before\",\n    \"cursor\",\n    \"cx\",\n    \"cy\",\n    \"direction\",\n    \"display\",\n    \"dominant-baseline\",\n    \"empty-cells\",\n    \"enable-background\",\n    \"field-sizing\",\n    \"fill\",\n    \"fill-opacity\",\n    \"fill-rule\",\n    \"filter\",\n    \"flex\",\n    \"flex-basis\",\n    \"flex-direction\",\n    \"flex-flow\",\n    \"flex-grow\",\n    \"flex-shrink\",\n    \"flex-wrap\",\n    \"float\",\n    \"flood-color\",\n    \"flood-opacity\",\n    \"flow\",\n    \"font\",\n    \"font-display\",\n    \"font-family\",\n    \"font-feature-settings\",\n    \"font-kerning\",\n    \"font-language-override\",\n    \"font-optical-sizing\",\n    \"font-palette\",\n    \"font-size\",\n    \"font-size-adjust\",\n    \"font-smooth\",\n    \"font-smoothing\",\n    \"font-stretch\",\n    \"font-style\",\n    \"font-synthesis\",\n    \"font-synthesis-position\",\n    \"font-synthesis-small-caps\",\n    \"font-synthesis-style\",\n    \"font-synthesis-weight\",\n    \"font-variant\",\n    \"font-variant-alternates\",\n    \"font-variant-caps\",\n    \"font-variant-east-asian\",\n    \"font-variant-emoji\",\n    \"font-variant-ligatures\",\n    \"font-variant-numeric\",\n    \"font-variant-position\",\n    \"font-variation-settings\",\n    \"font-weight\",\n    \"forced-color-adjust\",\n    \"gap\",\n    \"glyph-orientation-horizontal\",\n    \"glyph-orientation-vertical\",\n    \"grid\",\n    \"grid-area\",\n    \"grid-auto-columns\",\n    \"grid-auto-flow\",\n    \"grid-auto-rows\",\n    \"grid-column\",\n    \"grid-column-end\",\n    \"grid-column-start\",\n    \"grid-gap\",\n    \"grid-row\",\n    \"grid-row-end\",\n    \"grid-row-start\",\n    \"grid-template\",\n    \"grid-template-areas\",\n    \"grid-template-columns\",\n    \"grid-template-rows\",\n    \"hanging-punctuation\",\n    \"height\",\n    \"hyphenate-character\",\n    \"hyphenate-limit-chars\",\n    \"hyphens\",\n    \"icon\",\n    \"image-orientation\",\n    \"image-rendering\",\n    \"image-resolution\",\n    \"ime-mode\",\n    \"initial-letter\",\n    \"initial-letter-align\",\n    \"inline-size\",\n    \"inset\",\n    \"inset-area\",\n    \"inset-block\",\n    \"inset-block-end\",\n    \"inset-block-start\",\n    \"inset-inline\",\n    \"inset-inline-end\",\n    \"inset-inline-start\",\n    \"isolation\",\n    \"justify-content\",\n    \"justify-items\",\n    \"justify-self\",\n    \"kerning\",\n    \"left\",\n    \"letter-spacing\",\n    \"lighting-color\",\n    \"line-break\",\n    \"line-height\",\n    \"line-height-step\",\n    \"list-style\",\n    \"list-style-image\",\n    \"list-style-position\",\n    \"list-style-type\",\n    \"margin\",\n    \"margin-block\",\n    \"margin-block-end\",\n    \"margin-block-start\",\n    \"margin-bottom\",\n    \"margin-inline\",\n    \"margin-inline-end\",\n    \"margin-inline-start\",\n    \"margin-left\",\n    \"margin-right\",\n    \"margin-top\",\n    \"margin-trim\",\n    \"marker\",\n    \"marker-end\",\n    \"marker-mid\",\n    \"marker-start\",\n    \"marks\",\n    \"mask\",\n    \"mask-border\",\n    \"mask-border-mode\",\n    \"mask-border-outset\",\n    \"mask-border-repeat\",\n    \"mask-border-slice\",\n    \"mask-border-source\",\n    \"mask-border-width\",\n    \"mask-clip\",\n    \"mask-composite\",\n    \"mask-image\",\n    \"mask-mode\",\n    \"mask-origin\",\n    \"mask-position\",\n    \"mask-repeat\",\n    \"mask-size\",\n    \"mask-type\",\n    \"masonry-auto-flow\",\n    \"math-depth\",\n    \"math-shift\",\n    \"math-style\",\n    \"max-block-size\",\n    \"max-height\",\n    \"max-inline-size\",\n    \"max-width\",\n    \"min-block-size\",\n    \"min-height\",\n    \"min-inline-size\",\n    \"min-width\",\n    \"mix-blend-mode\",\n    \"nav-down\",\n    \"nav-index\",\n    \"nav-left\",\n    \"nav-right\",\n    \"nav-up\",\n    \"none\",\n    \"normal\",\n    \"object-fit\",\n    \"object-position\",\n    \"offset\",\n    \"offset-anchor\",\n    \"offset-distance\",\n    \"offset-path\",\n    \"offset-position\",\n    \"offset-rotate\",\n    \"opacity\",\n    \"order\",\n    \"orphans\",\n    \"outline\",\n    \"outline-color\",\n    \"outline-offset\",\n    \"outline-style\",\n    \"outline-width\",\n    \"overflow\",\n    \"overflow-anchor\",\n    \"overflow-block\",\n    \"overflow-clip-margin\",\n    \"overflow-inline\",\n    \"overflow-wrap\",\n    \"overflow-x\",\n    \"overflow-y\",\n    \"overlay\",\n    \"overscroll-behavior\",\n    \"overscroll-behavior-block\",\n    \"overscroll-behavior-inline\",\n    \"overscroll-behavior-x\",\n    \"overscroll-behavior-y\",\n    \"padding\",\n    \"padding-block\",\n    \"padding-block-end\",\n    \"padding-block-start\",\n    \"padding-bottom\",\n    \"padding-inline\",\n    \"padding-inline-end\",\n    \"padding-inline-start\",\n    \"padding-left\",\n    \"padding-right\",\n    \"padding-top\",\n    \"page\",\n    \"page-break-after\",\n    \"page-break-before\",\n    \"page-break-inside\",\n    \"paint-order\",\n    \"pause\",\n    \"pause-after\",\n    \"pause-before\",\n    \"perspective\",\n    \"perspective-origin\",\n    \"place-content\",\n    \"place-items\",\n    \"place-self\",\n    \"pointer-events\",\n    \"position\",\n    \"position-anchor\",\n    \"position-visibility\",\n    \"print-color-adjust\",\n    \"quotes\",\n    \"r\",\n    \"resize\",\n    \"rest\",\n    \"rest-after\",\n    \"rest-before\",\n    \"right\",\n    \"rotate\",\n    \"row-gap\",\n    \"ruby-align\",\n    \"ruby-position\",\n    \"scale\",\n    \"scroll-behavior\",\n    \"scroll-margin\",\n    \"scroll-margin-block\",\n    \"scroll-margin-block-end\",\n    \"scroll-margin-block-start\",\n    \"scroll-margin-bottom\",\n    \"scroll-margin-inline\",\n    \"scroll-margin-inline-end\",\n    \"scroll-margin-inline-start\",\n    \"scroll-margin-left\",\n    \"scroll-margin-right\",\n    \"scroll-margin-top\",\n    \"scroll-padding\",\n    \"scroll-padding-block\",\n    \"scroll-padding-block-end\",\n    \"scroll-padding-block-start\",\n    \"scroll-padding-bottom\",\n    \"scroll-padding-inline\",\n    \"scroll-padding-inline-end\",\n    \"scroll-padding-inline-start\",\n    \"scroll-padding-left\",\n    \"scroll-padding-right\",\n    \"scroll-padding-top\",\n    \"scroll-snap-align\",\n    \"scroll-snap-stop\",\n    \"scroll-snap-type\",\n    \"scroll-timeline\",\n    \"scroll-timeline-axis\",\n    \"scroll-timeline-name\",\n    \"scrollbar-color\",\n    \"scrollbar-gutter\",\n    \"scrollbar-width\",\n    \"shape-image-threshold\",\n    \"shape-margin\",\n    \"shape-outside\",\n    \"shape-rendering\",\n    \"speak\",\n    \"speak-as\",\n    \"src\",\n    \"stop-color\",\n    \"stop-opacity\",\n    \"stroke\",\n    \"stroke-dasharray\",\n    \"stroke-dashoffset\",\n    \"stroke-linecap\",\n    \"stroke-linejoin\",\n    \"stroke-miterlimit\",\n    \"stroke-opacity\",\n    \"stroke-width\",\n    \"tab-size\",\n    \"table-layout\",\n    \"text-align\",\n    \"text-align-all\",\n    \"text-align-last\",\n    \"text-anchor\",\n    \"text-combine-upright\",\n    \"text-decoration\",\n    \"text-decoration-color\",\n    \"text-decoration-line\",\n    \"text-decoration-skip\",\n    \"text-decoration-skip-ink\",\n    \"text-decoration-style\",\n    \"text-decoration-thickness\",\n    \"text-emphasis\",\n    \"text-emphasis-color\",\n    \"text-emphasis-position\",\n    \"text-emphasis-style\",\n    \"text-indent\",\n    \"text-justify\",\n    \"text-orientation\",\n    \"text-overflow\",\n    \"text-rendering\",\n    \"text-shadow\",\n    \"text-size-adjust\",\n    \"text-transform\",\n    \"text-underline-offset\",\n    \"text-underline-position\",\n    \"text-wrap\",\n    \"text-wrap-mode\",\n    \"text-wrap-style\",\n    \"timeline-scope\",\n    \"top\",\n    \"touch-action\",\n    \"transform\",\n    \"transform-box\",\n    \"transform-origin\",\n    \"transform-style\",\n    \"transition\",\n    \"transition-behavior\",\n    \"transition-delay\",\n    \"transition-duration\",\n    \"transition-property\",\n    \"transition-timing-function\",\n    \"translate\",\n    \"unicode-bidi\",\n    \"user-modify\",\n    \"user-select\",\n    \"vector-effect\",\n    \"vertical-align\",\n    \"view-timeline\",\n    \"view-timeline-axis\",\n    \"view-timeline-inset\",\n    \"view-timeline-name\",\n    \"view-transition-name\",\n    \"visibility\",\n    \"voice-balance\",\n    \"voice-duration\",\n    \"voice-family\",\n    \"voice-pitch\",\n    \"voice-range\",\n    \"voice-rate\",\n    \"voice-stress\",\n    \"voice-volume\",\n    \"white-space\",\n    \"white-space-collapse\",\n    \"widows\",\n    \"width\",\n    \"will-change\",\n    \"word-break\",\n    \"word-spacing\",\n    \"word-wrap\",\n    \"writing-mode\",\n    \"x\",\n    \"y\",\n    \"z-index\",\n    \"zoom\"\n].sort().reverse();\n/*\nLanguage: CSS\nCategory: common, css, web\nWebsite: https://developer.mozilla.org/en-US/docs/Web/CSS\n*/ /** @type LanguageFn */ function css(hljs) {\n    const regex = hljs.regex;\n    const modes = MODES(hljs);\n    const VENDOR_PREFIX = {\n        begin: /-(webkit|moz|ms|o)-(?=[a-z])/\n    };\n    const AT_MODIFIERS = \"and or not only\";\n    const AT_PROPERTY_RE = /@-?\\w[\\w]*(-\\w+)*/; // @-webkit-keyframes\n    const IDENT_RE = \"[a-zA-Z-][a-zA-Z0-9_-]*\";\n    const STRINGS = [\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE\n    ];\n    return {\n        name: \"CSS\",\n        case_insensitive: true,\n        illegal: /[=|'\\$]/,\n        keywords: {\n            keyframePosition: \"from to\"\n        },\n        classNameAliases: {\n            // for visual continuity with `tag {}` and because we\n            // don't have a great class for this?\n            keyframePosition: \"selector-tag\"\n        },\n        contains: [\n            modes.BLOCK_COMMENT,\n            VENDOR_PREFIX,\n            // to recognize keyframe 40% etc which are outside the scope of our\n            // attribute value mode\n            modes.CSS_NUMBER_MODE,\n            {\n                className: \"selector-id\",\n                begin: /#[A-Za-z0-9_-]+/,\n                relevance: 0\n            },\n            {\n                className: \"selector-class\",\n                begin: \"\\\\.\" + IDENT_RE,\n                relevance: 0\n            },\n            modes.ATTRIBUTE_SELECTOR_MODE,\n            {\n                className: \"selector-pseudo\",\n                variants: [\n                    {\n                        begin: \":(\" + PSEUDO_CLASSES.join(\"|\") + \")\"\n                    },\n                    {\n                        begin: \":(:)?(\" + PSEUDO_ELEMENTS.join(\"|\") + \")\"\n                    }\n                ]\n            },\n            // we may actually need this (12/2020)\n            // { // pseudo-selector params\n            //   begin: /\\(/,\n            //   end: /\\)/,\n            //   contains: [ hljs.CSS_NUMBER_MODE ]\n            // },\n            modes.CSS_VARIABLE,\n            {\n                className: \"attribute\",\n                begin: \"\\\\b(\" + ATTRIBUTES.join(\"|\") + \")\\\\b\"\n            },\n            // attribute values\n            {\n                begin: /:/,\n                end: /[;}{]/,\n                contains: [\n                    modes.BLOCK_COMMENT,\n                    modes.HEXCOLOR,\n                    modes.IMPORTANT,\n                    modes.CSS_NUMBER_MODE,\n                    ...STRINGS,\n                    // needed to highlight these as strings and to avoid issues with\n                    // illegal characters that might be inside urls that would tigger the\n                    // languages illegal stack\n                    {\n                        begin: /(url|data-uri)\\(/,\n                        end: /\\)/,\n                        relevance: 0,\n                        keywords: {\n                            built_in: \"url data-uri\"\n                        },\n                        contains: [\n                            ...STRINGS,\n                            {\n                                className: \"string\",\n                                // any character other than `)` as in `url()` will be the start\n                                // of a string, which ends with `)` (from the parent mode)\n                                begin: /[^)]/,\n                                endsWithParent: true,\n                                excludeEnd: true\n                            }\n                        ]\n                    },\n                    modes.FUNCTION_DISPATCH\n                ]\n            },\n            {\n                begin: regex.lookahead(/@/),\n                end: \"[{;]\",\n                relevance: 0,\n                illegal: /:/,\n                contains: [\n                    {\n                        className: \"keyword\",\n                        begin: AT_PROPERTY_RE\n                    },\n                    {\n                        begin: /\\s/,\n                        endsWithParent: true,\n                        excludeEnd: true,\n                        relevance: 0,\n                        keywords: {\n                            $pattern: /[a-z-]+/,\n                            keyword: AT_MODIFIERS,\n                            attribute: MEDIA_FEATURES.join(\" \")\n                        },\n                        contains: [\n                            {\n                                begin: /[a-z-]+(?=:)/,\n                                className: \"attribute\"\n                            },\n                            ...STRINGS,\n                            modes.CSS_NUMBER_MODE\n                        ]\n                    }\n                ]\n            },\n            {\n                className: \"selector-tag\",\n                begin: \"\\\\b(\" + TAGS.join(\"|\") + \")\\\\b\"\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/css.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/diff.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/diff.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ diff)\n/* harmony export */ });\n/*\nLanguage: Diff\nDescription: Unified and context diff\nAuthor: Vasily Polovnyov <vast@whiteants.net>\nWebsite: https://www.gnu.org/software/diffutils/\nCategory: common\n*/ /** @type LanguageFn */ function diff(hljs) {\n    const regex = hljs.regex;\n    return {\n        name: \"Diff\",\n        aliases: [\n            \"patch\"\n        ],\n        contains: [\n            {\n                className: \"meta\",\n                relevance: 10,\n                match: regex.either(/^@@ +-\\d+,\\d+ +\\+\\d+,\\d+ +@@/, /^\\*\\*\\* +\\d+,\\d+ +\\*\\*\\*\\*$/, /^--- +\\d+,\\d+ +----$/)\n            },\n            {\n                className: \"comment\",\n                variants: [\n                    {\n                        begin: regex.either(/Index: /, /^index/, /={3,}/, /^-{3}/, /^\\*{3} /, /^\\+{3}/, /^diff --git/),\n                        end: /$/\n                    },\n                    {\n                        match: /^\\*{15}$/\n                    }\n                ]\n            },\n            {\n                className: \"addition\",\n                begin: /^\\+/,\n                end: /$/\n            },\n            {\n                className: \"deletion\",\n                begin: /^-/,\n                end: /$/\n            },\n            {\n                className: \"addition\",\n                begin: /^!/,\n                end: /$/\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9kaWZmLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7O0FBTUEsR0FFQSxxQkFBcUIsR0FDckIsU0FBU0EsS0FBS0MsSUFBSTtJQUNoQixNQUFNQyxRQUFRRCxLQUFLQyxLQUFLO0lBQ3hCLE9BQU87UUFDTEMsTUFBTTtRQUNOQyxTQUFTO1lBQUU7U0FBUztRQUNwQkMsVUFBVTtZQUNSO2dCQUNFQyxXQUFXO2dCQUNYQyxXQUFXO2dCQUNYQyxPQUFPTixNQUFNTyxNQUFNLENBQ2pCLGdDQUNBLCtCQUNBO1lBRUo7WUFDQTtnQkFDRUgsV0FBVztnQkFDWEksVUFBVTtvQkFDUjt3QkFDRUMsT0FBT1QsTUFBTU8sTUFBTSxDQUNqQixXQUNBLFVBQ0EsU0FDQSxTQUNBLFdBQ0EsVUFDQTt3QkFFRkcsS0FBSztvQkFDUDtvQkFDQTt3QkFBRUosT0FBTztvQkFBVztpQkFDckI7WUFDSDtZQUNBO2dCQUNFRixXQUFXO2dCQUNYSyxPQUFPO2dCQUNQQyxLQUFLO1lBQ1A7WUFDQTtnQkFDRU4sV0FBVztnQkFDWEssT0FBTztnQkFDUEMsS0FBSztZQUNQO1lBQ0E7Z0JBQ0VOLFdBQVc7Z0JBQ1hLLE9BQU87Z0JBQ1BDLEtBQUs7WUFDUDtTQUNEO0lBQ0g7QUFDRjtBQUUyQiIsInNvdXJjZXMiOlsid2VicGFjazovL29tbmktY2hhdC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9oaWdobGlnaHQuanMvZXMvbGFuZ3VhZ2VzL2RpZmYuanM/MDViZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTGFuZ3VhZ2U6IERpZmZcbkRlc2NyaXB0aW9uOiBVbmlmaWVkIGFuZCBjb250ZXh0IGRpZmZcbkF1dGhvcjogVmFzaWx5IFBvbG92bnlvdiA8dmFzdEB3aGl0ZWFudHMubmV0PlxuV2Vic2l0ZTogaHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9kaWZmdXRpbHMvXG5DYXRlZ29yeTogY29tbW9uXG4qL1xuXG4vKiogQHR5cGUgTGFuZ3VhZ2VGbiAqL1xuZnVuY3Rpb24gZGlmZihobGpzKSB7XG4gIGNvbnN0IHJlZ2V4ID0gaGxqcy5yZWdleDtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnRGlmZicsXG4gICAgYWxpYXNlczogWyAncGF0Y2gnIF0sXG4gICAgY29udGFpbnM6IFtcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnbWV0YScsXG4gICAgICAgIHJlbGV2YW5jZTogMTAsXG4gICAgICAgIG1hdGNoOiByZWdleC5laXRoZXIoXG4gICAgICAgICAgL15AQCArLVxcZCssXFxkKyArXFwrXFxkKyxcXGQrICtAQC8sXG4gICAgICAgICAgL15cXCpcXCpcXCogK1xcZCssXFxkKyArXFwqXFwqXFwqXFwqJC8sXG4gICAgICAgICAgL14tLS0gK1xcZCssXFxkKyArLS0tLSQvXG4gICAgICAgIClcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2NvbW1lbnQnLFxuICAgICAgICB2YXJpYW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGJlZ2luOiByZWdleC5laXRoZXIoXG4gICAgICAgICAgICAgIC9JbmRleDogLyxcbiAgICAgICAgICAgICAgL15pbmRleC8sXG4gICAgICAgICAgICAgIC89ezMsfS8sXG4gICAgICAgICAgICAgIC9eLXszfS8sXG4gICAgICAgICAgICAgIC9eXFwqezN9IC8sXG4gICAgICAgICAgICAgIC9eXFwrezN9LyxcbiAgICAgICAgICAgICAgL15kaWZmIC0tZ2l0L1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGVuZDogLyQvXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7IG1hdGNoOiAvXlxcKnsxNX0kLyB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2FkZGl0aW9uJyxcbiAgICAgICAgYmVnaW46IC9eXFwrLyxcbiAgICAgICAgZW5kOiAvJC9cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2RlbGV0aW9uJyxcbiAgICAgICAgYmVnaW46IC9eLS8sXG4gICAgICAgIGVuZDogLyQvXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdhZGRpdGlvbicsXG4gICAgICAgIGJlZ2luOiAvXiEvLFxuICAgICAgICBlbmQ6IC8kL1xuICAgICAgfVxuICAgIF1cbiAgfTtcbn1cblxuZXhwb3J0IHsgZGlmZiBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsiZGlmZiIsImhsanMiLCJyZWdleCIsIm5hbWUiLCJhbGlhc2VzIiwiY29udGFpbnMiLCJjbGFzc05hbWUiLCJyZWxldmFuY2UiLCJtYXRjaCIsImVpdGhlciIsInZhcmlhbnRzIiwiYmVnaW4iLCJlbmQiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/diff.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/go.js":
/*!******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/go.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ go)\n/* harmony export */ });\n/*\nLanguage: Go\nAuthor: Stephan Kountso aka StepLg <steplg@gmail.com>\nContributors: Evgeny Stepanischev <imbolk@gmail.com>\nDescription: Google go language (golang). For info about language\nWebsite: http://golang.org/\nCategory: common, system\n*/ function go(hljs) {\n    const LITERALS = [\n        \"true\",\n        \"false\",\n        \"iota\",\n        \"nil\"\n    ];\n    const BUILT_INS = [\n        \"append\",\n        \"cap\",\n        \"close\",\n        \"complex\",\n        \"copy\",\n        \"imag\",\n        \"len\",\n        \"make\",\n        \"new\",\n        \"panic\",\n        \"print\",\n        \"println\",\n        \"real\",\n        \"recover\",\n        \"delete\"\n    ];\n    const TYPES = [\n        \"bool\",\n        \"byte\",\n        \"complex64\",\n        \"complex128\",\n        \"error\",\n        \"float32\",\n        \"float64\",\n        \"int8\",\n        \"int16\",\n        \"int32\",\n        \"int64\",\n        \"string\",\n        \"uint8\",\n        \"uint16\",\n        \"uint32\",\n        \"uint64\",\n        \"int\",\n        \"uint\",\n        \"uintptr\",\n        \"rune\"\n    ];\n    const KWS = [\n        \"break\",\n        \"case\",\n        \"chan\",\n        \"const\",\n        \"continue\",\n        \"default\",\n        \"defer\",\n        \"else\",\n        \"fallthrough\",\n        \"for\",\n        \"func\",\n        \"go\",\n        \"goto\",\n        \"if\",\n        \"import\",\n        \"interface\",\n        \"map\",\n        \"package\",\n        \"range\",\n        \"return\",\n        \"select\",\n        \"struct\",\n        \"switch\",\n        \"type\",\n        \"var\"\n    ];\n    const KEYWORDS = {\n        keyword: KWS,\n        type: TYPES,\n        literal: LITERALS,\n        built_in: BUILT_INS\n    };\n    return {\n        name: \"Go\",\n        aliases: [\n            \"golang\"\n        ],\n        keywords: KEYWORDS,\n        illegal: \"</\",\n        contains: [\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            {\n                className: \"string\",\n                variants: [\n                    hljs.QUOTE_STRING_MODE,\n                    hljs.APOS_STRING_MODE,\n                    {\n                        begin: \"`\",\n                        end: \"`\"\n                    }\n                ]\n            },\n            {\n                className: \"number\",\n                variants: [\n                    {\n                        match: /-?\\b0[xX]\\.[a-fA-F0-9](_?[a-fA-F0-9])*[pP][+-]?\\d(_?\\d)*i?/,\n                        relevance: 0\n                    },\n                    {\n                        match: /-?\\b0[xX](_?[a-fA-F0-9])+((\\.([a-fA-F0-9](_?[a-fA-F0-9])*)?)?[pP][+-]?\\d(_?\\d)*)?i?/,\n                        relevance: 0\n                    },\n                    {\n                        match: /-?\\b0[oO](_?[0-7])*i?/,\n                        relevance: 0\n                    },\n                    {\n                        match: /-?\\.\\d(_?\\d)*([eE][+-]?\\d(_?\\d)*)?i?/,\n                        relevance: 0\n                    },\n                    {\n                        match: /-?\\b\\d(_?\\d)*(\\.(\\d(_?\\d)*)?)?([eE][+-]?\\d(_?\\d)*)?i?/,\n                        relevance: 0\n                    }\n                ]\n            },\n            {\n                begin: /:=/ // relevance booster\n            },\n            {\n                className: \"function\",\n                beginKeywords: \"func\",\n                end: \"\\\\s*(\\\\{|$)\",\n                excludeEnd: true,\n                contains: [\n                    hljs.TITLE_MODE,\n                    {\n                        className: \"params\",\n                        begin: /\\(/,\n                        end: /\\)/,\n                        endsParent: true,\n                        keywords: KEYWORDS,\n                        illegal: /[\"']/\n                    }\n                ]\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9nby5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7QUFPQSxHQUVBLFNBQVNBLEdBQUdDLElBQUk7SUFDZCxNQUFNQyxXQUFXO1FBQ2Y7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUNELE1BQU1DLFlBQVk7UUFDaEI7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFDRCxNQUFNQyxRQUFRO1FBQ1o7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtLQUNEO0lBQ0QsTUFBTUMsTUFBTTtRQUNWO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFDRCxNQUFNQyxXQUFXO1FBQ2ZDLFNBQVNGO1FBQ1RHLE1BQU1KO1FBQ05LLFNBQVNQO1FBQ1RRLFVBQVVQO0lBQ1o7SUFDQSxPQUFPO1FBQ0xRLE1BQU07UUFDTkMsU0FBUztZQUFFO1NBQVU7UUFDckJDLFVBQVVQO1FBQ1ZRLFNBQVM7UUFDVEMsVUFBVTtZQUNSZCxLQUFLZSxtQkFBbUI7WUFDeEJmLEtBQUtnQixvQkFBb0I7WUFDekI7Z0JBQ0VDLFdBQVc7Z0JBQ1hDLFVBQVU7b0JBQ1JsQixLQUFLbUIsaUJBQWlCO29CQUN0Qm5CLEtBQUtvQixnQkFBZ0I7b0JBQ3JCO3dCQUNFQyxPQUFPO3dCQUNQQyxLQUFLO29CQUNQO2lCQUNEO1lBQ0g7WUFDQTtnQkFDRUwsV0FBVztnQkFDWEMsVUFBVTtvQkFDUjt3QkFDRUssT0FBTzt3QkFDUEMsV0FBVztvQkFDYjtvQkFDQTt3QkFDRUQsT0FBTzt3QkFDUEMsV0FBVztvQkFDYjtvQkFDQTt3QkFDRUQsT0FBTzt3QkFDUEMsV0FBVztvQkFDYjtvQkFDQTt3QkFDRUQsT0FBTzt3QkFDUEMsV0FBVztvQkFDYjtvQkFDQTt3QkFDRUQsT0FBTzt3QkFDUEMsV0FBVztvQkFDYjtpQkFDRDtZQUNIO1lBQ0E7Z0JBQUVILE9BQU8sS0FBSyxvQkFBb0I7WUFDbEM7WUFDQTtnQkFDRUosV0FBVztnQkFDWFEsZUFBZTtnQkFDZkgsS0FBSztnQkFDTEksWUFBWTtnQkFDWlosVUFBVTtvQkFDUmQsS0FBSzJCLFVBQVU7b0JBQ2Y7d0JBQ0VWLFdBQVc7d0JBQ1hJLE9BQU87d0JBQ1BDLEtBQUs7d0JBQ0xNLFlBQVk7d0JBQ1poQixVQUFVUDt3QkFDVlEsU0FBUztvQkFDWDtpQkFDRDtZQUNIO1NBQ0Q7SUFDSDtBQUNGO0FBRXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb21uaS1jaGF0LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9lcy9sYW5ndWFnZXMvZ28uanM/ZmM1MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTGFuZ3VhZ2U6IEdvXG5BdXRob3I6IFN0ZXBoYW4gS291bnRzbyBha2EgU3RlcExnIDxzdGVwbGdAZ21haWwuY29tPlxuQ29udHJpYnV0b3JzOiBFdmdlbnkgU3RlcGFuaXNjaGV2IDxpbWJvbGtAZ21haWwuY29tPlxuRGVzY3JpcHRpb246IEdvb2dsZSBnbyBsYW5ndWFnZSAoZ29sYW5nKS4gRm9yIGluZm8gYWJvdXQgbGFuZ3VhZ2VcbldlYnNpdGU6IGh0dHA6Ly9nb2xhbmcub3JnL1xuQ2F0ZWdvcnk6IGNvbW1vbiwgc3lzdGVtXG4qL1xuXG5mdW5jdGlvbiBnbyhobGpzKSB7XG4gIGNvbnN0IExJVEVSQUxTID0gW1xuICAgIFwidHJ1ZVwiLFxuICAgIFwiZmFsc2VcIixcbiAgICBcImlvdGFcIixcbiAgICBcIm5pbFwiXG4gIF07XG4gIGNvbnN0IEJVSUxUX0lOUyA9IFtcbiAgICBcImFwcGVuZFwiLFxuICAgIFwiY2FwXCIsXG4gICAgXCJjbG9zZVwiLFxuICAgIFwiY29tcGxleFwiLFxuICAgIFwiY29weVwiLFxuICAgIFwiaW1hZ1wiLFxuICAgIFwibGVuXCIsXG4gICAgXCJtYWtlXCIsXG4gICAgXCJuZXdcIixcbiAgICBcInBhbmljXCIsXG4gICAgXCJwcmludFwiLFxuICAgIFwicHJpbnRsblwiLFxuICAgIFwicmVhbFwiLFxuICAgIFwicmVjb3ZlclwiLFxuICAgIFwiZGVsZXRlXCJcbiAgXTtcbiAgY29uc3QgVFlQRVMgPSBbXG4gICAgXCJib29sXCIsXG4gICAgXCJieXRlXCIsXG4gICAgXCJjb21wbGV4NjRcIixcbiAgICBcImNvbXBsZXgxMjhcIixcbiAgICBcImVycm9yXCIsXG4gICAgXCJmbG9hdDMyXCIsXG4gICAgXCJmbG9hdDY0XCIsXG4gICAgXCJpbnQ4XCIsXG4gICAgXCJpbnQxNlwiLFxuICAgIFwiaW50MzJcIixcbiAgICBcImludDY0XCIsXG4gICAgXCJzdHJpbmdcIixcbiAgICBcInVpbnQ4XCIsXG4gICAgXCJ1aW50MTZcIixcbiAgICBcInVpbnQzMlwiLFxuICAgIFwidWludDY0XCIsXG4gICAgXCJpbnRcIixcbiAgICBcInVpbnRcIixcbiAgICBcInVpbnRwdHJcIixcbiAgICBcInJ1bmVcIlxuICBdO1xuICBjb25zdCBLV1MgPSBbXG4gICAgXCJicmVha1wiLFxuICAgIFwiY2FzZVwiLFxuICAgIFwiY2hhblwiLFxuICAgIFwiY29uc3RcIixcbiAgICBcImNvbnRpbnVlXCIsXG4gICAgXCJkZWZhdWx0XCIsXG4gICAgXCJkZWZlclwiLFxuICAgIFwiZWxzZVwiLFxuICAgIFwiZmFsbHRocm91Z2hcIixcbiAgICBcImZvclwiLFxuICAgIFwiZnVuY1wiLFxuICAgIFwiZ29cIixcbiAgICBcImdvdG9cIixcbiAgICBcImlmXCIsXG4gICAgXCJpbXBvcnRcIixcbiAgICBcImludGVyZmFjZVwiLFxuICAgIFwibWFwXCIsXG4gICAgXCJwYWNrYWdlXCIsXG4gICAgXCJyYW5nZVwiLFxuICAgIFwicmV0dXJuXCIsXG4gICAgXCJzZWxlY3RcIixcbiAgICBcInN0cnVjdFwiLFxuICAgIFwic3dpdGNoXCIsXG4gICAgXCJ0eXBlXCIsXG4gICAgXCJ2YXJcIixcbiAgXTtcbiAgY29uc3QgS0VZV09SRFMgPSB7XG4gICAga2V5d29yZDogS1dTLFxuICAgIHR5cGU6IFRZUEVTLFxuICAgIGxpdGVyYWw6IExJVEVSQUxTLFxuICAgIGJ1aWx0X2luOiBCVUlMVF9JTlNcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnR28nLFxuICAgIGFsaWFzZXM6IFsgJ2dvbGFuZycgXSxcbiAgICBrZXl3b3JkczogS0VZV09SRFMsXG4gICAgaWxsZWdhbDogJzwvJyxcbiAgICBjb250YWluczogW1xuICAgICAgaGxqcy5DX0xJTkVfQ09NTUVOVF9NT0RFLFxuICAgICAgaGxqcy5DX0JMT0NLX0NPTU1FTlRfTU9ERSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICAgICAgdmFyaWFudHM6IFtcbiAgICAgICAgICBobGpzLlFVT1RFX1NUUklOR19NT0RFLFxuICAgICAgICAgIGhsanMuQVBPU19TVFJJTkdfTU9ERSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBiZWdpbjogJ2AnLFxuICAgICAgICAgICAgZW5kOiAnYCdcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ251bWJlcicsXG4gICAgICAgIHZhcmlhbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbWF0Y2g6IC8tP1xcYjBbeFhdXFwuW2EtZkEtRjAtOV0oXz9bYS1mQS1GMC05XSkqW3BQXVsrLV0/XFxkKF8/XFxkKSppPy8sIC8vIGhleCB3aXRob3V0IGEgcHJlc2VudCBkaWdpdCBiZWZvcmUgLiAobWFraW5nIGEgZGlnaXQgYWZ0ZXJ3YXJkcyByZXF1aXJlZClcbiAgICAgICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgbWF0Y2g6IC8tP1xcYjBbeFhdKF8/W2EtZkEtRjAtOV0pKygoXFwuKFthLWZBLUYwLTldKF8/W2EtZkEtRjAtOV0pKik/KT9bcFBdWystXT9cXGQoXz9cXGQpKik/aT8vLCAvLyBoZXggd2l0aCBhIHByZXNlbnQgZGlnaXQgYmVmb3JlIC4gKG1ha2luZyBhIGRpZ2l0IGFmdGVyd2FyZHMgb3B0aW9uYWwpXG4gICAgICAgICAgICByZWxldmFuY2U6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG1hdGNoOiAvLT9cXGIwW29PXShfP1swLTddKSppPy8sIC8vIGxlYWRpbmcgMG8gb2N0YWxcbiAgICAgICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgbWF0Y2g6IC8tP1xcLlxcZChfP1xcZCkqKFtlRV1bKy1dP1xcZChfP1xcZCkqKT9pPy8sIC8vIGRlY2ltYWwgd2l0aG91dCBhIHByZXNlbnQgZGlnaXQgYmVmb3JlIC4gKG1ha2luZyBhIGRpZ2l0IGFmdGVyd2FyZHMgcmVxdWlyZWQpXG4gICAgICAgICAgICByZWxldmFuY2U6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG1hdGNoOiAvLT9cXGJcXGQoXz9cXGQpKihcXC4oXFxkKF8/XFxkKSopPyk/KFtlRV1bKy1dP1xcZChfP1xcZCkqKT9pPy8sIC8vIGRlY2ltYWwgd2l0aCBhIHByZXNlbnQgZGlnaXQgYmVmb3JlIC4gKG1ha2luZyBhIGRpZ2l0IGFmdGVyd2FyZHMgb3B0aW9uYWwpXG4gICAgICAgICAgICByZWxldmFuY2U6IDBcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB7IGJlZ2luOiAvOj0vIC8vIHJlbGV2YW5jZSBib29zdGVyXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdmdW5jdGlvbicsXG4gICAgICAgIGJlZ2luS2V5d29yZHM6ICdmdW5jJyxcbiAgICAgICAgZW5kOiAnXFxcXHMqKFxcXFx7fCQpJyxcbiAgICAgICAgZXhjbHVkZUVuZDogdHJ1ZSxcbiAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICBobGpzLlRJVExFX01PREUsXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAncGFyYW1zJyxcbiAgICAgICAgICAgIGJlZ2luOiAvXFwoLyxcbiAgICAgICAgICAgIGVuZDogL1xcKS8sXG4gICAgICAgICAgICBlbmRzUGFyZW50OiB0cnVlLFxuICAgICAgICAgICAga2V5d29yZHM6IEtFWVdPUkRTLFxuICAgICAgICAgICAgaWxsZWdhbDogL1tcIiddL1xuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIF1cbiAgfTtcbn1cblxuZXhwb3J0IHsgZ28gYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbImdvIiwiaGxqcyIsIkxJVEVSQUxTIiwiQlVJTFRfSU5TIiwiVFlQRVMiLCJLV1MiLCJLRVlXT1JEUyIsImtleXdvcmQiLCJ0eXBlIiwibGl0ZXJhbCIsImJ1aWx0X2luIiwibmFtZSIsImFsaWFzZXMiLCJrZXl3b3JkcyIsImlsbGVnYWwiLCJjb250YWlucyIsIkNfTElORV9DT01NRU5UX01PREUiLCJDX0JMT0NLX0NPTU1FTlRfTU9ERSIsImNsYXNzTmFtZSIsInZhcmlhbnRzIiwiUVVPVEVfU1RSSU5HX01PREUiLCJBUE9TX1NUUklOR19NT0RFIiwiYmVnaW4iLCJlbmQiLCJtYXRjaCIsInJlbGV2YW5jZSIsImJlZ2luS2V5d29yZHMiLCJleGNsdWRlRW5kIiwiVElUTEVfTU9ERSIsImVuZHNQYXJlbnQiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/go.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/graphql.js":
/*!***********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/graphql.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ graphql)\n/* harmony export */ });\n/*\n Language: GraphQL\n Author: John Foster (GH jf990), and others\n Description: GraphQL is a query language for APIs\n Category: web, common\n*/ /** @type LanguageFn */ function graphql(hljs) {\n    const regex = hljs.regex;\n    const GQL_NAME = /[_A-Za-z][_0-9A-Za-z]*/;\n    return {\n        name: \"GraphQL\",\n        aliases: [\n            \"gql\"\n        ],\n        case_insensitive: true,\n        disableAutodetect: false,\n        keywords: {\n            keyword: [\n                \"query\",\n                \"mutation\",\n                \"subscription\",\n                \"type\",\n                \"input\",\n                \"schema\",\n                \"directive\",\n                \"interface\",\n                \"union\",\n                \"scalar\",\n                \"fragment\",\n                \"enum\",\n                \"on\"\n            ],\n            literal: [\n                \"true\",\n                \"false\",\n                \"null\"\n            ]\n        },\n        contains: [\n            hljs.HASH_COMMENT_MODE,\n            hljs.QUOTE_STRING_MODE,\n            hljs.NUMBER_MODE,\n            {\n                scope: \"punctuation\",\n                match: /[.]{3}/,\n                relevance: 0\n            },\n            {\n                scope: \"punctuation\",\n                begin: /[\\!\\(\\)\\:\\=\\[\\]\\{\\|\\}]{1}/,\n                relevance: 0\n            },\n            {\n                scope: \"variable\",\n                begin: /\\$/,\n                end: /\\W/,\n                excludeEnd: true,\n                relevance: 0\n            },\n            {\n                scope: \"meta\",\n                match: /@\\w+/,\n                excludeEnd: true\n            },\n            {\n                scope: \"symbol\",\n                begin: regex.concat(GQL_NAME, regex.lookahead(/\\s*:/)),\n                relevance: 0\n            }\n        ],\n        illegal: [\n            /[;<']/,\n            /BEGIN/\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9ncmFwaHFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7QUFLQSxHQUVBLHFCQUFxQixHQUNyQixTQUFTQSxRQUFRQyxJQUFJO0lBQ25CLE1BQU1DLFFBQVFELEtBQUtDLEtBQUs7SUFDeEIsTUFBTUMsV0FBVztJQUNqQixPQUFPO1FBQ0xDLE1BQU07UUFDTkMsU0FBUztZQUFFO1NBQU87UUFDbEJDLGtCQUFrQjtRQUNsQkMsbUJBQW1CO1FBQ25CQyxVQUFVO1lBQ1JDLFNBQVM7Z0JBQ1A7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7YUFDRDtZQUNEQyxTQUFTO2dCQUNQO2dCQUNBO2dCQUNBO2FBQ0Q7UUFDSDtRQUNBQyxVQUFVO1lBQ1JWLEtBQUtXLGlCQUFpQjtZQUN0QlgsS0FBS1ksaUJBQWlCO1lBQ3RCWixLQUFLYSxXQUFXO1lBQ2hCO2dCQUNFQyxPQUFPO2dCQUNQQyxPQUFPO2dCQUNQQyxXQUFXO1lBQ2I7WUFDQTtnQkFDRUYsT0FBTztnQkFDUEcsT0FBTztnQkFDUEQsV0FBVztZQUNiO1lBQ0E7Z0JBQ0VGLE9BQU87Z0JBQ1BHLE9BQU87Z0JBQ1BDLEtBQUs7Z0JBQ0xDLFlBQVk7Z0JBQ1pILFdBQVc7WUFDYjtZQUNBO2dCQUNFRixPQUFPO2dCQUNQQyxPQUFPO2dCQUNQSSxZQUFZO1lBQ2Q7WUFDQTtnQkFDRUwsT0FBTztnQkFDUEcsT0FBT2hCLE1BQU1tQixNQUFNLENBQUNsQixVQUFVRCxNQUFNb0IsU0FBUyxDQUFDO2dCQUM5Q0wsV0FBVztZQUNiO1NBQ0Q7UUFDRE0sU0FBUztZQUNQO1lBQ0E7U0FDRDtJQUNIO0FBQ0Y7QUFFOEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbW5pLWNoYXQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9ncmFwaHFsLmpzP2JmMGMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiBMYW5ndWFnZTogR3JhcGhRTFxuIEF1dGhvcjogSm9obiBGb3N0ZXIgKEdIIGpmOTkwKSwgYW5kIG90aGVyc1xuIERlc2NyaXB0aW9uOiBHcmFwaFFMIGlzIGEgcXVlcnkgbGFuZ3VhZ2UgZm9yIEFQSXNcbiBDYXRlZ29yeTogd2ViLCBjb21tb25cbiovXG5cbi8qKiBAdHlwZSBMYW5ndWFnZUZuICovXG5mdW5jdGlvbiBncmFwaHFsKGhsanMpIHtcbiAgY29uc3QgcmVnZXggPSBobGpzLnJlZ2V4O1xuICBjb25zdCBHUUxfTkFNRSA9IC9bX0EtWmEtel1bXzAtOUEtWmEtel0qLztcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBcIkdyYXBoUUxcIixcbiAgICBhbGlhc2VzOiBbIFwiZ3FsXCIgXSxcbiAgICBjYXNlX2luc2Vuc2l0aXZlOiB0cnVlLFxuICAgIGRpc2FibGVBdXRvZGV0ZWN0OiBmYWxzZSxcbiAgICBrZXl3b3Jkczoge1xuICAgICAga2V5d29yZDogW1xuICAgICAgICBcInF1ZXJ5XCIsXG4gICAgICAgIFwibXV0YXRpb25cIixcbiAgICAgICAgXCJzdWJzY3JpcHRpb25cIixcbiAgICAgICAgXCJ0eXBlXCIsXG4gICAgICAgIFwiaW5wdXRcIixcbiAgICAgICAgXCJzY2hlbWFcIixcbiAgICAgICAgXCJkaXJlY3RpdmVcIixcbiAgICAgICAgXCJpbnRlcmZhY2VcIixcbiAgICAgICAgXCJ1bmlvblwiLFxuICAgICAgICBcInNjYWxhclwiLFxuICAgICAgICBcImZyYWdtZW50XCIsXG4gICAgICAgIFwiZW51bVwiLFxuICAgICAgICBcIm9uXCJcbiAgICAgIF0sXG4gICAgICBsaXRlcmFsOiBbXG4gICAgICAgIFwidHJ1ZVwiLFxuICAgICAgICBcImZhbHNlXCIsXG4gICAgICAgIFwibnVsbFwiXG4gICAgICBdXG4gICAgfSxcbiAgICBjb250YWluczogW1xuICAgICAgaGxqcy5IQVNIX0NPTU1FTlRfTU9ERSxcbiAgICAgIGhsanMuUVVPVEVfU1RSSU5HX01PREUsXG4gICAgICBobGpzLk5VTUJFUl9NT0RFLFxuICAgICAge1xuICAgICAgICBzY29wZTogXCJwdW5jdHVhdGlvblwiLFxuICAgICAgICBtYXRjaDogL1suXXszfS8sXG4gICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc2NvcGU6IFwicHVuY3R1YXRpb25cIixcbiAgICAgICAgYmVnaW46IC9bXFwhXFwoXFwpXFw6XFw9XFxbXFxdXFx7XFx8XFx9XXsxfS8sXG4gICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc2NvcGU6IFwidmFyaWFibGVcIixcbiAgICAgICAgYmVnaW46IC9cXCQvLFxuICAgICAgICBlbmQ6IC9cXFcvLFxuICAgICAgICBleGNsdWRlRW5kOiB0cnVlLFxuICAgICAgICByZWxldmFuY2U6IDBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHNjb3BlOiBcIm1ldGFcIixcbiAgICAgICAgbWF0Y2g6IC9AXFx3Ky8sXG4gICAgICAgIGV4Y2x1ZGVFbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHNjb3BlOiBcInN5bWJvbFwiLFxuICAgICAgICBiZWdpbjogcmVnZXguY29uY2F0KEdRTF9OQU1FLCByZWdleC5sb29rYWhlYWQoL1xccyo6LykpLFxuICAgICAgICByZWxldmFuY2U6IDBcbiAgICAgIH1cbiAgICBdLFxuICAgIGlsbGVnYWw6IFtcbiAgICAgIC9bOzwnXS8sXG4gICAgICAvQkVHSU4vXG4gICAgXVxuICB9O1xufVxuXG5leHBvcnQgeyBncmFwaHFsIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJncmFwaHFsIiwiaGxqcyIsInJlZ2V4IiwiR1FMX05BTUUiLCJuYW1lIiwiYWxpYXNlcyIsImNhc2VfaW5zZW5zaXRpdmUiLCJkaXNhYmxlQXV0b2RldGVjdCIsImtleXdvcmRzIiwia2V5d29yZCIsImxpdGVyYWwiLCJjb250YWlucyIsIkhBU0hfQ09NTUVOVF9NT0RFIiwiUVVPVEVfU1RSSU5HX01PREUiLCJOVU1CRVJfTU9ERSIsInNjb3BlIiwibWF0Y2giLCJyZWxldmFuY2UiLCJiZWdpbiIsImVuZCIsImV4Y2x1ZGVFbmQiLCJjb25jYXQiLCJsb29rYWhlYWQiLCJpbGxlZ2FsIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/graphql.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/ini.js":
/*!*******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/ini.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ini)\n/* harmony export */ });\n/*\nLanguage: TOML, also INI\nDescription: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.\nContributors: Guillaume Gomez <guillaume1.gomez@gmail.com>\nCategory: common, config\nWebsite: https://github.com/toml-lang/toml\n*/ function ini(hljs) {\n    const regex = hljs.regex;\n    const NUMBERS = {\n        className: \"number\",\n        relevance: 0,\n        variants: [\n            {\n                begin: /([+-]+)?[\\d]+_[\\d_]+/\n            },\n            {\n                begin: hljs.NUMBER_RE\n            }\n        ]\n    };\n    const COMMENTS = hljs.COMMENT();\n    COMMENTS.variants = [\n        {\n            begin: /;/,\n            end: /$/\n        },\n        {\n            begin: /#/,\n            end: /$/\n        }\n    ];\n    const VARIABLES = {\n        className: \"variable\",\n        variants: [\n            {\n                begin: /\\$[\\w\\d\"][\\w\\d_]*/\n            },\n            {\n                begin: /\\$\\{(.*?)\\}/\n            }\n        ]\n    };\n    const LITERALS = {\n        className: \"literal\",\n        begin: /\\bon|off|true|false|yes|no\\b/\n    };\n    const STRINGS = {\n        className: \"string\",\n        contains: [\n            hljs.BACKSLASH_ESCAPE\n        ],\n        variants: [\n            {\n                begin: \"'''\",\n                end: \"'''\",\n                relevance: 10\n            },\n            {\n                begin: '\"\"\"',\n                end: '\"\"\"',\n                relevance: 10\n            },\n            {\n                begin: '\"',\n                end: '\"'\n            },\n            {\n                begin: \"'\",\n                end: \"'\"\n            }\n        ]\n    };\n    const ARRAY = {\n        begin: /\\[/,\n        end: /\\]/,\n        contains: [\n            COMMENTS,\n            LITERALS,\n            VARIABLES,\n            STRINGS,\n            NUMBERS,\n            \"self\"\n        ],\n        relevance: 0\n    };\n    const BARE_KEY = /[A-Za-z0-9_-]+/;\n    const QUOTED_KEY_DOUBLE_QUOTE = /\"(\\\\\"|[^\"])*\"/;\n    const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;\n    const ANY_KEY = regex.either(BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE);\n    const DOTTED_KEY = regex.concat(ANY_KEY, \"(\\\\s*\\\\.\\\\s*\", ANY_KEY, \")*\", regex.lookahead(/\\s*=\\s*[^#\\s]/));\n    return {\n        name: \"TOML, also INI\",\n        aliases: [\n            \"toml\"\n        ],\n        case_insensitive: true,\n        illegal: /\\S/,\n        contains: [\n            COMMENTS,\n            {\n                className: \"section\",\n                begin: /\\[+/,\n                end: /\\]+/\n            },\n            {\n                begin: DOTTED_KEY,\n                className: \"attr\",\n                starts: {\n                    end: /$/,\n                    contains: [\n                        COMMENTS,\n                        ARRAY,\n                        LITERALS,\n                        VARIABLES,\n                        STRINGS,\n                        NUMBERS\n                    ]\n                }\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9pbmkuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7QUFNQSxHQUVBLFNBQVNBLElBQUlDLElBQUk7SUFDZixNQUFNQyxRQUFRRCxLQUFLQyxLQUFLO0lBQ3hCLE1BQU1DLFVBQVU7UUFDZEMsV0FBVztRQUNYQyxXQUFXO1FBQ1hDLFVBQVU7WUFDUjtnQkFBRUMsT0FBTztZQUF1QjtZQUNoQztnQkFBRUEsT0FBT04sS0FBS08sU0FBUztZQUFDO1NBQ3pCO0lBQ0g7SUFDQSxNQUFNQyxXQUFXUixLQUFLUyxPQUFPO0lBQzdCRCxTQUFTSCxRQUFRLEdBQUc7UUFDbEI7WUFDRUMsT0FBTztZQUNQSSxLQUFLO1FBQ1A7UUFDQTtZQUNFSixPQUFPO1lBQ1BJLEtBQUs7UUFDUDtLQUNEO0lBQ0QsTUFBTUMsWUFBWTtRQUNoQlIsV0FBVztRQUNYRSxVQUFVO1lBQ1I7Z0JBQUVDLE9BQU87WUFBb0I7WUFDN0I7Z0JBQUVBLE9BQU87WUFBYztTQUN4QjtJQUNIO0lBQ0EsTUFBTU0sV0FBVztRQUNmVCxXQUFXO1FBQ1hHLE9BQU87SUFDVDtJQUNBLE1BQU1PLFVBQVU7UUFDZFYsV0FBVztRQUNYVyxVQUFVO1lBQUVkLEtBQUtlLGdCQUFnQjtTQUFFO1FBQ25DVixVQUFVO1lBQ1I7Z0JBQ0VDLE9BQU87Z0JBQ1BJLEtBQUs7Z0JBQ0xOLFdBQVc7WUFDYjtZQUNBO2dCQUNFRSxPQUFPO2dCQUNQSSxLQUFLO2dCQUNMTixXQUFXO1lBQ2I7WUFDQTtnQkFDRUUsT0FBTztnQkFDUEksS0FBSztZQUNQO1lBQ0E7Z0JBQ0VKLE9BQU87Z0JBQ1BJLEtBQUs7WUFDUDtTQUNEO0lBQ0g7SUFDQSxNQUFNTSxRQUFRO1FBQ1pWLE9BQU87UUFDUEksS0FBSztRQUNMSSxVQUFVO1lBQ1JOO1lBQ0FJO1lBQ0FEO1lBQ0FFO1lBQ0FYO1lBQ0E7U0FDRDtRQUNERSxXQUFXO0lBQ2I7SUFFQSxNQUFNYSxXQUFXO0lBQ2pCLE1BQU1DLDBCQUEwQjtJQUNoQyxNQUFNQywwQkFBMEI7SUFDaEMsTUFBTUMsVUFBVW5CLE1BQU1vQixNQUFNLENBQzFCSixVQUFVQyx5QkFBeUJDO0lBRXJDLE1BQU1HLGFBQWFyQixNQUFNc0IsTUFBTSxDQUM3QkgsU0FBUyxnQkFBZ0JBLFNBQVMsTUFDbENuQixNQUFNdUIsU0FBUyxDQUFDO0lBR2xCLE9BQU87UUFDTEMsTUFBTTtRQUNOQyxTQUFTO1lBQUU7U0FBUTtRQUNuQkMsa0JBQWtCO1FBQ2xCQyxTQUFTO1FBQ1RkLFVBQVU7WUFDUk47WUFDQTtnQkFDRUwsV0FBVztnQkFDWEcsT0FBTztnQkFDUEksS0FBSztZQUNQO1lBQ0E7Z0JBQ0VKLE9BQU9nQjtnQkFDUG5CLFdBQVc7Z0JBQ1gwQixRQUFRO29CQUNObkIsS0FBSztvQkFDTEksVUFBVTt3QkFDUk47d0JBQ0FRO3dCQUNBSjt3QkFDQUQ7d0JBQ0FFO3dCQUNBWDtxQkFDRDtnQkFDSDtZQUNGO1NBQ0Q7SUFDSDtBQUNGO0FBRTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb21uaS1jaGF0LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9lcy9sYW5ndWFnZXMvaW5pLmpzPzE3YWQiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkxhbmd1YWdlOiBUT01MLCBhbHNvIElOSVxuRGVzY3JpcHRpb246IFRPTUwgYWltcyB0byBiZSBhIG1pbmltYWwgY29uZmlndXJhdGlvbiBmaWxlIGZvcm1hdCB0aGF0J3MgZWFzeSB0byByZWFkIGR1ZSB0byBvYnZpb3VzIHNlbWFudGljcy5cbkNvbnRyaWJ1dG9yczogR3VpbGxhdW1lIEdvbWV6IDxndWlsbGF1bWUxLmdvbWV6QGdtYWlsLmNvbT5cbkNhdGVnb3J5OiBjb21tb24sIGNvbmZpZ1xuV2Vic2l0ZTogaHR0cHM6Ly9naXRodWIuY29tL3RvbWwtbGFuZy90b21sXG4qL1xuXG5mdW5jdGlvbiBpbmkoaGxqcykge1xuICBjb25zdCByZWdleCA9IGhsanMucmVnZXg7XG4gIGNvbnN0IE5VTUJFUlMgPSB7XG4gICAgY2xhc3NOYW1lOiAnbnVtYmVyJyxcbiAgICByZWxldmFuY2U6IDAsXG4gICAgdmFyaWFudHM6IFtcbiAgICAgIHsgYmVnaW46IC8oWystXSspP1tcXGRdK19bXFxkX10rLyB9LFxuICAgICAgeyBiZWdpbjogaGxqcy5OVU1CRVJfUkUgfVxuICAgIF1cbiAgfTtcbiAgY29uc3QgQ09NTUVOVFMgPSBobGpzLkNPTU1FTlQoKTtcbiAgQ09NTUVOVFMudmFyaWFudHMgPSBbXG4gICAge1xuICAgICAgYmVnaW46IC87LyxcbiAgICAgIGVuZDogLyQvXG4gICAgfSxcbiAgICB7XG4gICAgICBiZWdpbjogLyMvLFxuICAgICAgZW5kOiAvJC9cbiAgICB9XG4gIF07XG4gIGNvbnN0IFZBUklBQkxFUyA9IHtcbiAgICBjbGFzc05hbWU6ICd2YXJpYWJsZScsXG4gICAgdmFyaWFudHM6IFtcbiAgICAgIHsgYmVnaW46IC9cXCRbXFx3XFxkXCJdW1xcd1xcZF9dKi8gfSxcbiAgICAgIHsgYmVnaW46IC9cXCRcXHsoLio/KVxcfS8gfVxuICAgIF1cbiAgfTtcbiAgY29uc3QgTElURVJBTFMgPSB7XG4gICAgY2xhc3NOYW1lOiAnbGl0ZXJhbCcsXG4gICAgYmVnaW46IC9cXGJvbnxvZmZ8dHJ1ZXxmYWxzZXx5ZXN8bm9cXGIvXG4gIH07XG4gIGNvbnN0IFNUUklOR1MgPSB7XG4gICAgY2xhc3NOYW1lOiBcInN0cmluZ1wiLFxuICAgIGNvbnRhaW5zOiBbIGhsanMuQkFDS1NMQVNIX0VTQ0FQRSBdLFxuICAgIHZhcmlhbnRzOiBbXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiBcIicnJ1wiLFxuICAgICAgICBlbmQ6IFwiJycnXCIsXG4gICAgICAgIHJlbGV2YW5jZTogMTBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiAnXCJcIlwiJyxcbiAgICAgICAgZW5kOiAnXCJcIlwiJyxcbiAgICAgICAgcmVsZXZhbmNlOiAxMFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYmVnaW46ICdcIicsXG4gICAgICAgIGVuZDogJ1wiJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYmVnaW46IFwiJ1wiLFxuICAgICAgICBlbmQ6IFwiJ1wiXG4gICAgICB9XG4gICAgXVxuICB9O1xuICBjb25zdCBBUlJBWSA9IHtcbiAgICBiZWdpbjogL1xcWy8sXG4gICAgZW5kOiAvXFxdLyxcbiAgICBjb250YWluczogW1xuICAgICAgQ09NTUVOVFMsXG4gICAgICBMSVRFUkFMUyxcbiAgICAgIFZBUklBQkxFUyxcbiAgICAgIFNUUklOR1MsXG4gICAgICBOVU1CRVJTLFxuICAgICAgJ3NlbGYnXG4gICAgXSxcbiAgICByZWxldmFuY2U6IDBcbiAgfTtcblxuICBjb25zdCBCQVJFX0tFWSA9IC9bQS1aYS16MC05Xy1dKy87XG4gIGNvbnN0IFFVT1RFRF9LRVlfRE9VQkxFX1FVT1RFID0gL1wiKFxcXFxcInxbXlwiXSkqXCIvO1xuICBjb25zdCBRVU9URURfS0VZX1NJTkdMRV9RVU9URSA9IC8nW14nXSonLztcbiAgY29uc3QgQU5ZX0tFWSA9IHJlZ2V4LmVpdGhlcihcbiAgICBCQVJFX0tFWSwgUVVPVEVEX0tFWV9ET1VCTEVfUVVPVEUsIFFVT1RFRF9LRVlfU0lOR0xFX1FVT1RFXG4gICk7XG4gIGNvbnN0IERPVFRFRF9LRVkgPSByZWdleC5jb25jYXQoXG4gICAgQU5ZX0tFWSwgJyhcXFxccypcXFxcLlxcXFxzKicsIEFOWV9LRVksICcpKicsXG4gICAgcmVnZXgubG9va2FoZWFkKC9cXHMqPVxccypbXiNcXHNdLylcbiAgKTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdUT01MLCBhbHNvIElOSScsXG4gICAgYWxpYXNlczogWyAndG9tbCcgXSxcbiAgICBjYXNlX2luc2Vuc2l0aXZlOiB0cnVlLFxuICAgIGlsbGVnYWw6IC9cXFMvLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICBDT01NRU5UUyxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnc2VjdGlvbicsXG4gICAgICAgIGJlZ2luOiAvXFxbKy8sXG4gICAgICAgIGVuZDogL1xcXSsvXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBiZWdpbjogRE9UVEVEX0tFWSxcbiAgICAgICAgY2xhc3NOYW1lOiAnYXR0cicsXG4gICAgICAgIHN0YXJ0czoge1xuICAgICAgICAgIGVuZDogLyQvLFxuICAgICAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgICAgICBDT01NRU5UUyxcbiAgICAgICAgICAgIEFSUkFZLFxuICAgICAgICAgICAgTElURVJBTFMsXG4gICAgICAgICAgICBWQVJJQUJMRVMsXG4gICAgICAgICAgICBTVFJJTkdTLFxuICAgICAgICAgICAgTlVNQkVSU1xuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfTtcbn1cblxuZXhwb3J0IHsgaW5pIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJpbmkiLCJobGpzIiwicmVnZXgiLCJOVU1CRVJTIiwiY2xhc3NOYW1lIiwicmVsZXZhbmNlIiwidmFyaWFudHMiLCJiZWdpbiIsIk5VTUJFUl9SRSIsIkNPTU1FTlRTIiwiQ09NTUVOVCIsImVuZCIsIlZBUklBQkxFUyIsIkxJVEVSQUxTIiwiU1RSSU5HUyIsImNvbnRhaW5zIiwiQkFDS1NMQVNIX0VTQ0FQRSIsIkFSUkFZIiwiQkFSRV9LRVkiLCJRVU9URURfS0VZX0RPVUJMRV9RVU9URSIsIlFVT1RFRF9LRVlfU0lOR0xFX1FVT1RFIiwiQU5ZX0tFWSIsImVpdGhlciIsIkRPVFRFRF9LRVkiLCJjb25jYXQiLCJsb29rYWhlYWQiLCJuYW1lIiwiYWxpYXNlcyIsImNhc2VfaW5zZW5zaXRpdmUiLCJpbGxlZ2FsIiwic3RhcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/ini.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/java.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/java.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ java)\n/* harmony export */ });\n// https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10\nvar decimalDigits = \"[0-9](_*[0-9])*\";\nvar frac = `\\\\.(${decimalDigits})`;\nvar hexDigits = \"[0-9a-fA-F](_*[0-9a-fA-F])*\";\nvar NUMERIC = {\n    className: \"number\",\n    variants: [\n        // DecimalFloatingPointLiteral\n        // including ExponentPart\n        {\n            begin: `(\\\\b(${decimalDigits})((${frac})|\\\\.)?|(${frac}))` + `[eE][+-]?(${decimalDigits})[fFdD]?\\\\b`\n        },\n        // excluding ExponentPart\n        {\n            begin: `\\\\b(${decimalDigits})((${frac})[fFdD]?\\\\b|\\\\.([fFdD]\\\\b)?)`\n        },\n        {\n            begin: `(${frac})[fFdD]?\\\\b`\n        },\n        {\n            begin: `\\\\b(${decimalDigits})[fFdD]\\\\b`\n        },\n        // HexadecimalFloatingPointLiteral\n        {\n            begin: `\\\\b0[xX]((${hexDigits})\\\\.?|(${hexDigits})?\\\\.(${hexDigits}))` + `[pP][+-]?(${decimalDigits})[fFdD]?\\\\b`\n        },\n        // DecimalIntegerLiteral\n        {\n            begin: \"\\\\b(0|[1-9](_*[0-9])*)[lL]?\\\\b\"\n        },\n        // HexIntegerLiteral\n        {\n            begin: `\\\\b0[xX](${hexDigits})[lL]?\\\\b`\n        },\n        // OctalIntegerLiteral\n        {\n            begin: \"\\\\b0(_*[0-7])*[lL]?\\\\b\"\n        },\n        // BinaryIntegerLiteral\n        {\n            begin: \"\\\\b0[bB][01](_*[01])*[lL]?\\\\b\"\n        }\n    ],\n    relevance: 0\n};\n/*\nLanguage: Java\nAuthor: Vsevolod Solovyov <vsevolod.solovyov@gmail.com>\nCategory: common, enterprise\nWebsite: https://www.java.com/\n*/ /**\n * Allows recursive regex expressions to a given depth\n *\n * ie: recurRegex(\"(abc~~~)\", /~~~/g, 2) becomes:\n * (abc(abc(abc)))\n *\n * @param {string} re\n * @param {RegExp} substitution (should be a g mode regex)\n * @param {number} depth\n * @returns {string}``\n */ function recurRegex(re, substitution, depth) {\n    if (depth === -1) return \"\";\n    return re.replace(substitution, (_)=>{\n        return recurRegex(re, substitution, depth - 1);\n    });\n}\n/** @type LanguageFn */ function java(hljs) {\n    const regex = hljs.regex;\n    const JAVA_IDENT_RE = \"[\\xc0-ʸa-zA-Z_$][\\xc0-ʸa-zA-Z_$0-9]*\";\n    const GENERIC_IDENT_RE = JAVA_IDENT_RE + recurRegex(\"(?:<\" + JAVA_IDENT_RE + \"~~~(?:\\\\s*,\\\\s*\" + JAVA_IDENT_RE + \"~~~)*>)?\", /~~~/g, 2);\n    const MAIN_KEYWORDS = [\n        \"synchronized\",\n        \"abstract\",\n        \"private\",\n        \"var\",\n        \"static\",\n        \"if\",\n        \"const \",\n        \"for\",\n        \"while\",\n        \"strictfp\",\n        \"finally\",\n        \"protected\",\n        \"import\",\n        \"native\",\n        \"final\",\n        \"void\",\n        \"enum\",\n        \"else\",\n        \"break\",\n        \"transient\",\n        \"catch\",\n        \"instanceof\",\n        \"volatile\",\n        \"case\",\n        \"assert\",\n        \"package\",\n        \"default\",\n        \"public\",\n        \"try\",\n        \"switch\",\n        \"continue\",\n        \"throws\",\n        \"protected\",\n        \"public\",\n        \"private\",\n        \"module\",\n        \"requires\",\n        \"exports\",\n        \"do\",\n        \"sealed\",\n        \"yield\",\n        \"permits\",\n        \"goto\",\n        \"when\"\n    ];\n    const BUILT_INS = [\n        \"super\",\n        \"this\"\n    ];\n    const LITERALS = [\n        \"false\",\n        \"true\",\n        \"null\"\n    ];\n    const TYPES = [\n        \"char\",\n        \"boolean\",\n        \"long\",\n        \"float\",\n        \"int\",\n        \"byte\",\n        \"short\",\n        \"double\"\n    ];\n    const KEYWORDS = {\n        keyword: MAIN_KEYWORDS,\n        literal: LITERALS,\n        type: TYPES,\n        built_in: BUILT_INS\n    };\n    const ANNOTATION = {\n        className: \"meta\",\n        begin: \"@\" + JAVA_IDENT_RE,\n        contains: [\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                contains: [\n                    \"self\"\n                ] // allow nested () inside our annotation\n            }\n        ]\n    };\n    const PARAMS = {\n        className: \"params\",\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        relevance: 0,\n        contains: [\n            hljs.C_BLOCK_COMMENT_MODE\n        ],\n        endsParent: true\n    };\n    return {\n        name: \"Java\",\n        aliases: [\n            \"jsp\"\n        ],\n        keywords: KEYWORDS,\n        illegal: /<\\/|#/,\n        contains: [\n            hljs.COMMENT(\"/\\\\*\\\\*\", \"\\\\*/\", {\n                relevance: 0,\n                contains: [\n                    {\n                        // eat up @'s in emails to prevent them to be recognized as doctags\n                        begin: /\\w+@/,\n                        relevance: 0\n                    },\n                    {\n                        className: \"doctag\",\n                        begin: \"@[A-Za-z]+\"\n                    }\n                ]\n            }),\n            // relevance boost\n            {\n                begin: /import java\\.[a-z]+\\./,\n                keywords: \"import\",\n                relevance: 2\n            },\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            {\n                begin: /\"\"\"/,\n                end: /\"\"\"/,\n                className: \"string\",\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ]\n            },\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE,\n            {\n                match: [\n                    /\\b(?:class|interface|enum|extends|implements|new)/,\n                    /\\s+/,\n                    JAVA_IDENT_RE\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                }\n            },\n            {\n                // Exceptions for hyphenated keywords\n                match: /non-sealed/,\n                scope: \"keyword\"\n            },\n            {\n                begin: [\n                    regex.concat(/(?!else)/, JAVA_IDENT_RE),\n                    /\\s+/,\n                    JAVA_IDENT_RE,\n                    /\\s+/,\n                    /=(?!=)/\n                ],\n                className: {\n                    1: \"type\",\n                    3: \"variable\",\n                    5: \"operator\"\n                }\n            },\n            {\n                begin: [\n                    /record/,\n                    /\\s+/,\n                    JAVA_IDENT_RE\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                },\n                contains: [\n                    PARAMS,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            {\n                // Expression keywords prevent 'keyword Name(...)' from being\n                // recognized as a function definition\n                beginKeywords: \"new throw return else\",\n                relevance: 0\n            },\n            {\n                begin: [\n                    \"(?:\" + GENERIC_IDENT_RE + \"\\\\s+)\",\n                    hljs.UNDERSCORE_IDENT_RE,\n                    /\\s*(?=\\()/\n                ],\n                className: {\n                    2: \"title.function\"\n                },\n                keywords: KEYWORDS,\n                contains: [\n                    {\n                        className: \"params\",\n                        begin: /\\(/,\n                        end: /\\)/,\n                        keywords: KEYWORDS,\n                        relevance: 0,\n                        contains: [\n                            ANNOTATION,\n                            hljs.APOS_STRING_MODE,\n                            hljs.QUOTE_STRING_MODE,\n                            NUMERIC,\n                            hljs.C_BLOCK_COMMENT_MODE\n                        ]\n                    },\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            NUMERIC,\n            ANNOTATION\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/java.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/javascript.js":
/*!**************************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/javascript.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ javascript)\n/* harmony export */ });\nconst IDENT_RE = \"[A-Za-z$_][0-9A-Za-z$_]*\";\nconst KEYWORDS = [\n    \"as\",\n    \"in\",\n    \"of\",\n    \"if\",\n    \"for\",\n    \"while\",\n    \"finally\",\n    \"var\",\n    \"new\",\n    \"function\",\n    \"do\",\n    \"return\",\n    \"void\",\n    \"else\",\n    \"break\",\n    \"catch\",\n    \"instanceof\",\n    \"with\",\n    \"throw\",\n    \"case\",\n    \"default\",\n    \"try\",\n    \"switch\",\n    \"continue\",\n    \"typeof\",\n    \"delete\",\n    \"let\",\n    \"yield\",\n    \"const\",\n    \"class\",\n    // JS handles these with a special rule\n    // \"get\",\n    // \"set\",\n    \"debugger\",\n    \"async\",\n    \"await\",\n    \"static\",\n    \"import\",\n    \"from\",\n    \"export\",\n    \"extends\",\n    // It's reached stage 3, which is \"recommended for implementation\":\n    \"using\"\n];\nconst LITERALS = [\n    \"true\",\n    \"false\",\n    \"null\",\n    \"undefined\",\n    \"NaN\",\n    \"Infinity\"\n];\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\nconst TYPES = [\n    // Fundamental objects\n    \"Object\",\n    \"Function\",\n    \"Boolean\",\n    \"Symbol\",\n    // numbers and dates\n    \"Math\",\n    \"Date\",\n    \"Number\",\n    \"BigInt\",\n    // text\n    \"String\",\n    \"RegExp\",\n    // Indexed collections\n    \"Array\",\n    \"Float32Array\",\n    \"Float64Array\",\n    \"Int8Array\",\n    \"Uint8Array\",\n    \"Uint8ClampedArray\",\n    \"Int16Array\",\n    \"Int32Array\",\n    \"Uint16Array\",\n    \"Uint32Array\",\n    \"BigInt64Array\",\n    \"BigUint64Array\",\n    // Keyed collections\n    \"Set\",\n    \"Map\",\n    \"WeakSet\",\n    \"WeakMap\",\n    // Structured data\n    \"ArrayBuffer\",\n    \"SharedArrayBuffer\",\n    \"Atomics\",\n    \"DataView\",\n    \"JSON\",\n    // Control abstraction objects\n    \"Promise\",\n    \"Generator\",\n    \"GeneratorFunction\",\n    \"AsyncFunction\",\n    // Reflection\n    \"Reflect\",\n    \"Proxy\",\n    // Internationalization\n    \"Intl\",\n    // WebAssembly\n    \"WebAssembly\"\n];\nconst ERROR_TYPES = [\n    \"Error\",\n    \"EvalError\",\n    \"InternalError\",\n    \"RangeError\",\n    \"ReferenceError\",\n    \"SyntaxError\",\n    \"TypeError\",\n    \"URIError\"\n];\nconst BUILT_IN_GLOBALS = [\n    \"setInterval\",\n    \"setTimeout\",\n    \"clearInterval\",\n    \"clearTimeout\",\n    \"require\",\n    \"exports\",\n    \"eval\",\n    \"isFinite\",\n    \"isNaN\",\n    \"parseFloat\",\n    \"parseInt\",\n    \"decodeURI\",\n    \"decodeURIComponent\",\n    \"encodeURI\",\n    \"encodeURIComponent\",\n    \"escape\",\n    \"unescape\"\n];\nconst BUILT_IN_VARIABLES = [\n    \"arguments\",\n    \"this\",\n    \"super\",\n    \"console\",\n    \"window\",\n    \"document\",\n    \"localStorage\",\n    \"sessionStorage\",\n    \"module\",\n    \"global\" // Node.js\n];\nconst BUILT_INS = [].concat(BUILT_IN_GLOBALS, TYPES, ERROR_TYPES);\n/*\nLanguage: JavaScript\nDescription: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.\nCategory: common, scripting, web\nWebsite: https://developer.mozilla.org/en-US/docs/Web/JavaScript\n*/ /** @type LanguageFn */ function javascript(hljs) {\n    const regex = hljs.regex;\n    /**\n   * Takes a string like \"<Booger\" and checks to see\n   * if we can find a matching \"</Booger\" later in the\n   * content.\n   * @param {RegExpMatchArray} match\n   * @param {{after:number}} param1\n   */ const hasClosingTag = (match, { after })=>{\n        const tag = \"</\" + match[0].slice(1);\n        const pos = match.input.indexOf(tag, after);\n        return pos !== -1;\n    };\n    const IDENT_RE$1 = IDENT_RE;\n    const FRAGMENT = {\n        begin: \"<>\",\n        end: \"</>\"\n    };\n    // to avoid some special cases inside isTrulyOpeningTag\n    const XML_SELF_CLOSING = /<[A-Za-z0-9\\\\._:-]+\\s*\\/>/;\n    const XML_TAG = {\n        begin: /<[A-Za-z0-9\\\\._:-]+/,\n        end: /\\/[A-Za-z0-9\\\\._:-]+>|\\/>/,\n        /**\n     * @param {RegExpMatchArray} match\n     * @param {CallbackResponse} response\n     */ isTrulyOpeningTag: (match, response)=>{\n            const afterMatchIndex = match[0].length + match.index;\n            const nextChar = match.input[afterMatchIndex];\n            if (// HTML should not include another raw `<` inside a tag\n            // nested type?\n            // `<Array<Array<number>>`, etc.\n            nextChar === \"<\" || // the , gives away that this is not HTML\n            // `<T, A extends keyof T, V>`\n            nextChar === \",\") {\n                response.ignoreMatch();\n                return;\n            }\n            // `<something>`\n            // Quite possibly a tag, lets look for a matching closing tag...\n            if (nextChar === \">\") {\n                // if we cannot find a matching closing tag, then we\n                // will ignore it\n                if (!hasClosingTag(match, {\n                    after: afterMatchIndex\n                })) {\n                    response.ignoreMatch();\n                }\n            }\n            // `<blah />` (self-closing)\n            // handled by simpleSelfClosing rule\n            let m;\n            const afterMatch = match.input.substring(afterMatchIndex);\n            // some more template typing stuff\n            //  <T = any>(key?: string) => Modify<\n            if (m = afterMatch.match(/^\\s*=/)) {\n                response.ignoreMatch();\n                return;\n            }\n            // `<From extends string>`\n            // technically this could be HTML, but it smells like a type\n            // NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276\n            if (m = afterMatch.match(/^\\s+extends\\s+/)) {\n                if (m.index === 0) {\n                    response.ignoreMatch();\n                    // eslint-disable-next-line no-useless-return\n                    return;\n                }\n            }\n        }\n    };\n    const KEYWORDS$1 = {\n        $pattern: IDENT_RE,\n        keyword: KEYWORDS,\n        literal: LITERALS,\n        built_in: BUILT_INS,\n        \"variable.language\": BUILT_IN_VARIABLES\n    };\n    // https://tc39.es/ecma262/#sec-literals-numeric-literals\n    const decimalDigits = \"[0-9](_?[0-9])*\";\n    const frac = `\\\\.(${decimalDigits})`;\n    // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral\n    // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n    const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;\n    const NUMBER = {\n        className: \"number\",\n        variants: [\n            // DecimalLiteral\n            {\n                begin: `(\\\\b(${decimalInteger})((${frac})|\\\\.)?|(${frac}))` + `[eE][+-]?(${decimalDigits})\\\\b`\n            },\n            {\n                begin: `\\\\b(${decimalInteger})\\\\b((${frac})\\\\b|\\\\.)?|(${frac})\\\\b`\n            },\n            // DecimalBigIntegerLiteral\n            {\n                begin: `\\\\b(0|[1-9](_?[0-9])*)n\\\\b`\n            },\n            // NonDecimalIntegerLiteral\n            {\n                begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[bB][0-1](_?[0-1])*n?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[oO][0-7](_?[0-7])*n?\\\\b\"\n            },\n            // LegacyOctalIntegerLiteral (does not include underscore separators)\n            // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n            {\n                begin: \"\\\\b0[0-7]+n?\\\\b\"\n            }\n        ],\n        relevance: 0\n    };\n    const SUBST = {\n        className: \"subst\",\n        begin: \"\\\\$\\\\{\",\n        end: \"\\\\}\",\n        keywords: KEYWORDS$1,\n        contains: [] // defined later\n    };\n    const HTML_TEMPLATE = {\n        begin: \".?html`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"xml\"\n        }\n    };\n    const CSS_TEMPLATE = {\n        begin: \".?css`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"css\"\n        }\n    };\n    const GRAPHQL_TEMPLATE = {\n        begin: \".?gql`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"graphql\"\n        }\n    };\n    const TEMPLATE_STRING = {\n        className: \"string\",\n        begin: \"`\",\n        end: \"`\",\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            SUBST\n        ]\n    };\n    const JSDOC_COMMENT = hljs.COMMENT(/\\/\\*\\*(?!\\/)/, \"\\\\*/\", {\n        relevance: 0,\n        contains: [\n            {\n                begin: \"(?=@[A-Za-z]+)\",\n                relevance: 0,\n                contains: [\n                    {\n                        className: \"doctag\",\n                        begin: \"@[A-Za-z]+\"\n                    },\n                    {\n                        className: \"type\",\n                        begin: \"\\\\{\",\n                        end: \"\\\\}\",\n                        excludeEnd: true,\n                        excludeBegin: true,\n                        relevance: 0\n                    },\n                    {\n                        className: \"variable\",\n                        begin: IDENT_RE$1 + \"(?=\\\\s*(-)|$)\",\n                        endsParent: true,\n                        relevance: 0\n                    },\n                    // eat spaces (not newlines) so we can find\n                    // types or variables\n                    {\n                        begin: /(?=[^\\n])\\s/,\n                        relevance: 0\n                    }\n                ]\n            }\n        ]\n    });\n    const COMMENT = {\n        className: \"comment\",\n        variants: [\n            JSDOC_COMMENT,\n            hljs.C_BLOCK_COMMENT_MODE,\n            hljs.C_LINE_COMMENT_MODE\n        ]\n    };\n    const SUBST_INTERNALS = [\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE,\n        HTML_TEMPLATE,\n        CSS_TEMPLATE,\n        GRAPHQL_TEMPLATE,\n        TEMPLATE_STRING,\n        // Skip numbers when they are part of a variable name\n        {\n            match: /\\$\\d+/\n        },\n        NUMBER\n    ];\n    SUBST.contains = SUBST_INTERNALS.concat({\n        // we need to pair up {} inside our subst to prevent\n        // it from ending too early by matching another }\n        begin: /\\{/,\n        end: /\\}/,\n        keywords: KEYWORDS$1,\n        contains: [\n            \"self\"\n        ].concat(SUBST_INTERNALS)\n    });\n    const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);\n    const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([\n        // eat recursive parens in sub expressions\n        {\n            begin: /(\\s*)\\(/,\n            end: /\\)/,\n            keywords: KEYWORDS$1,\n            contains: [\n                \"self\"\n            ].concat(SUBST_AND_COMMENTS)\n        }\n    ]);\n    const PARAMS = {\n        className: \"params\",\n        // convert this to negative lookbehind in v12\n        begin: /(\\s*)\\(/,\n        end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: KEYWORDS$1,\n        contains: PARAMS_CONTAINS\n    };\n    // ES6 classes\n    const CLASS_OR_EXTENDS = {\n        variants: [\n            // class Car extends vehicle\n            {\n                match: [\n                    /class/,\n                    /\\s+/,\n                    IDENT_RE$1,\n                    /\\s+/,\n                    /extends/,\n                    /\\s+/,\n                    regex.concat(IDENT_RE$1, \"(\", regex.concat(/\\./, IDENT_RE$1), \")*\")\n                ],\n                scope: {\n                    1: \"keyword\",\n                    3: \"title.class\",\n                    5: \"keyword\",\n                    7: \"title.class.inherited\"\n                }\n            },\n            // class Car\n            {\n                match: [\n                    /class/,\n                    /\\s+/,\n                    IDENT_RE$1\n                ],\n                scope: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                }\n            }\n        ]\n    };\n    const CLASS_REFERENCE = {\n        relevance: 0,\n        match: regex.either(// Hard coded exceptions\n        /\\bJSON/, // Float32Array, OutT\n        /\\b[A-Z][a-z]+([A-Z][a-z]*|\\d)*/, // CSSFactory, CSSFactoryT\n        /\\b[A-Z]{2,}([A-Z][a-z]+|\\d)+([A-Z][a-z]*)*/, // FPs, FPsT\n        /\\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\\d)*([A-Z][a-z]*)*/),\n        className: \"title.class\",\n        keywords: {\n            _: [\n                // se we still get relevance credit for JS library classes\n                ...TYPES,\n                ...ERROR_TYPES\n            ]\n        }\n    };\n    const USE_STRICT = {\n        label: \"use_strict\",\n        className: \"meta\",\n        relevance: 10,\n        begin: /^\\s*['\"]use (strict|asm)['\"]/\n    };\n    const FUNCTION_DEFINITION = {\n        variants: [\n            {\n                match: [\n                    /function/,\n                    /\\s+/,\n                    IDENT_RE$1,\n                    /(?=\\s*\\()/\n                ]\n            },\n            // anonymous function\n            {\n                match: [\n                    /function/,\n                    /\\s*(?=\\()/\n                ]\n            }\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        label: \"func.def\",\n        contains: [\n            PARAMS\n        ],\n        illegal: /%/\n    };\n    const UPPER_CASE_CONSTANT = {\n        relevance: 0,\n        match: /\\b[A-Z][A-Z_0-9]+\\b/,\n        className: \"variable.constant\"\n    };\n    function noneOf(list) {\n        return regex.concat(\"(?!\", list.join(\"|\"), \")\");\n    }\n    const FUNCTION_CALL = {\n        match: regex.concat(/\\b/, noneOf([\n            ...BUILT_IN_GLOBALS,\n            \"super\",\n            \"import\"\n        ].map((x)=>`${x}\\\\s*\\\\(`)), IDENT_RE$1, regex.lookahead(/\\s*\\(/)),\n        className: \"title.function\",\n        relevance: 0\n    };\n    const PROPERTY_ACCESS = {\n        begin: regex.concat(/\\./, regex.lookahead(regex.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/))),\n        end: IDENT_RE$1,\n        excludeBegin: true,\n        keywords: \"prototype\",\n        className: \"property\",\n        relevance: 0\n    };\n    const GETTER_OR_SETTER = {\n        match: [\n            /get|set/,\n            /\\s+/,\n            IDENT_RE$1,\n            /(?=\\()/\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        contains: [\n            {\n                begin: /\\(\\)/\n            },\n            PARAMS\n        ]\n    };\n    const FUNC_LEAD_IN_RE = \"(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*\" + \"\\\\)[^()]*)*\" + \"\\\\)[^()]*)*\" + \"\\\\)|\" + hljs.UNDERSCORE_IDENT_RE + \")\\\\s*=>\";\n    const FUNCTION_VARIABLE = {\n        match: [\n            /const|var|let/,\n            /\\s+/,\n            IDENT_RE$1,\n            /\\s*/,\n            /=\\s*/,\n            /(async\\s*)?/,\n            regex.lookahead(FUNC_LEAD_IN_RE)\n        ],\n        keywords: \"async\",\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        contains: [\n            PARAMS\n        ]\n    };\n    return {\n        name: \"JavaScript\",\n        aliases: [\n            \"js\",\n            \"jsx\",\n            \"mjs\",\n            \"cjs\"\n        ],\n        keywords: KEYWORDS$1,\n        // this will be extended by TypeScript\n        exports: {\n            PARAMS_CONTAINS,\n            CLASS_REFERENCE\n        },\n        illegal: /#(?![$_A-z])/,\n        contains: [\n            hljs.SHEBANG({\n                label: \"shebang\",\n                binary: \"node\",\n                relevance: 5\n            }),\n            USE_STRICT,\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE,\n            HTML_TEMPLATE,\n            CSS_TEMPLATE,\n            GRAPHQL_TEMPLATE,\n            TEMPLATE_STRING,\n            COMMENT,\n            // Skip numbers when they are part of a variable name\n            {\n                match: /\\$\\d+/\n            },\n            NUMBER,\n            CLASS_REFERENCE,\n            {\n                scope: \"attr\",\n                match: IDENT_RE$1 + regex.lookahead(\":\"),\n                relevance: 0\n            },\n            FUNCTION_VARIABLE,\n            {\n                begin: \"(\" + hljs.RE_STARTERS_RE + \"|\\\\b(case|return|throw)\\\\b)\\\\s*\",\n                keywords: \"return throw case\",\n                relevance: 0,\n                contains: [\n                    COMMENT,\n                    hljs.REGEXP_MODE,\n                    {\n                        className: \"function\",\n                        // we have to count the parens to make sure we actually have the\n                        // correct bounding ( ) before the =>.  There could be any number of\n                        // sub-expressions inside also surrounded by parens.\n                        begin: FUNC_LEAD_IN_RE,\n                        returnBegin: true,\n                        end: \"\\\\s*=>\",\n                        contains: [\n                            {\n                                className: \"params\",\n                                variants: [\n                                    {\n                                        begin: hljs.UNDERSCORE_IDENT_RE,\n                                        relevance: 0\n                                    },\n                                    {\n                                        className: null,\n                                        begin: /\\(\\s*\\)/,\n                                        skip: true\n                                    },\n                                    {\n                                        begin: /(\\s*)\\(/,\n                                        end: /\\)/,\n                                        excludeBegin: true,\n                                        excludeEnd: true,\n                                        keywords: KEYWORDS$1,\n                                        contains: PARAMS_CONTAINS\n                                    }\n                                ]\n                            }\n                        ]\n                    },\n                    {\n                        begin: /,/,\n                        relevance: 0\n                    },\n                    {\n                        match: /\\s+/,\n                        relevance: 0\n                    },\n                    {\n                        variants: [\n                            {\n                                begin: FRAGMENT.begin,\n                                end: FRAGMENT.end\n                            },\n                            {\n                                match: XML_SELF_CLOSING\n                            },\n                            {\n                                begin: XML_TAG.begin,\n                                // we carefully check the opening tag to see if it truly\n                                // is a tag and not a false positive\n                                \"on:begin\": XML_TAG.isTrulyOpeningTag,\n                                end: XML_TAG.end\n                            }\n                        ],\n                        subLanguage: \"xml\",\n                        contains: [\n                            {\n                                begin: XML_TAG.begin,\n                                end: XML_TAG.end,\n                                skip: true,\n                                contains: [\n                                    \"self\"\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            },\n            FUNCTION_DEFINITION,\n            {\n                // prevent this from getting swallowed up by function\n                // since they appear \"function like\"\n                beginKeywords: \"while if switch catch for\"\n            },\n            {\n                // we have to count the parens to make sure we actually have the correct\n                // bounding ( ).  There could be any number of sub-expressions inside\n                // also surrounded by parens.\n                begin: \"\\\\b(?!function)\" + hljs.UNDERSCORE_IDENT_RE + \"\\\\(\" + // first parens\n                \"[^()]*(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*\" + \"\\\\)[^()]*)*\" + \"\\\\)[^()]*)*\" + \"\\\\)\\\\s*\\\\{\",\n                returnBegin: true,\n                label: \"func.def\",\n                contains: [\n                    PARAMS,\n                    hljs.inherit(hljs.TITLE_MODE, {\n                        begin: IDENT_RE$1,\n                        className: \"title.function\"\n                    })\n                ]\n            },\n            // catch ... so it won't trigger the property rule below\n            {\n                match: /\\.\\.\\./,\n                relevance: 0\n            },\n            PROPERTY_ACCESS,\n            // hack: prevents detection of keywords in some circumstances\n            // .keyword()\n            // $keyword = x\n            {\n                match: \"\\\\$\" + IDENT_RE$1,\n                relevance: 0\n            },\n            {\n                match: [\n                    /\\bconstructor(?=\\s*\\()/\n                ],\n                className: {\n                    1: \"title.function\"\n                },\n                contains: [\n                    PARAMS\n                ]\n            },\n            FUNCTION_CALL,\n            UPPER_CASE_CONSTANT,\n            CLASS_OR_EXTENDS,\n            GETTER_OR_SETTER,\n            {\n                match: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/javascript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/json.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/json.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ json)\n/* harmony export */ });\n/*\nLanguage: JSON\nDescription: JSON (JavaScript Object Notation) is a lightweight data-interchange format.\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nWebsite: http://www.json.org\nCategory: common, protocols, web\n*/ function json(hljs) {\n    const ATTRIBUTE = {\n        className: \"attr\",\n        begin: /\"(\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n        relevance: 1.01\n    };\n    const PUNCTUATION = {\n        match: /[{}[\\],:]/,\n        className: \"punctuation\",\n        relevance: 0\n    };\n    const LITERALS = [\n        \"true\",\n        \"false\",\n        \"null\"\n    ];\n    // NOTE: normally we would rely on `keywords` for this but using a mode here allows us\n    // - to use the very tight `illegal: \\S` rule later to flag any other character\n    // - as illegal indicating that despite looking like JSON we do not truly have\n    // - JSON and thus improve false-positively greatly since JSON will try and claim\n    // - all sorts of JSON looking stuff\n    const LITERALS_MODE = {\n        scope: \"literal\",\n        beginKeywords: LITERALS.join(\" \")\n    };\n    return {\n        name: \"JSON\",\n        aliases: [\n            \"jsonc\"\n        ],\n        keywords: {\n            literal: LITERALS\n        },\n        contains: [\n            ATTRIBUTE,\n            PUNCTUATION,\n            hljs.QUOTE_STRING_MODE,\n            LITERALS_MODE,\n            hljs.C_NUMBER_MODE,\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE\n        ],\n        illegal: \"\\\\S\"\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9qc29uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7O0FBTUEsR0FFQSxTQUFTQSxLQUFLQyxJQUFJO0lBQ2hCLE1BQU1DLFlBQVk7UUFDaEJDLFdBQVc7UUFDWEMsT0FBTztRQUNQQyxXQUFXO0lBQ2I7SUFDQSxNQUFNQyxjQUFjO1FBQ2xCQyxPQUFPO1FBQ1BKLFdBQVc7UUFDWEUsV0FBVztJQUNiO0lBQ0EsTUFBTUcsV0FBVztRQUNmO1FBQ0E7UUFDQTtLQUNEO0lBQ0Qsc0ZBQXNGO0lBQ3RGLCtFQUErRTtJQUMvRSw4RUFBOEU7SUFDOUUsaUZBQWlGO0lBQ2pGLG9DQUFvQztJQUNwQyxNQUFNQyxnQkFBZ0I7UUFDcEJDLE9BQU87UUFDUEMsZUFBZUgsU0FBU0ksSUFBSSxDQUFDO0lBQy9CO0lBRUEsT0FBTztRQUNMQyxNQUFNO1FBQ05DLFNBQVM7WUFBQztTQUFRO1FBQ2xCQyxVQUFTO1lBQ1BDLFNBQVNSO1FBQ1g7UUFDQVMsVUFBVTtZQUNSZjtZQUNBSTtZQUNBTCxLQUFLaUIsaUJBQWlCO1lBQ3RCVDtZQUNBUixLQUFLa0IsYUFBYTtZQUNsQmxCLEtBQUttQixtQkFBbUI7WUFDeEJuQixLQUFLb0Isb0JBQW9CO1NBQzFCO1FBQ0RDLFNBQVM7SUFDWDtBQUNGO0FBRTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb21uaS1jaGF0LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9lcy9sYW5ndWFnZXMvanNvbi5qcz9mYmE5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogSlNPTlxuRGVzY3JpcHRpb246IEpTT04gKEphdmFTY3JpcHQgT2JqZWN0IE5vdGF0aW9uKSBpcyBhIGxpZ2h0d2VpZ2h0IGRhdGEtaW50ZXJjaGFuZ2UgZm9ybWF0LlxuQXV0aG9yOiBJdmFuIFNhZ2FsYWV2IDxtYW5pYWNAc29mdHdhcmVtYW5pYWNzLm9yZz5cbldlYnNpdGU6IGh0dHA6Ly93d3cuanNvbi5vcmdcbkNhdGVnb3J5OiBjb21tb24sIHByb3RvY29scywgd2ViXG4qL1xuXG5mdW5jdGlvbiBqc29uKGhsanMpIHtcbiAgY29uc3QgQVRUUklCVVRFID0ge1xuICAgIGNsYXNzTmFtZTogJ2F0dHInLFxuICAgIGJlZ2luOiAvXCIoXFxcXC58W15cXFxcXCJcXHJcXG5dKSpcIig/PVxccyo6KS8sXG4gICAgcmVsZXZhbmNlOiAxLjAxXG4gIH07XG4gIGNvbnN0IFBVTkNUVUFUSU9OID0ge1xuICAgIG1hdGNoOiAvW3t9W1xcXSw6XS8sXG4gICAgY2xhc3NOYW1lOiBcInB1bmN0dWF0aW9uXCIsXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07XG4gIGNvbnN0IExJVEVSQUxTID0gW1xuICAgIFwidHJ1ZVwiLFxuICAgIFwiZmFsc2VcIixcbiAgICBcIm51bGxcIlxuICBdO1xuICAvLyBOT1RFOiBub3JtYWxseSB3ZSB3b3VsZCByZWx5IG9uIGBrZXl3b3Jkc2AgZm9yIHRoaXMgYnV0IHVzaW5nIGEgbW9kZSBoZXJlIGFsbG93cyB1c1xuICAvLyAtIHRvIHVzZSB0aGUgdmVyeSB0aWdodCBgaWxsZWdhbDogXFxTYCBydWxlIGxhdGVyIHRvIGZsYWcgYW55IG90aGVyIGNoYXJhY3RlclxuICAvLyAtIGFzIGlsbGVnYWwgaW5kaWNhdGluZyB0aGF0IGRlc3BpdGUgbG9va2luZyBsaWtlIEpTT04gd2UgZG8gbm90IHRydWx5IGhhdmVcbiAgLy8gLSBKU09OIGFuZCB0aHVzIGltcHJvdmUgZmFsc2UtcG9zaXRpdmVseSBncmVhdGx5IHNpbmNlIEpTT04gd2lsbCB0cnkgYW5kIGNsYWltXG4gIC8vIC0gYWxsIHNvcnRzIG9mIEpTT04gbG9va2luZyBzdHVmZlxuICBjb25zdCBMSVRFUkFMU19NT0RFID0ge1xuICAgIHNjb3BlOiBcImxpdGVyYWxcIixcbiAgICBiZWdpbktleXdvcmRzOiBMSVRFUkFMUy5qb2luKFwiIFwiKSxcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdKU09OJyxcbiAgICBhbGlhc2VzOiBbJ2pzb25jJ10sXG4gICAga2V5d29yZHM6e1xuICAgICAgbGl0ZXJhbDogTElURVJBTFMsXG4gICAgfSxcbiAgICBjb250YWluczogW1xuICAgICAgQVRUUklCVVRFLFxuICAgICAgUFVOQ1RVQVRJT04sXG4gICAgICBobGpzLlFVT1RFX1NUUklOR19NT0RFLFxuICAgICAgTElURVJBTFNfTU9ERSxcbiAgICAgIGhsanMuQ19OVU1CRVJfTU9ERSxcbiAgICAgIGhsanMuQ19MSU5FX0NPTU1FTlRfTU9ERSxcbiAgICAgIGhsanMuQ19CTE9DS19DT01NRU5UX01PREVcbiAgICBdLFxuICAgIGlsbGVnYWw6ICdcXFxcUydcbiAgfTtcbn1cblxuZXhwb3J0IHsganNvbiBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsianNvbiIsImhsanMiLCJBVFRSSUJVVEUiLCJjbGFzc05hbWUiLCJiZWdpbiIsInJlbGV2YW5jZSIsIlBVTkNUVUFUSU9OIiwibWF0Y2giLCJMSVRFUkFMUyIsIkxJVEVSQUxTX01PREUiLCJzY29wZSIsImJlZ2luS2V5d29yZHMiLCJqb2luIiwibmFtZSIsImFsaWFzZXMiLCJrZXl3b3JkcyIsImxpdGVyYWwiLCJjb250YWlucyIsIlFVT1RFX1NUUklOR19NT0RFIiwiQ19OVU1CRVJfTU9ERSIsIkNfTElORV9DT01NRU5UX01PREUiLCJDX0JMT0NLX0NPTU1FTlRfTU9ERSIsImlsbGVnYWwiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/json.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/kotlin.js":
/*!**********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/kotlin.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ kotlin)\n/* harmony export */ });\n// https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10\nvar decimalDigits = \"[0-9](_*[0-9])*\";\nvar frac = `\\\\.(${decimalDigits})`;\nvar hexDigits = \"[0-9a-fA-F](_*[0-9a-fA-F])*\";\nvar NUMERIC = {\n    className: \"number\",\n    variants: [\n        // DecimalFloatingPointLiteral\n        // including ExponentPart\n        {\n            begin: `(\\\\b(${decimalDigits})((${frac})|\\\\.)?|(${frac}))` + `[eE][+-]?(${decimalDigits})[fFdD]?\\\\b`\n        },\n        // excluding ExponentPart\n        {\n            begin: `\\\\b(${decimalDigits})((${frac})[fFdD]?\\\\b|\\\\.([fFdD]\\\\b)?)`\n        },\n        {\n            begin: `(${frac})[fFdD]?\\\\b`\n        },\n        {\n            begin: `\\\\b(${decimalDigits})[fFdD]\\\\b`\n        },\n        // HexadecimalFloatingPointLiteral\n        {\n            begin: `\\\\b0[xX]((${hexDigits})\\\\.?|(${hexDigits})?\\\\.(${hexDigits}))` + `[pP][+-]?(${decimalDigits})[fFdD]?\\\\b`\n        },\n        // DecimalIntegerLiteral\n        {\n            begin: \"\\\\b(0|[1-9](_*[0-9])*)[lL]?\\\\b\"\n        },\n        // HexIntegerLiteral\n        {\n            begin: `\\\\b0[xX](${hexDigits})[lL]?\\\\b`\n        },\n        // OctalIntegerLiteral\n        {\n            begin: \"\\\\b0(_*[0-7])*[lL]?\\\\b\"\n        },\n        // BinaryIntegerLiteral\n        {\n            begin: \"\\\\b0[bB][01](_*[01])*[lL]?\\\\b\"\n        }\n    ],\n    relevance: 0\n};\n/*\n Language: Kotlin\n Description: Kotlin is an OSS statically typed programming language that targets the JVM, Android, JavaScript and Native.\n Author: Sergey Mashkov <cy6erGn0m@gmail.com>\n Website: https://kotlinlang.org\n Category: common\n */ function kotlin(hljs) {\n    const KEYWORDS = {\n        keyword: \"abstract as val var vararg get set class object open private protected public noinline \" + \"crossinline dynamic final enum if else do while for when throw try catch finally \" + \"import package is in fun override companion reified inline lateinit init \" + \"interface annotation data sealed internal infix operator out by constructor super \" + \"tailrec where const inner suspend typealias external expect actual\",\n        built_in: \"Byte Short Char Int Long Boolean Float Double Void Unit Nothing\",\n        literal: \"true false null\"\n    };\n    const KEYWORDS_WITH_LABEL = {\n        className: \"keyword\",\n        begin: /\\b(break|continue|return|this)\\b/,\n        starts: {\n            contains: [\n                {\n                    className: \"symbol\",\n                    begin: /@\\w+/\n                }\n            ]\n        }\n    };\n    const LABEL = {\n        className: \"symbol\",\n        begin: hljs.UNDERSCORE_IDENT_RE + \"@\"\n    };\n    // for string templates\n    const SUBST = {\n        className: \"subst\",\n        begin: /\\$\\{/,\n        end: /\\}/,\n        contains: [\n            hljs.C_NUMBER_MODE\n        ]\n    };\n    const VARIABLE = {\n        className: \"variable\",\n        begin: \"\\\\$\" + hljs.UNDERSCORE_IDENT_RE\n    };\n    const STRING = {\n        className: \"string\",\n        variants: [\n            {\n                begin: '\"\"\"',\n                end: '\"\"\"(?=[^\"])',\n                contains: [\n                    VARIABLE,\n                    SUBST\n                ]\n            },\n            // Can't use built-in modes easily, as we want to use STRING in the meta\n            // context as 'meta-string' and there's no syntax to remove explicitly set\n            // classNames in built-in modes.\n            {\n                begin: \"'\",\n                end: \"'\",\n                illegal: /\\n/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ]\n            },\n            {\n                begin: '\"',\n                end: '\"',\n                illegal: /\\n/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    VARIABLE,\n                    SUBST\n                ]\n            }\n        ]\n    };\n    SUBST.contains.push(STRING);\n    const ANNOTATION_USE_SITE = {\n        className: \"meta\",\n        begin: \"@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\\\s*:(?:\\\\s*\" + hljs.UNDERSCORE_IDENT_RE + \")?\"\n    };\n    const ANNOTATION = {\n        className: \"meta\",\n        begin: \"@\" + hljs.UNDERSCORE_IDENT_RE,\n        contains: [\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                contains: [\n                    hljs.inherit(STRING, {\n                        className: \"string\"\n                    }),\n                    \"self\"\n                ]\n            }\n        ]\n    };\n    // https://kotlinlang.org/docs/reference/whatsnew11.html#underscores-in-numeric-literals\n    // According to the doc above, the number mode of kotlin is the same as java 8,\n    // so the code below is copied from java.js\n    const KOTLIN_NUMBER_MODE = NUMERIC;\n    const KOTLIN_NESTED_COMMENT = hljs.COMMENT(\"/\\\\*\", \"\\\\*/\", {\n        contains: [\n            hljs.C_BLOCK_COMMENT_MODE\n        ]\n    });\n    const KOTLIN_PAREN_TYPE = {\n        variants: [\n            {\n                className: \"type\",\n                begin: hljs.UNDERSCORE_IDENT_RE\n            },\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                contains: [] // defined later\n            }\n        ]\n    };\n    const KOTLIN_PAREN_TYPE2 = KOTLIN_PAREN_TYPE;\n    KOTLIN_PAREN_TYPE2.variants[1].contains = [\n        KOTLIN_PAREN_TYPE\n    ];\n    KOTLIN_PAREN_TYPE.variants[1].contains = [\n        KOTLIN_PAREN_TYPE2\n    ];\n    return {\n        name: \"Kotlin\",\n        aliases: [\n            \"kt\",\n            \"kts\"\n        ],\n        keywords: KEYWORDS,\n        contains: [\n            hljs.COMMENT(\"/\\\\*\\\\*\", \"\\\\*/\", {\n                relevance: 0,\n                contains: [\n                    {\n                        className: \"doctag\",\n                        begin: \"@[A-Za-z]+\"\n                    }\n                ]\n            }),\n            hljs.C_LINE_COMMENT_MODE,\n            KOTLIN_NESTED_COMMENT,\n            KEYWORDS_WITH_LABEL,\n            LABEL,\n            ANNOTATION_USE_SITE,\n            ANNOTATION,\n            {\n                className: \"function\",\n                beginKeywords: \"fun\",\n                end: \"[(]|$\",\n                returnBegin: true,\n                excludeEnd: true,\n                keywords: KEYWORDS,\n                relevance: 5,\n                contains: [\n                    {\n                        begin: hljs.UNDERSCORE_IDENT_RE + \"\\\\s*\\\\(\",\n                        returnBegin: true,\n                        relevance: 0,\n                        contains: [\n                            hljs.UNDERSCORE_TITLE_MODE\n                        ]\n                    },\n                    {\n                        className: \"type\",\n                        begin: /</,\n                        end: />/,\n                        keywords: \"reified\",\n                        relevance: 0\n                    },\n                    {\n                        className: \"params\",\n                        begin: /\\(/,\n                        end: /\\)/,\n                        endsParent: true,\n                        keywords: KEYWORDS,\n                        relevance: 0,\n                        contains: [\n                            {\n                                begin: /:/,\n                                end: /[=,\\/]/,\n                                endsWithParent: true,\n                                contains: [\n                                    KOTLIN_PAREN_TYPE,\n                                    hljs.C_LINE_COMMENT_MODE,\n                                    KOTLIN_NESTED_COMMENT\n                                ],\n                                relevance: 0\n                            },\n                            hljs.C_LINE_COMMENT_MODE,\n                            KOTLIN_NESTED_COMMENT,\n                            ANNOTATION_USE_SITE,\n                            ANNOTATION,\n                            STRING,\n                            hljs.C_NUMBER_MODE\n                        ]\n                    },\n                    KOTLIN_NESTED_COMMENT\n                ]\n            },\n            {\n                begin: [\n                    /class|interface|trait/,\n                    /\\s+/,\n                    hljs.UNDERSCORE_IDENT_RE\n                ],\n                beginScope: {\n                    3: \"title.class\"\n                },\n                keywords: \"class interface trait\",\n                end: /[:\\{(]|$/,\n                excludeEnd: true,\n                illegal: \"extends implements\",\n                contains: [\n                    {\n                        beginKeywords: \"public protected internal private constructor\"\n                    },\n                    hljs.UNDERSCORE_TITLE_MODE,\n                    {\n                        className: \"type\",\n                        begin: /</,\n                        end: />/,\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        relevance: 0\n                    },\n                    {\n                        className: \"type\",\n                        begin: /[,:]\\s*/,\n                        end: /[<\\(,){\\s]|$/,\n                        excludeBegin: true,\n                        returnEnd: true\n                    },\n                    ANNOTATION_USE_SITE,\n                    ANNOTATION\n                ]\n            },\n            STRING,\n            {\n                className: \"meta\",\n                begin: \"^#!/usr/bin/env\",\n                end: \"$\",\n                illegal: \"\\n\"\n            },\n            KOTLIN_NUMBER_MODE\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/kotlin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/less.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/less.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ less)\n/* harmony export */ });\nconst MODES = (hljs)=>{\n    return {\n        IMPORTANT: {\n            scope: \"meta\",\n            begin: \"!important\"\n        },\n        BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,\n        HEXCOLOR: {\n            scope: \"number\",\n            begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\\b/\n        },\n        FUNCTION_DISPATCH: {\n            className: \"built_in\",\n            begin: /[\\w-]+(?=\\()/\n        },\n        ATTRIBUTE_SELECTOR_MODE: {\n            scope: \"selector-attr\",\n            begin: /\\[/,\n            end: /\\]/,\n            illegal: \"$\",\n            contains: [\n                hljs.APOS_STRING_MODE,\n                hljs.QUOTE_STRING_MODE\n            ]\n        },\n        CSS_NUMBER_MODE: {\n            scope: \"number\",\n            begin: hljs.NUMBER_RE + \"(\" + \"%|em|ex|ch|rem\" + \"|vw|vh|vmin|vmax\" + \"|cm|mm|in|pt|pc|px\" + \"|deg|grad|rad|turn\" + \"|s|ms\" + \"|Hz|kHz\" + \"|dpi|dpcm|dppx\" + \")?\",\n            relevance: 0\n        },\n        CSS_VARIABLE: {\n            className: \"attr\",\n            begin: /--[A-Za-z_][A-Za-z0-9_-]*/\n        }\n    };\n};\nconst HTML_TAGS = [\n    \"a\",\n    \"abbr\",\n    \"address\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"b\",\n    \"blockquote\",\n    \"body\",\n    \"button\",\n    \"canvas\",\n    \"caption\",\n    \"cite\",\n    \"code\",\n    \"dd\",\n    \"del\",\n    \"details\",\n    \"dfn\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"em\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"header\",\n    \"hgroup\",\n    \"html\",\n    \"i\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"main\",\n    \"mark\",\n    \"menu\",\n    \"nav\",\n    \"object\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"p\",\n    \"picture\",\n    \"q\",\n    \"quote\",\n    \"samp\",\n    \"section\",\n    \"select\",\n    \"source\",\n    \"span\",\n    \"strong\",\n    \"summary\",\n    \"sup\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"time\",\n    \"tr\",\n    \"ul\",\n    \"var\",\n    \"video\"\n];\nconst SVG_TAGS = [\n    \"defs\",\n    \"g\",\n    \"marker\",\n    \"mask\",\n    \"pattern\",\n    \"svg\",\n    \"switch\",\n    \"symbol\",\n    \"feBlend\",\n    \"feColorMatrix\",\n    \"feComponentTransfer\",\n    \"feComposite\",\n    \"feConvolveMatrix\",\n    \"feDiffuseLighting\",\n    \"feDisplacementMap\",\n    \"feFlood\",\n    \"feGaussianBlur\",\n    \"feImage\",\n    \"feMerge\",\n    \"feMorphology\",\n    \"feOffset\",\n    \"feSpecularLighting\",\n    \"feTile\",\n    \"feTurbulence\",\n    \"linearGradient\",\n    \"radialGradient\",\n    \"stop\",\n    \"circle\",\n    \"ellipse\",\n    \"image\",\n    \"line\",\n    \"path\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"text\",\n    \"use\",\n    \"textPath\",\n    \"tspan\",\n    \"foreignObject\",\n    \"clipPath\"\n];\nconst TAGS = [\n    ...HTML_TAGS,\n    ...SVG_TAGS\n];\n// Sorting, then reversing makes sure longer attributes/elements like\n// `font-weight` are matched fully instead of getting false positives on say `font`\nconst MEDIA_FEATURES = [\n    \"any-hover\",\n    \"any-pointer\",\n    \"aspect-ratio\",\n    \"color\",\n    \"color-gamut\",\n    \"color-index\",\n    \"device-aspect-ratio\",\n    \"device-height\",\n    \"device-width\",\n    \"display-mode\",\n    \"forced-colors\",\n    \"grid\",\n    \"height\",\n    \"hover\",\n    \"inverted-colors\",\n    \"monochrome\",\n    \"orientation\",\n    \"overflow-block\",\n    \"overflow-inline\",\n    \"pointer\",\n    \"prefers-color-scheme\",\n    \"prefers-contrast\",\n    \"prefers-reduced-motion\",\n    \"prefers-reduced-transparency\",\n    \"resolution\",\n    \"scan\",\n    \"scripting\",\n    \"update\",\n    \"width\",\n    // TODO: find a better solution?\n    \"min-width\",\n    \"max-width\",\n    \"min-height\",\n    \"max-height\"\n].sort().reverse();\n// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\nconst PSEUDO_CLASSES = [\n    \"active\",\n    \"any-link\",\n    \"blank\",\n    \"checked\",\n    \"current\",\n    \"default\",\n    \"defined\",\n    \"dir\",\n    \"disabled\",\n    \"drop\",\n    \"empty\",\n    \"enabled\",\n    \"first\",\n    \"first-child\",\n    \"first-of-type\",\n    \"fullscreen\",\n    \"future\",\n    \"focus\",\n    \"focus-visible\",\n    \"focus-within\",\n    \"has\",\n    \"host\",\n    \"host-context\",\n    \"hover\",\n    \"indeterminate\",\n    \"in-range\",\n    \"invalid\",\n    \"is\",\n    \"lang\",\n    \"last-child\",\n    \"last-of-type\",\n    \"left\",\n    \"link\",\n    \"local-link\",\n    \"not\",\n    \"nth-child\",\n    \"nth-col\",\n    \"nth-last-child\",\n    \"nth-last-col\",\n    \"nth-last-of-type\",\n    \"nth-of-type\",\n    \"only-child\",\n    \"only-of-type\",\n    \"optional\",\n    \"out-of-range\",\n    \"past\",\n    \"placeholder-shown\",\n    \"read-only\",\n    \"read-write\",\n    \"required\",\n    \"right\",\n    \"root\",\n    \"scope\",\n    \"target\",\n    \"target-within\",\n    \"user-invalid\",\n    \"valid\",\n    \"visited\",\n    \"where\" // where()\n].sort().reverse();\n// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements\nconst PSEUDO_ELEMENTS = [\n    \"after\",\n    \"backdrop\",\n    \"before\",\n    \"cue\",\n    \"cue-region\",\n    \"first-letter\",\n    \"first-line\",\n    \"grammar-error\",\n    \"marker\",\n    \"part\",\n    \"placeholder\",\n    \"selection\",\n    \"slotted\",\n    \"spelling-error\"\n].sort().reverse();\nconst ATTRIBUTES = [\n    \"accent-color\",\n    \"align-content\",\n    \"align-items\",\n    \"align-self\",\n    \"alignment-baseline\",\n    \"all\",\n    \"anchor-name\",\n    \"animation\",\n    \"animation-composition\",\n    \"animation-delay\",\n    \"animation-direction\",\n    \"animation-duration\",\n    \"animation-fill-mode\",\n    \"animation-iteration-count\",\n    \"animation-name\",\n    \"animation-play-state\",\n    \"animation-range\",\n    \"animation-range-end\",\n    \"animation-range-start\",\n    \"animation-timeline\",\n    \"animation-timing-function\",\n    \"appearance\",\n    \"aspect-ratio\",\n    \"backdrop-filter\",\n    \"backface-visibility\",\n    \"background\",\n    \"background-attachment\",\n    \"background-blend-mode\",\n    \"background-clip\",\n    \"background-color\",\n    \"background-image\",\n    \"background-origin\",\n    \"background-position\",\n    \"background-position-x\",\n    \"background-position-y\",\n    \"background-repeat\",\n    \"background-size\",\n    \"baseline-shift\",\n    \"block-size\",\n    \"border\",\n    \"border-block\",\n    \"border-block-color\",\n    \"border-block-end\",\n    \"border-block-end-color\",\n    \"border-block-end-style\",\n    \"border-block-end-width\",\n    \"border-block-start\",\n    \"border-block-start-color\",\n    \"border-block-start-style\",\n    \"border-block-start-width\",\n    \"border-block-style\",\n    \"border-block-width\",\n    \"border-bottom\",\n    \"border-bottom-color\",\n    \"border-bottom-left-radius\",\n    \"border-bottom-right-radius\",\n    \"border-bottom-style\",\n    \"border-bottom-width\",\n    \"border-collapse\",\n    \"border-color\",\n    \"border-end-end-radius\",\n    \"border-end-start-radius\",\n    \"border-image\",\n    \"border-image-outset\",\n    \"border-image-repeat\",\n    \"border-image-slice\",\n    \"border-image-source\",\n    \"border-image-width\",\n    \"border-inline\",\n    \"border-inline-color\",\n    \"border-inline-end\",\n    \"border-inline-end-color\",\n    \"border-inline-end-style\",\n    \"border-inline-end-width\",\n    \"border-inline-start\",\n    \"border-inline-start-color\",\n    \"border-inline-start-style\",\n    \"border-inline-start-width\",\n    \"border-inline-style\",\n    \"border-inline-width\",\n    \"border-left\",\n    \"border-left-color\",\n    \"border-left-style\",\n    \"border-left-width\",\n    \"border-radius\",\n    \"border-right\",\n    \"border-right-color\",\n    \"border-right-style\",\n    \"border-right-width\",\n    \"border-spacing\",\n    \"border-start-end-radius\",\n    \"border-start-start-radius\",\n    \"border-style\",\n    \"border-top\",\n    \"border-top-color\",\n    \"border-top-left-radius\",\n    \"border-top-right-radius\",\n    \"border-top-style\",\n    \"border-top-width\",\n    \"border-width\",\n    \"bottom\",\n    \"box-align\",\n    \"box-decoration-break\",\n    \"box-direction\",\n    \"box-flex\",\n    \"box-flex-group\",\n    \"box-lines\",\n    \"box-ordinal-group\",\n    \"box-orient\",\n    \"box-pack\",\n    \"box-shadow\",\n    \"box-sizing\",\n    \"break-after\",\n    \"break-before\",\n    \"break-inside\",\n    \"caption-side\",\n    \"caret-color\",\n    \"clear\",\n    \"clip\",\n    \"clip-path\",\n    \"clip-rule\",\n    \"color\",\n    \"color-interpolation\",\n    \"color-interpolation-filters\",\n    \"color-profile\",\n    \"color-rendering\",\n    \"color-scheme\",\n    \"column-count\",\n    \"column-fill\",\n    \"column-gap\",\n    \"column-rule\",\n    \"column-rule-color\",\n    \"column-rule-style\",\n    \"column-rule-width\",\n    \"column-span\",\n    \"column-width\",\n    \"columns\",\n    \"contain\",\n    \"contain-intrinsic-block-size\",\n    \"contain-intrinsic-height\",\n    \"contain-intrinsic-inline-size\",\n    \"contain-intrinsic-size\",\n    \"contain-intrinsic-width\",\n    \"container\",\n    \"container-name\",\n    \"container-type\",\n    \"content\",\n    \"content-visibility\",\n    \"counter-increment\",\n    \"counter-reset\",\n    \"counter-set\",\n    \"cue\",\n    \"cue-after\",\n    \"cue-before\",\n    \"cursor\",\n    \"cx\",\n    \"cy\",\n    \"direction\",\n    \"display\",\n    \"dominant-baseline\",\n    \"empty-cells\",\n    \"enable-background\",\n    \"field-sizing\",\n    \"fill\",\n    \"fill-opacity\",\n    \"fill-rule\",\n    \"filter\",\n    \"flex\",\n    \"flex-basis\",\n    \"flex-direction\",\n    \"flex-flow\",\n    \"flex-grow\",\n    \"flex-shrink\",\n    \"flex-wrap\",\n    \"float\",\n    \"flood-color\",\n    \"flood-opacity\",\n    \"flow\",\n    \"font\",\n    \"font-display\",\n    \"font-family\",\n    \"font-feature-settings\",\n    \"font-kerning\",\n    \"font-language-override\",\n    \"font-optical-sizing\",\n    \"font-palette\",\n    \"font-size\",\n    \"font-size-adjust\",\n    \"font-smooth\",\n    \"font-smoothing\",\n    \"font-stretch\",\n    \"font-style\",\n    \"font-synthesis\",\n    \"font-synthesis-position\",\n    \"font-synthesis-small-caps\",\n    \"font-synthesis-style\",\n    \"font-synthesis-weight\",\n    \"font-variant\",\n    \"font-variant-alternates\",\n    \"font-variant-caps\",\n    \"font-variant-east-asian\",\n    \"font-variant-emoji\",\n    \"font-variant-ligatures\",\n    \"font-variant-numeric\",\n    \"font-variant-position\",\n    \"font-variation-settings\",\n    \"font-weight\",\n    \"forced-color-adjust\",\n    \"gap\",\n    \"glyph-orientation-horizontal\",\n    \"glyph-orientation-vertical\",\n    \"grid\",\n    \"grid-area\",\n    \"grid-auto-columns\",\n    \"grid-auto-flow\",\n    \"grid-auto-rows\",\n    \"grid-column\",\n    \"grid-column-end\",\n    \"grid-column-start\",\n    \"grid-gap\",\n    \"grid-row\",\n    \"grid-row-end\",\n    \"grid-row-start\",\n    \"grid-template\",\n    \"grid-template-areas\",\n    \"grid-template-columns\",\n    \"grid-template-rows\",\n    \"hanging-punctuation\",\n    \"height\",\n    \"hyphenate-character\",\n    \"hyphenate-limit-chars\",\n    \"hyphens\",\n    \"icon\",\n    \"image-orientation\",\n    \"image-rendering\",\n    \"image-resolution\",\n    \"ime-mode\",\n    \"initial-letter\",\n    \"initial-letter-align\",\n    \"inline-size\",\n    \"inset\",\n    \"inset-area\",\n    \"inset-block\",\n    \"inset-block-end\",\n    \"inset-block-start\",\n    \"inset-inline\",\n    \"inset-inline-end\",\n    \"inset-inline-start\",\n    \"isolation\",\n    \"justify-content\",\n    \"justify-items\",\n    \"justify-self\",\n    \"kerning\",\n    \"left\",\n    \"letter-spacing\",\n    \"lighting-color\",\n    \"line-break\",\n    \"line-height\",\n    \"line-height-step\",\n    \"list-style\",\n    \"list-style-image\",\n    \"list-style-position\",\n    \"list-style-type\",\n    \"margin\",\n    \"margin-block\",\n    \"margin-block-end\",\n    \"margin-block-start\",\n    \"margin-bottom\",\n    \"margin-inline\",\n    \"margin-inline-end\",\n    \"margin-inline-start\",\n    \"margin-left\",\n    \"margin-right\",\n    \"margin-top\",\n    \"margin-trim\",\n    \"marker\",\n    \"marker-end\",\n    \"marker-mid\",\n    \"marker-start\",\n    \"marks\",\n    \"mask\",\n    \"mask-border\",\n    \"mask-border-mode\",\n    \"mask-border-outset\",\n    \"mask-border-repeat\",\n    \"mask-border-slice\",\n    \"mask-border-source\",\n    \"mask-border-width\",\n    \"mask-clip\",\n    \"mask-composite\",\n    \"mask-image\",\n    \"mask-mode\",\n    \"mask-origin\",\n    \"mask-position\",\n    \"mask-repeat\",\n    \"mask-size\",\n    \"mask-type\",\n    \"masonry-auto-flow\",\n    \"math-depth\",\n    \"math-shift\",\n    \"math-style\",\n    \"max-block-size\",\n    \"max-height\",\n    \"max-inline-size\",\n    \"max-width\",\n    \"min-block-size\",\n    \"min-height\",\n    \"min-inline-size\",\n    \"min-width\",\n    \"mix-blend-mode\",\n    \"nav-down\",\n    \"nav-index\",\n    \"nav-left\",\n    \"nav-right\",\n    \"nav-up\",\n    \"none\",\n    \"normal\",\n    \"object-fit\",\n    \"object-position\",\n    \"offset\",\n    \"offset-anchor\",\n    \"offset-distance\",\n    \"offset-path\",\n    \"offset-position\",\n    \"offset-rotate\",\n    \"opacity\",\n    \"order\",\n    \"orphans\",\n    \"outline\",\n    \"outline-color\",\n    \"outline-offset\",\n    \"outline-style\",\n    \"outline-width\",\n    \"overflow\",\n    \"overflow-anchor\",\n    \"overflow-block\",\n    \"overflow-clip-margin\",\n    \"overflow-inline\",\n    \"overflow-wrap\",\n    \"overflow-x\",\n    \"overflow-y\",\n    \"overlay\",\n    \"overscroll-behavior\",\n    \"overscroll-behavior-block\",\n    \"overscroll-behavior-inline\",\n    \"overscroll-behavior-x\",\n    \"overscroll-behavior-y\",\n    \"padding\",\n    \"padding-block\",\n    \"padding-block-end\",\n    \"padding-block-start\",\n    \"padding-bottom\",\n    \"padding-inline\",\n    \"padding-inline-end\",\n    \"padding-inline-start\",\n    \"padding-left\",\n    \"padding-right\",\n    \"padding-top\",\n    \"page\",\n    \"page-break-after\",\n    \"page-break-before\",\n    \"page-break-inside\",\n    \"paint-order\",\n    \"pause\",\n    \"pause-after\",\n    \"pause-before\",\n    \"perspective\",\n    \"perspective-origin\",\n    \"place-content\",\n    \"place-items\",\n    \"place-self\",\n    \"pointer-events\",\n    \"position\",\n    \"position-anchor\",\n    \"position-visibility\",\n    \"print-color-adjust\",\n    \"quotes\",\n    \"r\",\n    \"resize\",\n    \"rest\",\n    \"rest-after\",\n    \"rest-before\",\n    \"right\",\n    \"rotate\",\n    \"row-gap\",\n    \"ruby-align\",\n    \"ruby-position\",\n    \"scale\",\n    \"scroll-behavior\",\n    \"scroll-margin\",\n    \"scroll-margin-block\",\n    \"scroll-margin-block-end\",\n    \"scroll-margin-block-start\",\n    \"scroll-margin-bottom\",\n    \"scroll-margin-inline\",\n    \"scroll-margin-inline-end\",\n    \"scroll-margin-inline-start\",\n    \"scroll-margin-left\",\n    \"scroll-margin-right\",\n    \"scroll-margin-top\",\n    \"scroll-padding\",\n    \"scroll-padding-block\",\n    \"scroll-padding-block-end\",\n    \"scroll-padding-block-start\",\n    \"scroll-padding-bottom\",\n    \"scroll-padding-inline\",\n    \"scroll-padding-inline-end\",\n    \"scroll-padding-inline-start\",\n    \"scroll-padding-left\",\n    \"scroll-padding-right\",\n    \"scroll-padding-top\",\n    \"scroll-snap-align\",\n    \"scroll-snap-stop\",\n    \"scroll-snap-type\",\n    \"scroll-timeline\",\n    \"scroll-timeline-axis\",\n    \"scroll-timeline-name\",\n    \"scrollbar-color\",\n    \"scrollbar-gutter\",\n    \"scrollbar-width\",\n    \"shape-image-threshold\",\n    \"shape-margin\",\n    \"shape-outside\",\n    \"shape-rendering\",\n    \"speak\",\n    \"speak-as\",\n    \"src\",\n    \"stop-color\",\n    \"stop-opacity\",\n    \"stroke\",\n    \"stroke-dasharray\",\n    \"stroke-dashoffset\",\n    \"stroke-linecap\",\n    \"stroke-linejoin\",\n    \"stroke-miterlimit\",\n    \"stroke-opacity\",\n    \"stroke-width\",\n    \"tab-size\",\n    \"table-layout\",\n    \"text-align\",\n    \"text-align-all\",\n    \"text-align-last\",\n    \"text-anchor\",\n    \"text-combine-upright\",\n    \"text-decoration\",\n    \"text-decoration-color\",\n    \"text-decoration-line\",\n    \"text-decoration-skip\",\n    \"text-decoration-skip-ink\",\n    \"text-decoration-style\",\n    \"text-decoration-thickness\",\n    \"text-emphasis\",\n    \"text-emphasis-color\",\n    \"text-emphasis-position\",\n    \"text-emphasis-style\",\n    \"text-indent\",\n    \"text-justify\",\n    \"text-orientation\",\n    \"text-overflow\",\n    \"text-rendering\",\n    \"text-shadow\",\n    \"text-size-adjust\",\n    \"text-transform\",\n    \"text-underline-offset\",\n    \"text-underline-position\",\n    \"text-wrap\",\n    \"text-wrap-mode\",\n    \"text-wrap-style\",\n    \"timeline-scope\",\n    \"top\",\n    \"touch-action\",\n    \"transform\",\n    \"transform-box\",\n    \"transform-origin\",\n    \"transform-style\",\n    \"transition\",\n    \"transition-behavior\",\n    \"transition-delay\",\n    \"transition-duration\",\n    \"transition-property\",\n    \"transition-timing-function\",\n    \"translate\",\n    \"unicode-bidi\",\n    \"user-modify\",\n    \"user-select\",\n    \"vector-effect\",\n    \"vertical-align\",\n    \"view-timeline\",\n    \"view-timeline-axis\",\n    \"view-timeline-inset\",\n    \"view-timeline-name\",\n    \"view-transition-name\",\n    \"visibility\",\n    \"voice-balance\",\n    \"voice-duration\",\n    \"voice-family\",\n    \"voice-pitch\",\n    \"voice-range\",\n    \"voice-rate\",\n    \"voice-stress\",\n    \"voice-volume\",\n    \"white-space\",\n    \"white-space-collapse\",\n    \"widows\",\n    \"width\",\n    \"will-change\",\n    \"word-break\",\n    \"word-spacing\",\n    \"word-wrap\",\n    \"writing-mode\",\n    \"x\",\n    \"y\",\n    \"z-index\",\n    \"zoom\"\n].sort().reverse();\n// some grammars use them all as a single group\nconst PSEUDO_SELECTORS = PSEUDO_CLASSES.concat(PSEUDO_ELEMENTS).sort().reverse();\n/*\nLanguage: Less\nDescription: It's CSS, with just a little more.\nAuthor:   Max Mikhailov <seven.phases.max@gmail.com>\nWebsite: http://lesscss.org\nCategory: common, css, web\n*/ /** @type LanguageFn */ function less(hljs) {\n    const modes = MODES(hljs);\n    const PSEUDO_SELECTORS$1 = PSEUDO_SELECTORS;\n    const AT_MODIFIERS = \"and or not only\";\n    const IDENT_RE = \"[\\\\w-]+\"; // yes, Less identifiers may begin with a digit\n    const INTERP_IDENT_RE = \"(\" + IDENT_RE + \"|@\\\\{\" + IDENT_RE + \"\\\\})\";\n    /* Generic Modes */ const RULES = [];\n    const VALUE_MODES = []; // forward def. for recursive modes\n    const STRING_MODE = function(c) {\n        return {\n            // Less strings are not multiline (also include '~' for more consistent coloring of \"escaped\" strings)\n            className: \"string\",\n            begin: \"~?\" + c + \".*?\" + c\n        };\n    };\n    const IDENT_MODE = function(name, begin, relevance) {\n        return {\n            className: name,\n            begin: begin,\n            relevance: relevance\n        };\n    };\n    const AT_KEYWORDS = {\n        $pattern: /[a-z-]+/,\n        keyword: AT_MODIFIERS,\n        attribute: MEDIA_FEATURES.join(\" \")\n    };\n    const PARENS_MODE = {\n        // used only to properly balance nested parens inside mixin call, def. arg list\n        begin: \"\\\\(\",\n        end: \"\\\\)\",\n        contains: VALUE_MODES,\n        keywords: AT_KEYWORDS,\n        relevance: 0\n    };\n    // generic Less highlighter (used almost everywhere except selectors):\n    VALUE_MODES.push(hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRING_MODE(\"'\"), STRING_MODE('\"'), modes.CSS_NUMBER_MODE, {\n        begin: \"(url|data-uri)\\\\(\",\n        starts: {\n            className: \"string\",\n            end: \"[\\\\)\\\\n]\",\n            excludeEnd: true\n        }\n    }, modes.HEXCOLOR, PARENS_MODE, IDENT_MODE(\"variable\", \"@@?\" + IDENT_RE, 10), IDENT_MODE(\"variable\", \"@\\\\{\" + IDENT_RE + \"\\\\}\"), IDENT_MODE(\"built_in\", \"~?`[^`]*?`\"), {\n        className: \"attribute\",\n        begin: IDENT_RE + \"\\\\s*:\",\n        end: \":\",\n        returnBegin: true,\n        excludeEnd: true\n    }, modes.IMPORTANT, {\n        beginKeywords: \"and not\"\n    }, modes.FUNCTION_DISPATCH);\n    const VALUE_WITH_RULESETS = VALUE_MODES.concat({\n        begin: /\\{/,\n        end: /\\}/,\n        contains: RULES\n    });\n    const MIXIN_GUARD_MODE = {\n        beginKeywords: \"when\",\n        endsWithParent: true,\n        contains: [\n            {\n                beginKeywords: \"and not\"\n            }\n        ].concat(VALUE_MODES) // using this form to override VALUE’s 'function' match\n    };\n    /* Rule-Level Modes */ const RULE_MODE = {\n        begin: INTERP_IDENT_RE + \"\\\\s*:\",\n        returnBegin: true,\n        end: /[;}]/,\n        relevance: 0,\n        contains: [\n            {\n                begin: /-(webkit|moz|ms|o)-/\n            },\n            modes.CSS_VARIABLE,\n            {\n                className: \"attribute\",\n                begin: \"\\\\b(\" + ATTRIBUTES.join(\"|\") + \")\\\\b\",\n                end: /(?=:)/,\n                starts: {\n                    endsWithParent: true,\n                    illegal: \"[<=$]\",\n                    relevance: 0,\n                    contains: VALUE_MODES\n                }\n            }\n        ]\n    };\n    const AT_RULE_MODE = {\n        className: \"keyword\",\n        begin: \"@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\\\b\",\n        starts: {\n            end: \"[;{}]\",\n            keywords: AT_KEYWORDS,\n            returnEnd: true,\n            contains: VALUE_MODES,\n            relevance: 0\n        }\n    };\n    // variable definitions and calls\n    const VAR_RULE_MODE = {\n        className: \"variable\",\n        variants: [\n            // using more strict pattern for higher relevance to increase chances of Less detection.\n            // this is *the only* Less specific statement used in most of the sources, so...\n            // (we’ll still often loose to the css-parser unless there's '//' comment,\n            // simply because 1 variable just can't beat 99 properties :)\n            {\n                begin: \"@\" + IDENT_RE + \"\\\\s*:\",\n                relevance: 15\n            },\n            {\n                begin: \"@\" + IDENT_RE\n            }\n        ],\n        starts: {\n            end: \"[;}]\",\n            returnEnd: true,\n            contains: VALUE_WITH_RULESETS\n        }\n    };\n    const SELECTOR_MODE = {\n        // first parse unambiguous selectors (i.e. those not starting with tag)\n        // then fall into the scary lookahead-discriminator variant.\n        // this mode also handles mixin definitions and calls\n        variants: [\n            {\n                begin: \"[\\\\.#:&\\\\[>]\",\n                end: \"[;{}]\" // mixin calls end with ';'\n            },\n            {\n                begin: INTERP_IDENT_RE,\n                end: /\\{/\n            }\n        ],\n        returnBegin: true,\n        returnEnd: true,\n        illegal: \"[<='$\\\"]\",\n        relevance: 0,\n        contains: [\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            MIXIN_GUARD_MODE,\n            IDENT_MODE(\"keyword\", \"all\\\\b\"),\n            IDENT_MODE(\"variable\", \"@\\\\{\" + IDENT_RE + \"\\\\}\"),\n            {\n                begin: \"\\\\b(\" + TAGS.join(\"|\") + \")\\\\b\",\n                className: \"selector-tag\"\n            },\n            modes.CSS_NUMBER_MODE,\n            IDENT_MODE(\"selector-tag\", INTERP_IDENT_RE, 0),\n            IDENT_MODE(\"selector-id\", \"#\" + INTERP_IDENT_RE),\n            IDENT_MODE(\"selector-class\", \"\\\\.\" + INTERP_IDENT_RE, 0),\n            IDENT_MODE(\"selector-tag\", \"&\", 0),\n            modes.ATTRIBUTE_SELECTOR_MODE,\n            {\n                className: \"selector-pseudo\",\n                begin: \":(\" + PSEUDO_CLASSES.join(\"|\") + \")\"\n            },\n            {\n                className: \"selector-pseudo\",\n                begin: \":(:)?(\" + PSEUDO_ELEMENTS.join(\"|\") + \")\"\n            },\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                relevance: 0,\n                contains: VALUE_WITH_RULESETS\n            },\n            {\n                begin: \"!important\"\n            },\n            modes.FUNCTION_DISPATCH\n        ]\n    };\n    const PSEUDO_SELECTOR_MODE = {\n        begin: IDENT_RE + \":(:)?\" + `(${PSEUDO_SELECTORS$1.join(\"|\")})`,\n        returnBegin: true,\n        contains: [\n            SELECTOR_MODE\n        ]\n    };\n    RULES.push(hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, AT_RULE_MODE, VAR_RULE_MODE, PSEUDO_SELECTOR_MODE, RULE_MODE, SELECTOR_MODE, MIXIN_GUARD_MODE, modes.FUNCTION_DISPATCH);\n    return {\n        name: \"Less\",\n        case_insensitive: true,\n        illegal: \"[=>'/<($\\\"]\",\n        contains: RULES\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9sZXNzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxRQUFRLENBQUNDO0lBQ2IsT0FBTztRQUNMQyxXQUFXO1lBQ1RDLE9BQU87WUFDUEMsT0FBTztRQUNUO1FBQ0FDLGVBQWVKLEtBQUtLLG9CQUFvQjtRQUN4Q0MsVUFBVTtZQUNSSixPQUFPO1lBQ1BDLE9BQU87UUFDVDtRQUNBSSxtQkFBbUI7WUFDakJDLFdBQVc7WUFDWEwsT0FBTztRQUNUO1FBQ0FNLHlCQUF5QjtZQUN2QlAsT0FBTztZQUNQQyxPQUFPO1lBQ1BPLEtBQUs7WUFDTEMsU0FBUztZQUNUQyxVQUFVO2dCQUNSWixLQUFLYSxnQkFBZ0I7Z0JBQ3JCYixLQUFLYyxpQkFBaUI7YUFDdkI7UUFDSDtRQUNBQyxpQkFBaUI7WUFDZmIsT0FBTztZQUNQQyxPQUFPSCxLQUFLZ0IsU0FBUyxHQUFHLE1BQ3RCLG1CQUNBLHFCQUNBLHVCQUNBLHVCQUNBLFVBQ0EsWUFDQSxtQkFDQTtZQUNGQyxXQUFXO1FBQ2I7UUFDQUMsY0FBYztZQUNaVixXQUFXO1lBQ1hMLE9BQU87UUFDVDtJQUNGO0FBQ0Y7QUFFQSxNQUFNZ0IsWUFBWTtJQUNoQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0Q7QUFFRCxNQUFNQyxXQUFXO0lBQ2Y7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNEO0FBRUQsTUFBTUMsT0FBTztPQUNSRjtPQUNBQztDQUNKO0FBRUQscUVBQXFFO0FBQ3JFLG1GQUFtRjtBQUVuRixNQUFNRSxpQkFBaUI7SUFDckI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBLGdDQUFnQztJQUNoQztJQUNBO0lBQ0E7SUFDQTtDQUNELENBQUNDLElBQUksR0FBR0MsT0FBTztBQUVoQixrRUFBa0U7QUFDbEUsTUFBTUMsaUJBQWlCO0lBQ3JCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0EsUUFBUSxVQUFVO0NBQ25CLENBQUNGLElBQUksR0FBR0MsT0FBTztBQUVoQixtRUFBbUU7QUFDbkUsTUFBTUUsa0JBQWtCO0lBQ3RCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRCxDQUFDSCxJQUFJLEdBQUdDLE9BQU87QUFFaEIsTUFBTUcsYUFBYTtJQUNqQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNELENBQUNKLElBQUksR0FBR0MsT0FBTztBQUVoQiwrQ0FBK0M7QUFDL0MsTUFBTUksbUJBQW1CSCxlQUFlSSxNQUFNLENBQUNILGlCQUFpQkgsSUFBSSxHQUFHQyxPQUFPO0FBRTlFOzs7Ozs7QUFNQSxHQUdBLHFCQUFxQixHQUNyQixTQUFTTSxLQUFLOUIsSUFBSTtJQUNoQixNQUFNK0IsUUFBUWhDLE1BQU1DO0lBQ3BCLE1BQU1nQyxxQkFBcUJKO0lBRTNCLE1BQU1LLGVBQWU7SUFDckIsTUFBTUMsV0FBVyxXQUFXLCtDQUErQztJQUMzRSxNQUFNQyxrQkFBa0IsTUFBTUQsV0FBVyxVQUFVQSxXQUFXO0lBRTlELGlCQUFpQixHQUVqQixNQUFNRSxRQUFRLEVBQUU7SUFBRSxNQUFNQyxjQUFjLEVBQUUsRUFBRSxtQ0FBbUM7SUFFN0UsTUFBTUMsY0FBYyxTQUFTQyxDQUFDO1FBQzVCLE9BQU87WUFDUCxzR0FBc0c7WUFDcEcvQixXQUFXO1lBQ1hMLE9BQU8sT0FBT29DLElBQUksUUFBUUE7UUFDNUI7SUFDRjtJQUVBLE1BQU1DLGFBQWEsU0FBU0MsSUFBSSxFQUFFdEMsS0FBSyxFQUFFYyxTQUFTO1FBQ2hELE9BQU87WUFDTFQsV0FBV2lDO1lBQ1h0QyxPQUFPQTtZQUNQYyxXQUFXQTtRQUNiO0lBQ0Y7SUFFQSxNQUFNeUIsY0FBYztRQUNsQkMsVUFBVTtRQUNWQyxTQUFTWDtRQUNUWSxXQUFXdkIsZUFBZXdCLElBQUksQ0FBQztJQUNqQztJQUVBLE1BQU1DLGNBQWM7UUFDbEIsK0VBQStFO1FBQy9FNUMsT0FBTztRQUNQTyxLQUFLO1FBQ0xFLFVBQVV5QjtRQUNWVyxVQUFVTjtRQUNWekIsV0FBVztJQUNiO0lBRUEsc0VBQXNFO0lBQ3RFb0IsWUFBWVksSUFBSSxDQUNkakQsS0FBS2tELG1CQUFtQixFQUN4QmxELEtBQUtLLG9CQUFvQixFQUN6QmlDLFlBQVksTUFDWkEsWUFBWSxNQUNaUCxNQUFNaEIsZUFBZSxFQUNyQjtRQUNFWixPQUFPO1FBQ1BnRCxRQUFRO1lBQ04zQyxXQUFXO1lBQ1hFLEtBQUs7WUFDTDBDLFlBQVk7UUFDZDtJQUNGLEdBQ0FyQixNQUFNekIsUUFBUSxFQUNkeUMsYUFDQVAsV0FBVyxZQUFZLFFBQVFOLFVBQVUsS0FDekNNLFdBQVcsWUFBWSxTQUFTTixXQUFXLFFBQzNDTSxXQUFXLFlBQVksZUFDdkI7UUFDRWhDLFdBQVc7UUFDWEwsT0FBTytCLFdBQVc7UUFDbEJ4QixLQUFLO1FBQ0wyQyxhQUFhO1FBQ2JELFlBQVk7SUFDZCxHQUNBckIsTUFBTTlCLFNBQVMsRUFDZjtRQUFFcUQsZUFBZTtJQUFVLEdBQzNCdkIsTUFBTXhCLGlCQUFpQjtJQUd6QixNQUFNZ0Qsc0JBQXNCbEIsWUFBWVIsTUFBTSxDQUFDO1FBQzdDMUIsT0FBTztRQUNQTyxLQUFLO1FBQ0xFLFVBQVV3QjtJQUNaO0lBRUEsTUFBTW9CLG1CQUFtQjtRQUN2QkYsZUFBZTtRQUNmRyxnQkFBZ0I7UUFDaEI3QyxVQUFVO1lBQUU7Z0JBQUUwQyxlQUFlO1lBQVU7U0FBRyxDQUFDekIsTUFBTSxDQUFDUSxhQUFhLHVEQUF1RDtJQUN4SDtJQUVBLG9CQUFvQixHQUVwQixNQUFNcUIsWUFBWTtRQUNoQnZELE9BQU9nQyxrQkFBa0I7UUFDekJrQixhQUFhO1FBQ2IzQyxLQUFLO1FBQ0xPLFdBQVc7UUFDWEwsVUFBVTtZQUNSO2dCQUFFVCxPQUFPO1lBQXNCO1lBQy9CNEIsTUFBTWIsWUFBWTtZQUNsQjtnQkFDRVYsV0FBVztnQkFDWEwsT0FBTyxTQUFTd0IsV0FBV21CLElBQUksQ0FBQyxPQUFPO2dCQUN2Q3BDLEtBQUs7Z0JBQ0x5QyxRQUFRO29CQUNOTSxnQkFBZ0I7b0JBQ2hCOUMsU0FBUztvQkFDVE0sV0FBVztvQkFDWEwsVUFBVXlCO2dCQUNaO1lBQ0Y7U0FDRDtJQUNIO0lBRUEsTUFBTXNCLGVBQWU7UUFDbkJuRCxXQUFXO1FBQ1hMLE9BQU87UUFDUGdELFFBQVE7WUFDTnpDLEtBQUs7WUFDTHNDLFVBQVVOO1lBQ1ZrQixXQUFXO1lBQ1hoRCxVQUFVeUI7WUFDVnBCLFdBQVc7UUFDYjtJQUNGO0lBRUEsaUNBQWlDO0lBQ2pDLE1BQU00QyxnQkFBZ0I7UUFDcEJyRCxXQUFXO1FBQ1hzRCxVQUFVO1lBQ1Isd0ZBQXdGO1lBQ3hGLGdGQUFnRjtZQUNoRiwwRUFBMEU7WUFDMUUsNkRBQTZEO1lBQzdEO2dCQUNFM0QsT0FBTyxNQUFNK0IsV0FBVztnQkFDeEJqQixXQUFXO1lBQ2I7WUFDQTtnQkFBRWQsT0FBTyxNQUFNK0I7WUFBUztTQUN6QjtRQUNEaUIsUUFBUTtZQUNOekMsS0FBSztZQUNMa0QsV0FBVztZQUNYaEQsVUFBVTJDO1FBQ1o7SUFDRjtJQUVBLE1BQU1RLGdCQUFnQjtRQUNwQix1RUFBdUU7UUFDdkUsNERBQTREO1FBQzVELHFEQUFxRDtRQUNyREQsVUFBVTtZQUNSO2dCQUNFM0QsT0FBTztnQkFDUE8sS0FBSyxRQUFRLDJCQUEyQjtZQUMxQztZQUNBO2dCQUNFUCxPQUFPZ0M7Z0JBQ1B6QixLQUFLO1lBQ1A7U0FDRDtRQUNEMkMsYUFBYTtRQUNiTyxXQUFXO1FBQ1hqRCxTQUFTO1FBQ1RNLFdBQVc7UUFDWEwsVUFBVTtZQUNSWixLQUFLa0QsbUJBQW1CO1lBQ3hCbEQsS0FBS0ssb0JBQW9CO1lBQ3pCbUQ7WUFDQWhCLFdBQVcsV0FBVztZQUN0QkEsV0FBVyxZQUFZLFNBQVNOLFdBQVc7WUFFM0M7Z0JBQ0UvQixPQUFPLFNBQVNrQixLQUFLeUIsSUFBSSxDQUFDLE9BQU87Z0JBQ2pDdEMsV0FBVztZQUNiO1lBQ0F1QixNQUFNaEIsZUFBZTtZQUNyQnlCLFdBQVcsZ0JBQWdCTCxpQkFBaUI7WUFDNUNLLFdBQVcsZUFBZSxNQUFNTDtZQUNoQ0ssV0FBVyxrQkFBa0IsUUFBUUwsaUJBQWlCO1lBQ3RESyxXQUFXLGdCQUFnQixLQUFLO1lBQ2hDVCxNQUFNdEIsdUJBQXVCO1lBQzdCO2dCQUNFRCxXQUFXO2dCQUNYTCxPQUFPLE9BQU9zQixlQUFlcUIsSUFBSSxDQUFDLE9BQU87WUFDM0M7WUFDQTtnQkFDRXRDLFdBQVc7Z0JBQ1hMLE9BQU8sV0FBV3VCLGdCQUFnQm9CLElBQUksQ0FBQyxPQUFPO1lBQ2hEO1lBQ0E7Z0JBQ0UzQyxPQUFPO2dCQUNQTyxLQUFLO2dCQUNMTyxXQUFXO2dCQUNYTCxVQUFVMkM7WUFDWjtZQUNBO2dCQUFFcEQsT0FBTztZQUFhO1lBQ3RCNEIsTUFBTXhCLGlCQUFpQjtTQUN4QjtJQUNIO0lBRUEsTUFBTXlELHVCQUF1QjtRQUMzQjdELE9BQU8rQixXQUFXLFVBQVUsQ0FBQyxDQUFDLEVBQUVGLG1CQUFtQmMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9ETyxhQUFhO1FBQ2J6QyxVQUFVO1lBQUVtRDtTQUFlO0lBQzdCO0lBRUEzQixNQUFNYSxJQUFJLENBQ1JqRCxLQUFLa0QsbUJBQW1CLEVBQ3hCbEQsS0FBS0ssb0JBQW9CLEVBQ3pCc0QsY0FDQUUsZUFDQUcsc0JBQ0FOLFdBQ0FLLGVBQ0FQLGtCQUNBekIsTUFBTXhCLGlCQUFpQjtJQUd6QixPQUFPO1FBQ0xrQyxNQUFNO1FBQ053QixrQkFBa0I7UUFDbEJ0RCxTQUFTO1FBQ1RDLFVBQVV3QjtJQUNaO0FBQ0Y7QUFFMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbW5pLWNoYXQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9sZXNzLmpzPzg2NWUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTU9ERVMgPSAoaGxqcykgPT4ge1xuICByZXR1cm4ge1xuICAgIElNUE9SVEFOVDoge1xuICAgICAgc2NvcGU6ICdtZXRhJyxcbiAgICAgIGJlZ2luOiAnIWltcG9ydGFudCdcbiAgICB9LFxuICAgIEJMT0NLX0NPTU1FTlQ6IGhsanMuQ19CTE9DS19DT01NRU5UX01PREUsXG4gICAgSEVYQ09MT1I6IHtcbiAgICAgIHNjb3BlOiAnbnVtYmVyJyxcbiAgICAgIGJlZ2luOiAvIygoWzAtOWEtZkEtRl17Myw0fSl8KChbMC05YS1mQS1GXXsyfSl7Myw0fSkpXFxiL1xuICAgIH0sXG4gICAgRlVOQ1RJT05fRElTUEFUQ0g6IHtcbiAgICAgIGNsYXNzTmFtZTogXCJidWlsdF9pblwiLFxuICAgICAgYmVnaW46IC9bXFx3LV0rKD89XFwoKS9cbiAgICB9LFxuICAgIEFUVFJJQlVURV9TRUxFQ1RPUl9NT0RFOiB7XG4gICAgICBzY29wZTogJ3NlbGVjdG9yLWF0dHInLFxuICAgICAgYmVnaW46IC9cXFsvLFxuICAgICAgZW5kOiAvXFxdLyxcbiAgICAgIGlsbGVnYWw6ICckJyxcbiAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgIGhsanMuQVBPU19TVFJJTkdfTU9ERSxcbiAgICAgICAgaGxqcy5RVU9URV9TVFJJTkdfTU9ERVxuICAgICAgXVxuICAgIH0sXG4gICAgQ1NTX05VTUJFUl9NT0RFOiB7XG4gICAgICBzY29wZTogJ251bWJlcicsXG4gICAgICBiZWdpbjogaGxqcy5OVU1CRVJfUkUgKyAnKCcgK1xuICAgICAgICAnJXxlbXxleHxjaHxyZW0nICtcbiAgICAgICAgJ3x2d3x2aHx2bWlufHZtYXgnICtcbiAgICAgICAgJ3xjbXxtbXxpbnxwdHxwY3xweCcgK1xuICAgICAgICAnfGRlZ3xncmFkfHJhZHx0dXJuJyArXG4gICAgICAgICd8c3xtcycgK1xuICAgICAgICAnfEh6fGtIeicgK1xuICAgICAgICAnfGRwaXxkcGNtfGRwcHgnICtcbiAgICAgICAgJyk/JyxcbiAgICAgIHJlbGV2YW5jZTogMFxuICAgIH0sXG4gICAgQ1NTX1ZBUklBQkxFOiB7XG4gICAgICBjbGFzc05hbWU6IFwiYXR0clwiLFxuICAgICAgYmVnaW46IC8tLVtBLVphLXpfXVtBLVphLXowLTlfLV0qL1xuICAgIH1cbiAgfTtcbn07XG5cbmNvbnN0IEhUTUxfVEFHUyA9IFtcbiAgJ2EnLFxuICAnYWJicicsXG4gICdhZGRyZXNzJyxcbiAgJ2FydGljbGUnLFxuICAnYXNpZGUnLFxuICAnYXVkaW8nLFxuICAnYicsXG4gICdibG9ja3F1b3RlJyxcbiAgJ2JvZHknLFxuICAnYnV0dG9uJyxcbiAgJ2NhbnZhcycsXG4gICdjYXB0aW9uJyxcbiAgJ2NpdGUnLFxuICAnY29kZScsXG4gICdkZCcsXG4gICdkZWwnLFxuICAnZGV0YWlscycsXG4gICdkZm4nLFxuICAnZGl2JyxcbiAgJ2RsJyxcbiAgJ2R0JyxcbiAgJ2VtJyxcbiAgJ2ZpZWxkc2V0JyxcbiAgJ2ZpZ2NhcHRpb24nLFxuICAnZmlndXJlJyxcbiAgJ2Zvb3RlcicsXG4gICdmb3JtJyxcbiAgJ2gxJyxcbiAgJ2gyJyxcbiAgJ2gzJyxcbiAgJ2g0JyxcbiAgJ2g1JyxcbiAgJ2g2JyxcbiAgJ2hlYWRlcicsXG4gICdoZ3JvdXAnLFxuICAnaHRtbCcsXG4gICdpJyxcbiAgJ2lmcmFtZScsXG4gICdpbWcnLFxuICAnaW5wdXQnLFxuICAnaW5zJyxcbiAgJ2tiZCcsXG4gICdsYWJlbCcsXG4gICdsZWdlbmQnLFxuICAnbGknLFxuICAnbWFpbicsXG4gICdtYXJrJyxcbiAgJ21lbnUnLFxuICAnbmF2JyxcbiAgJ29iamVjdCcsXG4gICdvbCcsXG4gICdvcHRncm91cCcsXG4gICdvcHRpb24nLFxuICAncCcsXG4gICdwaWN0dXJlJyxcbiAgJ3EnLFxuICAncXVvdGUnLFxuICAnc2FtcCcsXG4gICdzZWN0aW9uJyxcbiAgJ3NlbGVjdCcsXG4gICdzb3VyY2UnLFxuICAnc3BhbicsXG4gICdzdHJvbmcnLFxuICAnc3VtbWFyeScsXG4gICdzdXAnLFxuICAndGFibGUnLFxuICAndGJvZHknLFxuICAndGQnLFxuICAndGV4dGFyZWEnLFxuICAndGZvb3QnLFxuICAndGgnLFxuICAndGhlYWQnLFxuICAndGltZScsXG4gICd0cicsXG4gICd1bCcsXG4gICd2YXInLFxuICAndmlkZW8nXG5dO1xuXG5jb25zdCBTVkdfVEFHUyA9IFtcbiAgJ2RlZnMnLFxuICAnZycsXG4gICdtYXJrZXInLFxuICAnbWFzaycsXG4gICdwYXR0ZXJuJyxcbiAgJ3N2ZycsXG4gICdzd2l0Y2gnLFxuICAnc3ltYm9sJyxcbiAgJ2ZlQmxlbmQnLFxuICAnZmVDb2xvck1hdHJpeCcsXG4gICdmZUNvbXBvbmVudFRyYW5zZmVyJyxcbiAgJ2ZlQ29tcG9zaXRlJyxcbiAgJ2ZlQ29udm9sdmVNYXRyaXgnLFxuICAnZmVEaWZmdXNlTGlnaHRpbmcnLFxuICAnZmVEaXNwbGFjZW1lbnRNYXAnLFxuICAnZmVGbG9vZCcsXG4gICdmZUdhdXNzaWFuQmx1cicsXG4gICdmZUltYWdlJyxcbiAgJ2ZlTWVyZ2UnLFxuICAnZmVNb3JwaG9sb2d5JyxcbiAgJ2ZlT2Zmc2V0JyxcbiAgJ2ZlU3BlY3VsYXJMaWdodGluZycsXG4gICdmZVRpbGUnLFxuICAnZmVUdXJidWxlbmNlJyxcbiAgJ2xpbmVhckdyYWRpZW50JyxcbiAgJ3JhZGlhbEdyYWRpZW50JyxcbiAgJ3N0b3AnLFxuICAnY2lyY2xlJyxcbiAgJ2VsbGlwc2UnLFxuICAnaW1hZ2UnLFxuICAnbGluZScsXG4gICdwYXRoJyxcbiAgJ3BvbHlnb24nLFxuICAncG9seWxpbmUnLFxuICAncmVjdCcsXG4gICd0ZXh0JyxcbiAgJ3VzZScsXG4gICd0ZXh0UGF0aCcsXG4gICd0c3BhbicsXG4gICdmb3JlaWduT2JqZWN0JyxcbiAgJ2NsaXBQYXRoJ1xuXTtcblxuY29uc3QgVEFHUyA9IFtcbiAgLi4uSFRNTF9UQUdTLFxuICAuLi5TVkdfVEFHUyxcbl07XG5cbi8vIFNvcnRpbmcsIHRoZW4gcmV2ZXJzaW5nIG1ha2VzIHN1cmUgbG9uZ2VyIGF0dHJpYnV0ZXMvZWxlbWVudHMgbGlrZVxuLy8gYGZvbnQtd2VpZ2h0YCBhcmUgbWF0Y2hlZCBmdWxseSBpbnN0ZWFkIG9mIGdldHRpbmcgZmFsc2UgcG9zaXRpdmVzIG9uIHNheSBgZm9udGBcblxuY29uc3QgTUVESUFfRkVBVFVSRVMgPSBbXG4gICdhbnktaG92ZXInLFxuICAnYW55LXBvaW50ZXInLFxuICAnYXNwZWN0LXJhdGlvJyxcbiAgJ2NvbG9yJyxcbiAgJ2NvbG9yLWdhbXV0JyxcbiAgJ2NvbG9yLWluZGV4JyxcbiAgJ2RldmljZS1hc3BlY3QtcmF0aW8nLFxuICAnZGV2aWNlLWhlaWdodCcsXG4gICdkZXZpY2Utd2lkdGgnLFxuICAnZGlzcGxheS1tb2RlJyxcbiAgJ2ZvcmNlZC1jb2xvcnMnLFxuICAnZ3JpZCcsXG4gICdoZWlnaHQnLFxuICAnaG92ZXInLFxuICAnaW52ZXJ0ZWQtY29sb3JzJyxcbiAgJ21vbm9jaHJvbWUnLFxuICAnb3JpZW50YXRpb24nLFxuICAnb3ZlcmZsb3ctYmxvY2snLFxuICAnb3ZlcmZsb3ctaW5saW5lJyxcbiAgJ3BvaW50ZXInLFxuICAncHJlZmVycy1jb2xvci1zY2hlbWUnLFxuICAncHJlZmVycy1jb250cmFzdCcsXG4gICdwcmVmZXJzLXJlZHVjZWQtbW90aW9uJyxcbiAgJ3ByZWZlcnMtcmVkdWNlZC10cmFuc3BhcmVuY3knLFxuICAncmVzb2x1dGlvbicsXG4gICdzY2FuJyxcbiAgJ3NjcmlwdGluZycsXG4gICd1cGRhdGUnLFxuICAnd2lkdGgnLFxuICAvLyBUT0RPOiBmaW5kIGEgYmV0dGVyIHNvbHV0aW9uP1xuICAnbWluLXdpZHRoJyxcbiAgJ21heC13aWR0aCcsXG4gICdtaW4taGVpZ2h0JyxcbiAgJ21heC1oZWlnaHQnXG5dLnNvcnQoKS5yZXZlcnNlKCk7XG5cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9Qc2V1ZG8tY2xhc3Nlc1xuY29uc3QgUFNFVURPX0NMQVNTRVMgPSBbXG4gICdhY3RpdmUnLFxuICAnYW55LWxpbmsnLFxuICAnYmxhbmsnLFxuICAnY2hlY2tlZCcsXG4gICdjdXJyZW50JyxcbiAgJ2RlZmF1bHQnLFxuICAnZGVmaW5lZCcsXG4gICdkaXInLCAvLyBkaXIoKVxuICAnZGlzYWJsZWQnLFxuICAnZHJvcCcsXG4gICdlbXB0eScsXG4gICdlbmFibGVkJyxcbiAgJ2ZpcnN0JyxcbiAgJ2ZpcnN0LWNoaWxkJyxcbiAgJ2ZpcnN0LW9mLXR5cGUnLFxuICAnZnVsbHNjcmVlbicsXG4gICdmdXR1cmUnLFxuICAnZm9jdXMnLFxuICAnZm9jdXMtdmlzaWJsZScsXG4gICdmb2N1cy13aXRoaW4nLFxuICAnaGFzJywgLy8gaGFzKClcbiAgJ2hvc3QnLCAvLyBob3N0IG9yIGhvc3QoKVxuICAnaG9zdC1jb250ZXh0JywgLy8gaG9zdC1jb250ZXh0KClcbiAgJ2hvdmVyJyxcbiAgJ2luZGV0ZXJtaW5hdGUnLFxuICAnaW4tcmFuZ2UnLFxuICAnaW52YWxpZCcsXG4gICdpcycsIC8vIGlzKClcbiAgJ2xhbmcnLCAvLyBsYW5nKClcbiAgJ2xhc3QtY2hpbGQnLFxuICAnbGFzdC1vZi10eXBlJyxcbiAgJ2xlZnQnLFxuICAnbGluaycsXG4gICdsb2NhbC1saW5rJyxcbiAgJ25vdCcsIC8vIG5vdCgpXG4gICdudGgtY2hpbGQnLCAvLyBudGgtY2hpbGQoKVxuICAnbnRoLWNvbCcsIC8vIG50aC1jb2woKVxuICAnbnRoLWxhc3QtY2hpbGQnLCAvLyBudGgtbGFzdC1jaGlsZCgpXG4gICdudGgtbGFzdC1jb2wnLCAvLyBudGgtbGFzdC1jb2woKVxuICAnbnRoLWxhc3Qtb2YtdHlwZScsIC8vbnRoLWxhc3Qtb2YtdHlwZSgpXG4gICdudGgtb2YtdHlwZScsIC8vbnRoLW9mLXR5cGUoKVxuICAnb25seS1jaGlsZCcsXG4gICdvbmx5LW9mLXR5cGUnLFxuICAnb3B0aW9uYWwnLFxuICAnb3V0LW9mLXJhbmdlJyxcbiAgJ3Bhc3QnLFxuICAncGxhY2Vob2xkZXItc2hvd24nLFxuICAncmVhZC1vbmx5JyxcbiAgJ3JlYWQtd3JpdGUnLFxuICAncmVxdWlyZWQnLFxuICAncmlnaHQnLFxuICAncm9vdCcsXG4gICdzY29wZScsXG4gICd0YXJnZXQnLFxuICAndGFyZ2V0LXdpdGhpbicsXG4gICd1c2VyLWludmFsaWQnLFxuICAndmFsaWQnLFxuICAndmlzaXRlZCcsXG4gICd3aGVyZScgLy8gd2hlcmUoKVxuXS5zb3J0KCkucmV2ZXJzZSgpO1xuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvUHNldWRvLWVsZW1lbnRzXG5jb25zdCBQU0VVRE9fRUxFTUVOVFMgPSBbXG4gICdhZnRlcicsXG4gICdiYWNrZHJvcCcsXG4gICdiZWZvcmUnLFxuICAnY3VlJyxcbiAgJ2N1ZS1yZWdpb24nLFxuICAnZmlyc3QtbGV0dGVyJyxcbiAgJ2ZpcnN0LWxpbmUnLFxuICAnZ3JhbW1hci1lcnJvcicsXG4gICdtYXJrZXInLFxuICAncGFydCcsXG4gICdwbGFjZWhvbGRlcicsXG4gICdzZWxlY3Rpb24nLFxuICAnc2xvdHRlZCcsXG4gICdzcGVsbGluZy1lcnJvcidcbl0uc29ydCgpLnJldmVyc2UoKTtcblxuY29uc3QgQVRUUklCVVRFUyA9IFtcbiAgJ2FjY2VudC1jb2xvcicsXG4gICdhbGlnbi1jb250ZW50JyxcbiAgJ2FsaWduLWl0ZW1zJyxcbiAgJ2FsaWduLXNlbGYnLFxuICAnYWxpZ25tZW50LWJhc2VsaW5lJyxcbiAgJ2FsbCcsXG4gICdhbmNob3ItbmFtZScsXG4gICdhbmltYXRpb24nLFxuICAnYW5pbWF0aW9uLWNvbXBvc2l0aW9uJyxcbiAgJ2FuaW1hdGlvbi1kZWxheScsXG4gICdhbmltYXRpb24tZGlyZWN0aW9uJyxcbiAgJ2FuaW1hdGlvbi1kdXJhdGlvbicsXG4gICdhbmltYXRpb24tZmlsbC1tb2RlJyxcbiAgJ2FuaW1hdGlvbi1pdGVyYXRpb24tY291bnQnLFxuICAnYW5pbWF0aW9uLW5hbWUnLFxuICAnYW5pbWF0aW9uLXBsYXktc3RhdGUnLFxuICAnYW5pbWF0aW9uLXJhbmdlJyxcbiAgJ2FuaW1hdGlvbi1yYW5nZS1lbmQnLFxuICAnYW5pbWF0aW9uLXJhbmdlLXN0YXJ0JyxcbiAgJ2FuaW1hdGlvbi10aW1lbGluZScsXG4gICdhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uJyxcbiAgJ2FwcGVhcmFuY2UnLFxuICAnYXNwZWN0LXJhdGlvJyxcbiAgJ2JhY2tkcm9wLWZpbHRlcicsXG4gICdiYWNrZmFjZS12aXNpYmlsaXR5JyxcbiAgJ2JhY2tncm91bmQnLFxuICAnYmFja2dyb3VuZC1hdHRhY2htZW50JyxcbiAgJ2JhY2tncm91bmQtYmxlbmQtbW9kZScsXG4gICdiYWNrZ3JvdW5kLWNsaXAnLFxuICAnYmFja2dyb3VuZC1jb2xvcicsXG4gICdiYWNrZ3JvdW5kLWltYWdlJyxcbiAgJ2JhY2tncm91bmQtb3JpZ2luJyxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24nLFxuICAnYmFja2dyb3VuZC1wb3NpdGlvbi14JyxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24teScsXG4gICdiYWNrZ3JvdW5kLXJlcGVhdCcsXG4gICdiYWNrZ3JvdW5kLXNpemUnLFxuICAnYmFzZWxpbmUtc2hpZnQnLFxuICAnYmxvY2stc2l6ZScsXG4gICdib3JkZXInLFxuICAnYm9yZGVyLWJsb2NrJyxcbiAgJ2JvcmRlci1ibG9jay1jb2xvcicsXG4gICdib3JkZXItYmxvY2stZW5kJyxcbiAgJ2JvcmRlci1ibG9jay1lbmQtY29sb3InLFxuICAnYm9yZGVyLWJsb2NrLWVuZC1zdHlsZScsXG4gICdib3JkZXItYmxvY2stZW5kLXdpZHRoJyxcbiAgJ2JvcmRlci1ibG9jay1zdGFydCcsXG4gICdib3JkZXItYmxvY2stc3RhcnQtY29sb3InLFxuICAnYm9yZGVyLWJsb2NrLXN0YXJ0LXN0eWxlJyxcbiAgJ2JvcmRlci1ibG9jay1zdGFydC13aWR0aCcsXG4gICdib3JkZXItYmxvY2stc3R5bGUnLFxuICAnYm9yZGVyLWJsb2NrLXdpZHRoJyxcbiAgJ2JvcmRlci1ib3R0b20nLFxuICAnYm9yZGVyLWJvdHRvbS1jb2xvcicsXG4gICdib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzJyxcbiAgJ2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzJyxcbiAgJ2JvcmRlci1ib3R0b20tc3R5bGUnLFxuICAnYm9yZGVyLWJvdHRvbS13aWR0aCcsXG4gICdib3JkZXItY29sbGFwc2UnLFxuICAnYm9yZGVyLWNvbG9yJyxcbiAgJ2JvcmRlci1lbmQtZW5kLXJhZGl1cycsXG4gICdib3JkZXItZW5kLXN0YXJ0LXJhZGl1cycsXG4gICdib3JkZXItaW1hZ2UnLFxuICAnYm9yZGVyLWltYWdlLW91dHNldCcsXG4gICdib3JkZXItaW1hZ2UtcmVwZWF0JyxcbiAgJ2JvcmRlci1pbWFnZS1zbGljZScsXG4gICdib3JkZXItaW1hZ2Utc291cmNlJyxcbiAgJ2JvcmRlci1pbWFnZS13aWR0aCcsXG4gICdib3JkZXItaW5saW5lJyxcbiAgJ2JvcmRlci1pbmxpbmUtY29sb3InLFxuICAnYm9yZGVyLWlubGluZS1lbmQnLFxuICAnYm9yZGVyLWlubGluZS1lbmQtY29sb3InLFxuICAnYm9yZGVyLWlubGluZS1lbmQtc3R5bGUnLFxuICAnYm9yZGVyLWlubGluZS1lbmQtd2lkdGgnLFxuICAnYm9yZGVyLWlubGluZS1zdGFydCcsXG4gICdib3JkZXItaW5saW5lLXN0YXJ0LWNvbG9yJyxcbiAgJ2JvcmRlci1pbmxpbmUtc3RhcnQtc3R5bGUnLFxuICAnYm9yZGVyLWlubGluZS1zdGFydC13aWR0aCcsXG4gICdib3JkZXItaW5saW5lLXN0eWxlJyxcbiAgJ2JvcmRlci1pbmxpbmUtd2lkdGgnLFxuICAnYm9yZGVyLWxlZnQnLFxuICAnYm9yZGVyLWxlZnQtY29sb3InLFxuICAnYm9yZGVyLWxlZnQtc3R5bGUnLFxuICAnYm9yZGVyLWxlZnQtd2lkdGgnLFxuICAnYm9yZGVyLXJhZGl1cycsXG4gICdib3JkZXItcmlnaHQnLFxuICAnYm9yZGVyLXJpZ2h0LWNvbG9yJyxcbiAgJ2JvcmRlci1yaWdodC1zdHlsZScsXG4gICdib3JkZXItcmlnaHQtd2lkdGgnLFxuICAnYm9yZGVyLXNwYWNpbmcnLFxuICAnYm9yZGVyLXN0YXJ0LWVuZC1yYWRpdXMnLFxuICAnYm9yZGVyLXN0YXJ0LXN0YXJ0LXJhZGl1cycsXG4gICdib3JkZXItc3R5bGUnLFxuICAnYm9yZGVyLXRvcCcsXG4gICdib3JkZXItdG9wLWNvbG9yJyxcbiAgJ2JvcmRlci10b3AtbGVmdC1yYWRpdXMnLFxuICAnYm9yZGVyLXRvcC1yaWdodC1yYWRpdXMnLFxuICAnYm9yZGVyLXRvcC1zdHlsZScsXG4gICdib3JkZXItdG9wLXdpZHRoJyxcbiAgJ2JvcmRlci13aWR0aCcsXG4gICdib3R0b20nLFxuICAnYm94LWFsaWduJyxcbiAgJ2JveC1kZWNvcmF0aW9uLWJyZWFrJyxcbiAgJ2JveC1kaXJlY3Rpb24nLFxuICAnYm94LWZsZXgnLFxuICAnYm94LWZsZXgtZ3JvdXAnLFxuICAnYm94LWxpbmVzJyxcbiAgJ2JveC1vcmRpbmFsLWdyb3VwJyxcbiAgJ2JveC1vcmllbnQnLFxuICAnYm94LXBhY2snLFxuICAnYm94LXNoYWRvdycsXG4gICdib3gtc2l6aW5nJyxcbiAgJ2JyZWFrLWFmdGVyJyxcbiAgJ2JyZWFrLWJlZm9yZScsXG4gICdicmVhay1pbnNpZGUnLFxuICAnY2FwdGlvbi1zaWRlJyxcbiAgJ2NhcmV0LWNvbG9yJyxcbiAgJ2NsZWFyJyxcbiAgJ2NsaXAnLFxuICAnY2xpcC1wYXRoJyxcbiAgJ2NsaXAtcnVsZScsXG4gICdjb2xvcicsXG4gICdjb2xvci1pbnRlcnBvbGF0aW9uJyxcbiAgJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsXG4gICdjb2xvci1wcm9maWxlJyxcbiAgJ2NvbG9yLXJlbmRlcmluZycsXG4gICdjb2xvci1zY2hlbWUnLFxuICAnY29sdW1uLWNvdW50JyxcbiAgJ2NvbHVtbi1maWxsJyxcbiAgJ2NvbHVtbi1nYXAnLFxuICAnY29sdW1uLXJ1bGUnLFxuICAnY29sdW1uLXJ1bGUtY29sb3InLFxuICAnY29sdW1uLXJ1bGUtc3R5bGUnLFxuICAnY29sdW1uLXJ1bGUtd2lkdGgnLFxuICAnY29sdW1uLXNwYW4nLFxuICAnY29sdW1uLXdpZHRoJyxcbiAgJ2NvbHVtbnMnLFxuICAnY29udGFpbicsXG4gICdjb250YWluLWludHJpbnNpYy1ibG9jay1zaXplJyxcbiAgJ2NvbnRhaW4taW50cmluc2ljLWhlaWdodCcsXG4gICdjb250YWluLWludHJpbnNpYy1pbmxpbmUtc2l6ZScsXG4gICdjb250YWluLWludHJpbnNpYy1zaXplJyxcbiAgJ2NvbnRhaW4taW50cmluc2ljLXdpZHRoJyxcbiAgJ2NvbnRhaW5lcicsXG4gICdjb250YWluZXItbmFtZScsXG4gICdjb250YWluZXItdHlwZScsXG4gICdjb250ZW50JyxcbiAgJ2NvbnRlbnQtdmlzaWJpbGl0eScsXG4gICdjb3VudGVyLWluY3JlbWVudCcsXG4gICdjb3VudGVyLXJlc2V0JyxcbiAgJ2NvdW50ZXItc2V0JyxcbiAgJ2N1ZScsXG4gICdjdWUtYWZ0ZXInLFxuICAnY3VlLWJlZm9yZScsXG4gICdjdXJzb3InLFxuICAnY3gnLFxuICAnY3knLFxuICAnZGlyZWN0aW9uJyxcbiAgJ2Rpc3BsYXknLFxuICAnZG9taW5hbnQtYmFzZWxpbmUnLFxuICAnZW1wdHktY2VsbHMnLFxuICAnZW5hYmxlLWJhY2tncm91bmQnLFxuICAnZmllbGQtc2l6aW5nJyxcbiAgJ2ZpbGwnLFxuICAnZmlsbC1vcGFjaXR5JyxcbiAgJ2ZpbGwtcnVsZScsXG4gICdmaWx0ZXInLFxuICAnZmxleCcsXG4gICdmbGV4LWJhc2lzJyxcbiAgJ2ZsZXgtZGlyZWN0aW9uJyxcbiAgJ2ZsZXgtZmxvdycsXG4gICdmbGV4LWdyb3cnLFxuICAnZmxleC1zaHJpbmsnLFxuICAnZmxleC13cmFwJyxcbiAgJ2Zsb2F0JyxcbiAgJ2Zsb29kLWNvbG9yJyxcbiAgJ2Zsb29kLW9wYWNpdHknLFxuICAnZmxvdycsXG4gICdmb250JyxcbiAgJ2ZvbnQtZGlzcGxheScsXG4gICdmb250LWZhbWlseScsXG4gICdmb250LWZlYXR1cmUtc2V0dGluZ3MnLFxuICAnZm9udC1rZXJuaW5nJyxcbiAgJ2ZvbnQtbGFuZ3VhZ2Utb3ZlcnJpZGUnLFxuICAnZm9udC1vcHRpY2FsLXNpemluZycsXG4gICdmb250LXBhbGV0dGUnLFxuICAnZm9udC1zaXplJyxcbiAgJ2ZvbnQtc2l6ZS1hZGp1c3QnLFxuICAnZm9udC1zbW9vdGgnLFxuICAnZm9udC1zbW9vdGhpbmcnLFxuICAnZm9udC1zdHJldGNoJyxcbiAgJ2ZvbnQtc3R5bGUnLFxuICAnZm9udC1zeW50aGVzaXMnLFxuICAnZm9udC1zeW50aGVzaXMtcG9zaXRpb24nLFxuICAnZm9udC1zeW50aGVzaXMtc21hbGwtY2FwcycsXG4gICdmb250LXN5bnRoZXNpcy1zdHlsZScsXG4gICdmb250LXN5bnRoZXNpcy13ZWlnaHQnLFxuICAnZm9udC12YXJpYW50JyxcbiAgJ2ZvbnQtdmFyaWFudC1hbHRlcm5hdGVzJyxcbiAgJ2ZvbnQtdmFyaWFudC1jYXBzJyxcbiAgJ2ZvbnQtdmFyaWFudC1lYXN0LWFzaWFuJyxcbiAgJ2ZvbnQtdmFyaWFudC1lbW9qaScsXG4gICdmb250LXZhcmlhbnQtbGlnYXR1cmVzJyxcbiAgJ2ZvbnQtdmFyaWFudC1udW1lcmljJyxcbiAgJ2ZvbnQtdmFyaWFudC1wb3NpdGlvbicsXG4gICdmb250LXZhcmlhdGlvbi1zZXR0aW5ncycsXG4gICdmb250LXdlaWdodCcsXG4gICdmb3JjZWQtY29sb3ItYWRqdXN0JyxcbiAgJ2dhcCcsXG4gICdnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsJyxcbiAgJ2dseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsJyxcbiAgJ2dyaWQnLFxuICAnZ3JpZC1hcmVhJyxcbiAgJ2dyaWQtYXV0by1jb2x1bW5zJyxcbiAgJ2dyaWQtYXV0by1mbG93JyxcbiAgJ2dyaWQtYXV0by1yb3dzJyxcbiAgJ2dyaWQtY29sdW1uJyxcbiAgJ2dyaWQtY29sdW1uLWVuZCcsXG4gICdncmlkLWNvbHVtbi1zdGFydCcsXG4gICdncmlkLWdhcCcsXG4gICdncmlkLXJvdycsXG4gICdncmlkLXJvdy1lbmQnLFxuICAnZ3JpZC1yb3ctc3RhcnQnLFxuICAnZ3JpZC10ZW1wbGF0ZScsXG4gICdncmlkLXRlbXBsYXRlLWFyZWFzJyxcbiAgJ2dyaWQtdGVtcGxhdGUtY29sdW1ucycsXG4gICdncmlkLXRlbXBsYXRlLXJvd3MnLFxuICAnaGFuZ2luZy1wdW5jdHVhdGlvbicsXG4gICdoZWlnaHQnLFxuICAnaHlwaGVuYXRlLWNoYXJhY3RlcicsXG4gICdoeXBoZW5hdGUtbGltaXQtY2hhcnMnLFxuICAnaHlwaGVucycsXG4gICdpY29uJyxcbiAgJ2ltYWdlLW9yaWVudGF0aW9uJyxcbiAgJ2ltYWdlLXJlbmRlcmluZycsXG4gICdpbWFnZS1yZXNvbHV0aW9uJyxcbiAgJ2ltZS1tb2RlJyxcbiAgJ2luaXRpYWwtbGV0dGVyJyxcbiAgJ2luaXRpYWwtbGV0dGVyLWFsaWduJyxcbiAgJ2lubGluZS1zaXplJyxcbiAgJ2luc2V0JyxcbiAgJ2luc2V0LWFyZWEnLFxuICAnaW5zZXQtYmxvY2snLFxuICAnaW5zZXQtYmxvY2stZW5kJyxcbiAgJ2luc2V0LWJsb2NrLXN0YXJ0JyxcbiAgJ2luc2V0LWlubGluZScsXG4gICdpbnNldC1pbmxpbmUtZW5kJyxcbiAgJ2luc2V0LWlubGluZS1zdGFydCcsXG4gICdpc29sYXRpb24nLFxuICAnanVzdGlmeS1jb250ZW50JyxcbiAgJ2p1c3RpZnktaXRlbXMnLFxuICAnanVzdGlmeS1zZWxmJyxcbiAgJ2tlcm5pbmcnLFxuICAnbGVmdCcsXG4gICdsZXR0ZXItc3BhY2luZycsXG4gICdsaWdodGluZy1jb2xvcicsXG4gICdsaW5lLWJyZWFrJyxcbiAgJ2xpbmUtaGVpZ2h0JyxcbiAgJ2xpbmUtaGVpZ2h0LXN0ZXAnLFxuICAnbGlzdC1zdHlsZScsXG4gICdsaXN0LXN0eWxlLWltYWdlJyxcbiAgJ2xpc3Qtc3R5bGUtcG9zaXRpb24nLFxuICAnbGlzdC1zdHlsZS10eXBlJyxcbiAgJ21hcmdpbicsXG4gICdtYXJnaW4tYmxvY2snLFxuICAnbWFyZ2luLWJsb2NrLWVuZCcsXG4gICdtYXJnaW4tYmxvY2stc3RhcnQnLFxuICAnbWFyZ2luLWJvdHRvbScsXG4gICdtYXJnaW4taW5saW5lJyxcbiAgJ21hcmdpbi1pbmxpbmUtZW5kJyxcbiAgJ21hcmdpbi1pbmxpbmUtc3RhcnQnLFxuICAnbWFyZ2luLWxlZnQnLFxuICAnbWFyZ2luLXJpZ2h0JyxcbiAgJ21hcmdpbi10b3AnLFxuICAnbWFyZ2luLXRyaW0nLFxuICAnbWFya2VyJyxcbiAgJ21hcmtlci1lbmQnLFxuICAnbWFya2VyLW1pZCcsXG4gICdtYXJrZXItc3RhcnQnLFxuICAnbWFya3MnLFxuICAnbWFzaycsXG4gICdtYXNrLWJvcmRlcicsXG4gICdtYXNrLWJvcmRlci1tb2RlJyxcbiAgJ21hc2stYm9yZGVyLW91dHNldCcsXG4gICdtYXNrLWJvcmRlci1yZXBlYXQnLFxuICAnbWFzay1ib3JkZXItc2xpY2UnLFxuICAnbWFzay1ib3JkZXItc291cmNlJyxcbiAgJ21hc2stYm9yZGVyLXdpZHRoJyxcbiAgJ21hc2stY2xpcCcsXG4gICdtYXNrLWNvbXBvc2l0ZScsXG4gICdtYXNrLWltYWdlJyxcbiAgJ21hc2stbW9kZScsXG4gICdtYXNrLW9yaWdpbicsXG4gICdtYXNrLXBvc2l0aW9uJyxcbiAgJ21hc2stcmVwZWF0JyxcbiAgJ21hc2stc2l6ZScsXG4gICdtYXNrLXR5cGUnLFxuICAnbWFzb25yeS1hdXRvLWZsb3cnLFxuICAnbWF0aC1kZXB0aCcsXG4gICdtYXRoLXNoaWZ0JyxcbiAgJ21hdGgtc3R5bGUnLFxuICAnbWF4LWJsb2NrLXNpemUnLFxuICAnbWF4LWhlaWdodCcsXG4gICdtYXgtaW5saW5lLXNpemUnLFxuICAnbWF4LXdpZHRoJyxcbiAgJ21pbi1ibG9jay1zaXplJyxcbiAgJ21pbi1oZWlnaHQnLFxuICAnbWluLWlubGluZS1zaXplJyxcbiAgJ21pbi13aWR0aCcsXG4gICdtaXgtYmxlbmQtbW9kZScsXG4gICduYXYtZG93bicsXG4gICduYXYtaW5kZXgnLFxuICAnbmF2LWxlZnQnLFxuICAnbmF2LXJpZ2h0JyxcbiAgJ25hdi11cCcsXG4gICdub25lJyxcbiAgJ25vcm1hbCcsXG4gICdvYmplY3QtZml0JyxcbiAgJ29iamVjdC1wb3NpdGlvbicsXG4gICdvZmZzZXQnLFxuICAnb2Zmc2V0LWFuY2hvcicsXG4gICdvZmZzZXQtZGlzdGFuY2UnLFxuICAnb2Zmc2V0LXBhdGgnLFxuICAnb2Zmc2V0LXBvc2l0aW9uJyxcbiAgJ29mZnNldC1yb3RhdGUnLFxuICAnb3BhY2l0eScsXG4gICdvcmRlcicsXG4gICdvcnBoYW5zJyxcbiAgJ291dGxpbmUnLFxuICAnb3V0bGluZS1jb2xvcicsXG4gICdvdXRsaW5lLW9mZnNldCcsXG4gICdvdXRsaW5lLXN0eWxlJyxcbiAgJ291dGxpbmUtd2lkdGgnLFxuICAnb3ZlcmZsb3cnLFxuICAnb3ZlcmZsb3ctYW5jaG9yJyxcbiAgJ292ZXJmbG93LWJsb2NrJyxcbiAgJ292ZXJmbG93LWNsaXAtbWFyZ2luJyxcbiAgJ292ZXJmbG93LWlubGluZScsXG4gICdvdmVyZmxvdy13cmFwJyxcbiAgJ292ZXJmbG93LXgnLFxuICAnb3ZlcmZsb3cteScsXG4gICdvdmVybGF5JyxcbiAgJ292ZXJzY3JvbGwtYmVoYXZpb3InLFxuICAnb3ZlcnNjcm9sbC1iZWhhdmlvci1ibG9jaycsXG4gICdvdmVyc2Nyb2xsLWJlaGF2aW9yLWlubGluZScsXG4gICdvdmVyc2Nyb2xsLWJlaGF2aW9yLXgnLFxuICAnb3ZlcnNjcm9sbC1iZWhhdmlvci15JyxcbiAgJ3BhZGRpbmcnLFxuICAncGFkZGluZy1ibG9jaycsXG4gICdwYWRkaW5nLWJsb2NrLWVuZCcsXG4gICdwYWRkaW5nLWJsb2NrLXN0YXJ0JyxcbiAgJ3BhZGRpbmctYm90dG9tJyxcbiAgJ3BhZGRpbmctaW5saW5lJyxcbiAgJ3BhZGRpbmctaW5saW5lLWVuZCcsXG4gICdwYWRkaW5nLWlubGluZS1zdGFydCcsXG4gICdwYWRkaW5nLWxlZnQnLFxuICAncGFkZGluZy1yaWdodCcsXG4gICdwYWRkaW5nLXRvcCcsXG4gICdwYWdlJyxcbiAgJ3BhZ2UtYnJlYWstYWZ0ZXInLFxuICAncGFnZS1icmVhay1iZWZvcmUnLFxuICAncGFnZS1icmVhay1pbnNpZGUnLFxuICAncGFpbnQtb3JkZXInLFxuICAncGF1c2UnLFxuICAncGF1c2UtYWZ0ZXInLFxuICAncGF1c2UtYmVmb3JlJyxcbiAgJ3BlcnNwZWN0aXZlJyxcbiAgJ3BlcnNwZWN0aXZlLW9yaWdpbicsXG4gICdwbGFjZS1jb250ZW50JyxcbiAgJ3BsYWNlLWl0ZW1zJyxcbiAgJ3BsYWNlLXNlbGYnLFxuICAncG9pbnRlci1ldmVudHMnLFxuICAncG9zaXRpb24nLFxuICAncG9zaXRpb24tYW5jaG9yJyxcbiAgJ3Bvc2l0aW9uLXZpc2liaWxpdHknLFxuICAncHJpbnQtY29sb3ItYWRqdXN0JyxcbiAgJ3F1b3RlcycsXG4gICdyJyxcbiAgJ3Jlc2l6ZScsXG4gICdyZXN0JyxcbiAgJ3Jlc3QtYWZ0ZXInLFxuICAncmVzdC1iZWZvcmUnLFxuICAncmlnaHQnLFxuICAncm90YXRlJyxcbiAgJ3Jvdy1nYXAnLFxuICAncnVieS1hbGlnbicsXG4gICdydWJ5LXBvc2l0aW9uJyxcbiAgJ3NjYWxlJyxcbiAgJ3Njcm9sbC1iZWhhdmlvcicsXG4gICdzY3JvbGwtbWFyZ2luJyxcbiAgJ3Njcm9sbC1tYXJnaW4tYmxvY2snLFxuICAnc2Nyb2xsLW1hcmdpbi1ibG9jay1lbmQnLFxuICAnc2Nyb2xsLW1hcmdpbi1ibG9jay1zdGFydCcsXG4gICdzY3JvbGwtbWFyZ2luLWJvdHRvbScsXG4gICdzY3JvbGwtbWFyZ2luLWlubGluZScsXG4gICdzY3JvbGwtbWFyZ2luLWlubGluZS1lbmQnLFxuICAnc2Nyb2xsLW1hcmdpbi1pbmxpbmUtc3RhcnQnLFxuICAnc2Nyb2xsLW1hcmdpbi1sZWZ0JyxcbiAgJ3Njcm9sbC1tYXJnaW4tcmlnaHQnLFxuICAnc2Nyb2xsLW1hcmdpbi10b3AnLFxuICAnc2Nyb2xsLXBhZGRpbmcnLFxuICAnc2Nyb2xsLXBhZGRpbmctYmxvY2snLFxuICAnc2Nyb2xsLXBhZGRpbmctYmxvY2stZW5kJyxcbiAgJ3Njcm9sbC1wYWRkaW5nLWJsb2NrLXN0YXJ0JyxcbiAgJ3Njcm9sbC1wYWRkaW5nLWJvdHRvbScsXG4gICdzY3JvbGwtcGFkZGluZy1pbmxpbmUnLFxuICAnc2Nyb2xsLXBhZGRpbmctaW5saW5lLWVuZCcsXG4gICdzY3JvbGwtcGFkZGluZy1pbmxpbmUtc3RhcnQnLFxuICAnc2Nyb2xsLXBhZGRpbmctbGVmdCcsXG4gICdzY3JvbGwtcGFkZGluZy1yaWdodCcsXG4gICdzY3JvbGwtcGFkZGluZy10b3AnLFxuICAnc2Nyb2xsLXNuYXAtYWxpZ24nLFxuICAnc2Nyb2xsLXNuYXAtc3RvcCcsXG4gICdzY3JvbGwtc25hcC10eXBlJyxcbiAgJ3Njcm9sbC10aW1lbGluZScsXG4gICdzY3JvbGwtdGltZWxpbmUtYXhpcycsXG4gICdzY3JvbGwtdGltZWxpbmUtbmFtZScsXG4gICdzY3JvbGxiYXItY29sb3InLFxuICAnc2Nyb2xsYmFyLWd1dHRlcicsXG4gICdzY3JvbGxiYXItd2lkdGgnLFxuICAnc2hhcGUtaW1hZ2UtdGhyZXNob2xkJyxcbiAgJ3NoYXBlLW1hcmdpbicsXG4gICdzaGFwZS1vdXRzaWRlJyxcbiAgJ3NoYXBlLXJlbmRlcmluZycsXG4gICdzcGVhaycsXG4gICdzcGVhay1hcycsXG4gICdzcmMnLCAvLyBAZm9udC1mYWNlXG4gICdzdG9wLWNvbG9yJyxcbiAgJ3N0b3Atb3BhY2l0eScsXG4gICdzdHJva2UnLFxuICAnc3Ryb2tlLWRhc2hhcnJheScsXG4gICdzdHJva2UtZGFzaG9mZnNldCcsXG4gICdzdHJva2UtbGluZWNhcCcsXG4gICdzdHJva2UtbGluZWpvaW4nLFxuICAnc3Ryb2tlLW1pdGVybGltaXQnLFxuICAnc3Ryb2tlLW9wYWNpdHknLFxuICAnc3Ryb2tlLXdpZHRoJyxcbiAgJ3RhYi1zaXplJyxcbiAgJ3RhYmxlLWxheW91dCcsXG4gICd0ZXh0LWFsaWduJyxcbiAgJ3RleHQtYWxpZ24tYWxsJyxcbiAgJ3RleHQtYWxpZ24tbGFzdCcsXG4gICd0ZXh0LWFuY2hvcicsXG4gICd0ZXh0LWNvbWJpbmUtdXByaWdodCcsXG4gICd0ZXh0LWRlY29yYXRpb24nLFxuICAndGV4dC1kZWNvcmF0aW9uLWNvbG9yJyxcbiAgJ3RleHQtZGVjb3JhdGlvbi1saW5lJyxcbiAgJ3RleHQtZGVjb3JhdGlvbi1za2lwJyxcbiAgJ3RleHQtZGVjb3JhdGlvbi1za2lwLWluaycsXG4gICd0ZXh0LWRlY29yYXRpb24tc3R5bGUnLFxuICAndGV4dC1kZWNvcmF0aW9uLXRoaWNrbmVzcycsXG4gICd0ZXh0LWVtcGhhc2lzJyxcbiAgJ3RleHQtZW1waGFzaXMtY29sb3InLFxuICAndGV4dC1lbXBoYXNpcy1wb3NpdGlvbicsXG4gICd0ZXh0LWVtcGhhc2lzLXN0eWxlJyxcbiAgJ3RleHQtaW5kZW50JyxcbiAgJ3RleHQtanVzdGlmeScsXG4gICd0ZXh0LW9yaWVudGF0aW9uJyxcbiAgJ3RleHQtb3ZlcmZsb3cnLFxuICAndGV4dC1yZW5kZXJpbmcnLFxuICAndGV4dC1zaGFkb3cnLFxuICAndGV4dC1zaXplLWFkanVzdCcsXG4gICd0ZXh0LXRyYW5zZm9ybScsXG4gICd0ZXh0LXVuZGVybGluZS1vZmZzZXQnLFxuICAndGV4dC11bmRlcmxpbmUtcG9zaXRpb24nLFxuICAndGV4dC13cmFwJyxcbiAgJ3RleHQtd3JhcC1tb2RlJyxcbiAgJ3RleHQtd3JhcC1zdHlsZScsXG4gICd0aW1lbGluZS1zY29wZScsXG4gICd0b3AnLFxuICAndG91Y2gtYWN0aW9uJyxcbiAgJ3RyYW5zZm9ybScsXG4gICd0cmFuc2Zvcm0tYm94JyxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4nLFxuICAndHJhbnNmb3JtLXN0eWxlJyxcbiAgJ3RyYW5zaXRpb24nLFxuICAndHJhbnNpdGlvbi1iZWhhdmlvcicsXG4gICd0cmFuc2l0aW9uLWRlbGF5JyxcbiAgJ3RyYW5zaXRpb24tZHVyYXRpb24nLFxuICAndHJhbnNpdGlvbi1wcm9wZXJ0eScsXG4gICd0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbicsXG4gICd0cmFuc2xhdGUnLFxuICAndW5pY29kZS1iaWRpJyxcbiAgJ3VzZXItbW9kaWZ5JyxcbiAgJ3VzZXItc2VsZWN0JyxcbiAgJ3ZlY3Rvci1lZmZlY3QnLFxuICAndmVydGljYWwtYWxpZ24nLFxuICAndmlldy10aW1lbGluZScsXG4gICd2aWV3LXRpbWVsaW5lLWF4aXMnLFxuICAndmlldy10aW1lbGluZS1pbnNldCcsXG4gICd2aWV3LXRpbWVsaW5lLW5hbWUnLFxuICAndmlldy10cmFuc2l0aW9uLW5hbWUnLFxuICAndmlzaWJpbGl0eScsXG4gICd2b2ljZS1iYWxhbmNlJyxcbiAgJ3ZvaWNlLWR1cmF0aW9uJyxcbiAgJ3ZvaWNlLWZhbWlseScsXG4gICd2b2ljZS1waXRjaCcsXG4gICd2b2ljZS1yYW5nZScsXG4gICd2b2ljZS1yYXRlJyxcbiAgJ3ZvaWNlLXN0cmVzcycsXG4gICd2b2ljZS12b2x1bWUnLFxuICAnd2hpdGUtc3BhY2UnLFxuICAnd2hpdGUtc3BhY2UtY29sbGFwc2UnLFxuICAnd2lkb3dzJyxcbiAgJ3dpZHRoJyxcbiAgJ3dpbGwtY2hhbmdlJyxcbiAgJ3dvcmQtYnJlYWsnLFxuICAnd29yZC1zcGFjaW5nJyxcbiAgJ3dvcmQtd3JhcCcsXG4gICd3cml0aW5nLW1vZGUnLFxuICAneCcsXG4gICd5JyxcbiAgJ3otaW5kZXgnLFxuICAnem9vbSdcbl0uc29ydCgpLnJldmVyc2UoKTtcblxuLy8gc29tZSBncmFtbWFycyB1c2UgdGhlbSBhbGwgYXMgYSBzaW5nbGUgZ3JvdXBcbmNvbnN0IFBTRVVET19TRUxFQ1RPUlMgPSBQU0VVRE9fQ0xBU1NFUy5jb25jYXQoUFNFVURPX0VMRU1FTlRTKS5zb3J0KCkucmV2ZXJzZSgpO1xuXG4vKlxuTGFuZ3VhZ2U6IExlc3NcbkRlc2NyaXB0aW9uOiBJdCdzIENTUywgd2l0aCBqdXN0IGEgbGl0dGxlIG1vcmUuXG5BdXRob3I6ICAgTWF4IE1pa2hhaWxvdiA8c2V2ZW4ucGhhc2VzLm1heEBnbWFpbC5jb20+XG5XZWJzaXRlOiBodHRwOi8vbGVzc2Nzcy5vcmdcbkNhdGVnb3J5OiBjb21tb24sIGNzcywgd2ViXG4qL1xuXG5cbi8qKiBAdHlwZSBMYW5ndWFnZUZuICovXG5mdW5jdGlvbiBsZXNzKGhsanMpIHtcbiAgY29uc3QgbW9kZXMgPSBNT0RFUyhobGpzKTtcbiAgY29uc3QgUFNFVURPX1NFTEVDVE9SUyQxID0gUFNFVURPX1NFTEVDVE9SUztcblxuICBjb25zdCBBVF9NT0RJRklFUlMgPSBcImFuZCBvciBub3Qgb25seVwiO1xuICBjb25zdCBJREVOVF9SRSA9ICdbXFxcXHctXSsnOyAvLyB5ZXMsIExlc3MgaWRlbnRpZmllcnMgbWF5IGJlZ2luIHdpdGggYSBkaWdpdFxuICBjb25zdCBJTlRFUlBfSURFTlRfUkUgPSAnKCcgKyBJREVOVF9SRSArICd8QFxcXFx7JyArIElERU5UX1JFICsgJ1xcXFx9KSc7XG5cbiAgLyogR2VuZXJpYyBNb2RlcyAqL1xuXG4gIGNvbnN0IFJVTEVTID0gW107IGNvbnN0IFZBTFVFX01PREVTID0gW107IC8vIGZvcndhcmQgZGVmLiBmb3IgcmVjdXJzaXZlIG1vZGVzXG5cbiAgY29uc3QgU1RSSU5HX01PREUgPSBmdW5jdGlvbihjKSB7XG4gICAgcmV0dXJuIHtcbiAgICAvLyBMZXNzIHN0cmluZ3MgYXJlIG5vdCBtdWx0aWxpbmUgKGFsc28gaW5jbHVkZSAnficgZm9yIG1vcmUgY29uc2lzdGVudCBjb2xvcmluZyBvZiBcImVzY2FwZWRcIiBzdHJpbmdzKVxuICAgICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICAgIGJlZ2luOiAnfj8nICsgYyArICcuKj8nICsgY1xuICAgIH07XG4gIH07XG5cbiAgY29uc3QgSURFTlRfTU9ERSA9IGZ1bmN0aW9uKG5hbWUsIGJlZ2luLCByZWxldmFuY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2xhc3NOYW1lOiBuYW1lLFxuICAgICAgYmVnaW46IGJlZ2luLFxuICAgICAgcmVsZXZhbmNlOiByZWxldmFuY2VcbiAgICB9O1xuICB9O1xuXG4gIGNvbnN0IEFUX0tFWVdPUkRTID0ge1xuICAgICRwYXR0ZXJuOiAvW2Etei1dKy8sXG4gICAga2V5d29yZDogQVRfTU9ESUZJRVJTLFxuICAgIGF0dHJpYnV0ZTogTUVESUFfRkVBVFVSRVMuam9pbihcIiBcIilcbiAgfTtcblxuICBjb25zdCBQQVJFTlNfTU9ERSA9IHtcbiAgICAvLyB1c2VkIG9ubHkgdG8gcHJvcGVybHkgYmFsYW5jZSBuZXN0ZWQgcGFyZW5zIGluc2lkZSBtaXhpbiBjYWxsLCBkZWYuIGFyZyBsaXN0XG4gICAgYmVnaW46ICdcXFxcKCcsXG4gICAgZW5kOiAnXFxcXCknLFxuICAgIGNvbnRhaW5zOiBWQUxVRV9NT0RFUyxcbiAgICBrZXl3b3JkczogQVRfS0VZV09SRFMsXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07XG5cbiAgLy8gZ2VuZXJpYyBMZXNzIGhpZ2hsaWdodGVyICh1c2VkIGFsbW9zdCBldmVyeXdoZXJlIGV4Y2VwdCBzZWxlY3RvcnMpOlxuICBWQUxVRV9NT0RFUy5wdXNoKFxuICAgIGhsanMuQ19MSU5FX0NPTU1FTlRfTU9ERSxcbiAgICBobGpzLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLFxuICAgIFNUUklOR19NT0RFKFwiJ1wiKSxcbiAgICBTVFJJTkdfTU9ERSgnXCInKSxcbiAgICBtb2Rlcy5DU1NfTlVNQkVSX01PREUsIC8vIGZpeG1lOiBpdCBkb2VzIG5vdCBpbmNsdWRlIGRvdCBmb3IgbnVtYmVycyBsaWtlIC41ZW0gOihcbiAgICB7XG4gICAgICBiZWdpbjogJyh1cmx8ZGF0YS11cmkpXFxcXCgnLFxuICAgICAgc3RhcnRzOiB7XG4gICAgICAgIGNsYXNzTmFtZTogJ3N0cmluZycsXG4gICAgICAgIGVuZDogJ1tcXFxcKVxcXFxuXScsXG4gICAgICAgIGV4Y2x1ZGVFbmQ6IHRydWVcbiAgICAgIH1cbiAgICB9LFxuICAgIG1vZGVzLkhFWENPTE9SLFxuICAgIFBBUkVOU19NT0RFLFxuICAgIElERU5UX01PREUoJ3ZhcmlhYmxlJywgJ0BAPycgKyBJREVOVF9SRSwgMTApLFxuICAgIElERU5UX01PREUoJ3ZhcmlhYmxlJywgJ0BcXFxceycgKyBJREVOVF9SRSArICdcXFxcfScpLFxuICAgIElERU5UX01PREUoJ2J1aWx0X2luJywgJ34/YFteYF0qP2AnKSwgLy8gaW5saW5lIGphdmFzY3JpcHQgKG9yIHdoYXRldmVyIGhvc3QgbGFuZ3VhZ2UpICptdWx0aWxpbmUqIHN0cmluZ1xuICAgIHsgLy8gQG1lZGlhIGZlYXR1cmVzIChpdOKAmXMgaGVyZSB0byBub3QgZHVwbGljYXRlIHRoaW5ncyBpbiBBVF9SVUxFX01PREUgd2l0aCBleHRyYSBQQVJFTlNfTU9ERSBvdmVycmlkaW5nKTpcbiAgICAgIGNsYXNzTmFtZTogJ2F0dHJpYnV0ZScsXG4gICAgICBiZWdpbjogSURFTlRfUkUgKyAnXFxcXHMqOicsXG4gICAgICBlbmQ6ICc6JyxcbiAgICAgIHJldHVybkJlZ2luOiB0cnVlLFxuICAgICAgZXhjbHVkZUVuZDogdHJ1ZVxuICAgIH0sXG4gICAgbW9kZXMuSU1QT1JUQU5ULFxuICAgIHsgYmVnaW5LZXl3b3JkczogJ2FuZCBub3QnIH0sXG4gICAgbW9kZXMuRlVOQ1RJT05fRElTUEFUQ0hcbiAgKTtcblxuICBjb25zdCBWQUxVRV9XSVRIX1JVTEVTRVRTID0gVkFMVUVfTU9ERVMuY29uY2F0KHtcbiAgICBiZWdpbjogL1xcey8sXG4gICAgZW5kOiAvXFx9LyxcbiAgICBjb250YWluczogUlVMRVNcbiAgfSk7XG5cbiAgY29uc3QgTUlYSU5fR1VBUkRfTU9ERSA9IHtcbiAgICBiZWdpbktleXdvcmRzOiAnd2hlbicsXG4gICAgZW5kc1dpdGhQYXJlbnQ6IHRydWUsXG4gICAgY29udGFpbnM6IFsgeyBiZWdpbktleXdvcmRzOiAnYW5kIG5vdCcgfSBdLmNvbmNhdChWQUxVRV9NT0RFUykgLy8gdXNpbmcgdGhpcyBmb3JtIHRvIG92ZXJyaWRlIFZBTFVF4oCZcyAnZnVuY3Rpb24nIG1hdGNoXG4gIH07XG5cbiAgLyogUnVsZS1MZXZlbCBNb2RlcyAqL1xuXG4gIGNvbnN0IFJVTEVfTU9ERSA9IHtcbiAgICBiZWdpbjogSU5URVJQX0lERU5UX1JFICsgJ1xcXFxzKjonLFxuICAgIHJldHVybkJlZ2luOiB0cnVlLFxuICAgIGVuZDogL1s7fV0vLFxuICAgIHJlbGV2YW5jZTogMCxcbiAgICBjb250YWluczogW1xuICAgICAgeyBiZWdpbjogLy0od2Via2l0fG1venxtc3xvKS0vIH0sXG4gICAgICBtb2Rlcy5DU1NfVkFSSUFCTEUsXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2F0dHJpYnV0ZScsXG4gICAgICAgIGJlZ2luOiAnXFxcXGIoJyArIEFUVFJJQlVURVMuam9pbignfCcpICsgJylcXFxcYicsXG4gICAgICAgIGVuZDogLyg/PTopLyxcbiAgICAgICAgc3RhcnRzOiB7XG4gICAgICAgICAgZW5kc1dpdGhQYXJlbnQ6IHRydWUsXG4gICAgICAgICAgaWxsZWdhbDogJ1s8PSRdJyxcbiAgICAgICAgICByZWxldmFuY2U6IDAsXG4gICAgICAgICAgY29udGFpbnM6IFZBTFVFX01PREVTXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH07XG5cbiAgY29uc3QgQVRfUlVMRV9NT0RFID0ge1xuICAgIGNsYXNzTmFtZTogJ2tleXdvcmQnLFxuICAgIGJlZ2luOiAnQChpbXBvcnR8bWVkaWF8Y2hhcnNldHxmb250LWZhY2V8KC1bYS16XSstKT9rZXlmcmFtZXN8c3VwcG9ydHN8ZG9jdW1lbnR8bmFtZXNwYWNlfHBhZ2V8dmlld3BvcnR8aG9zdClcXFxcYicsXG4gICAgc3RhcnRzOiB7XG4gICAgICBlbmQ6ICdbO3t9XScsXG4gICAgICBrZXl3b3JkczogQVRfS0VZV09SRFMsXG4gICAgICByZXR1cm5FbmQ6IHRydWUsXG4gICAgICBjb250YWluczogVkFMVUVfTU9ERVMsXG4gICAgICByZWxldmFuY2U6IDBcbiAgICB9XG4gIH07XG5cbiAgLy8gdmFyaWFibGUgZGVmaW5pdGlvbnMgYW5kIGNhbGxzXG4gIGNvbnN0IFZBUl9SVUxFX01PREUgPSB7XG4gICAgY2xhc3NOYW1lOiAndmFyaWFibGUnLFxuICAgIHZhcmlhbnRzOiBbXG4gICAgICAvLyB1c2luZyBtb3JlIHN0cmljdCBwYXR0ZXJuIGZvciBoaWdoZXIgcmVsZXZhbmNlIHRvIGluY3JlYXNlIGNoYW5jZXMgb2YgTGVzcyBkZXRlY3Rpb24uXG4gICAgICAvLyB0aGlzIGlzICp0aGUgb25seSogTGVzcyBzcGVjaWZpYyBzdGF0ZW1lbnQgdXNlZCBpbiBtb3N0IG9mIHRoZSBzb3VyY2VzLCBzby4uLlxuICAgICAgLy8gKHdl4oCZbGwgc3RpbGwgb2Z0ZW4gbG9vc2UgdG8gdGhlIGNzcy1wYXJzZXIgdW5sZXNzIHRoZXJlJ3MgJy8vJyBjb21tZW50LFxuICAgICAgLy8gc2ltcGx5IGJlY2F1c2UgMSB2YXJpYWJsZSBqdXN0IGNhbid0IGJlYXQgOTkgcHJvcGVydGllcyA6KVxuICAgICAge1xuICAgICAgICBiZWdpbjogJ0AnICsgSURFTlRfUkUgKyAnXFxcXHMqOicsXG4gICAgICAgIHJlbGV2YW5jZTogMTVcbiAgICAgIH0sXG4gICAgICB7IGJlZ2luOiAnQCcgKyBJREVOVF9SRSB9XG4gICAgXSxcbiAgICBzdGFydHM6IHtcbiAgICAgIGVuZDogJ1s7fV0nLFxuICAgICAgcmV0dXJuRW5kOiB0cnVlLFxuICAgICAgY29udGFpbnM6IFZBTFVFX1dJVEhfUlVMRVNFVFNcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgU0VMRUNUT1JfTU9ERSA9IHtcbiAgICAvLyBmaXJzdCBwYXJzZSB1bmFtYmlndW91cyBzZWxlY3RvcnMgKGkuZS4gdGhvc2Ugbm90IHN0YXJ0aW5nIHdpdGggdGFnKVxuICAgIC8vIHRoZW4gZmFsbCBpbnRvIHRoZSBzY2FyeSBsb29rYWhlYWQtZGlzY3JpbWluYXRvciB2YXJpYW50LlxuICAgIC8vIHRoaXMgbW9kZSBhbHNvIGhhbmRsZXMgbWl4aW4gZGVmaW5pdGlvbnMgYW5kIGNhbGxzXG4gICAgdmFyaWFudHM6IFtcbiAgICAgIHtcbiAgICAgICAgYmVnaW46ICdbXFxcXC4jOiZcXFxcWz5dJyxcbiAgICAgICAgZW5kOiAnWzt7fV0nIC8vIG1peGluIGNhbGxzIGVuZCB3aXRoICc7J1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYmVnaW46IElOVEVSUF9JREVOVF9SRSxcbiAgICAgICAgZW5kOiAvXFx7L1xuICAgICAgfVxuICAgIF0sXG4gICAgcmV0dXJuQmVnaW46IHRydWUsXG4gICAgcmV0dXJuRW5kOiB0cnVlLFxuICAgIGlsbGVnYWw6ICdbPD1cXCckXCJdJyxcbiAgICByZWxldmFuY2U6IDAsXG4gICAgY29udGFpbnM6IFtcbiAgICAgIGhsanMuQ19MSU5FX0NPTU1FTlRfTU9ERSxcbiAgICAgIGhsanMuQ19CTE9DS19DT01NRU5UX01PREUsXG4gICAgICBNSVhJTl9HVUFSRF9NT0RFLFxuICAgICAgSURFTlRfTU9ERSgna2V5d29yZCcsICdhbGxcXFxcYicpLFxuICAgICAgSURFTlRfTU9ERSgndmFyaWFibGUnLCAnQFxcXFx7JyArIElERU5UX1JFICsgJ1xcXFx9JyksIC8vIG90aGVyd2lzZSBpdOKAmXMgaWRlbnRpZmllZCBhcyB0YWdcbiAgICAgIFxuICAgICAge1xuICAgICAgICBiZWdpbjogJ1xcXFxiKCcgKyBUQUdTLmpvaW4oJ3wnKSArICcpXFxcXGInLFxuICAgICAgICBjbGFzc05hbWU6ICdzZWxlY3Rvci10YWcnXG4gICAgICB9LFxuICAgICAgbW9kZXMuQ1NTX05VTUJFUl9NT0RFLFxuICAgICAgSURFTlRfTU9ERSgnc2VsZWN0b3ItdGFnJywgSU5URVJQX0lERU5UX1JFLCAwKSxcbiAgICAgIElERU5UX01PREUoJ3NlbGVjdG9yLWlkJywgJyMnICsgSU5URVJQX0lERU5UX1JFKSxcbiAgICAgIElERU5UX01PREUoJ3NlbGVjdG9yLWNsYXNzJywgJ1xcXFwuJyArIElOVEVSUF9JREVOVF9SRSwgMCksXG4gICAgICBJREVOVF9NT0RFKCdzZWxlY3Rvci10YWcnLCAnJicsIDApLFxuICAgICAgbW9kZXMuQVRUUklCVVRFX1NFTEVDVE9SX01PREUsXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ3NlbGVjdG9yLXBzZXVkbycsXG4gICAgICAgIGJlZ2luOiAnOignICsgUFNFVURPX0NMQVNTRVMuam9pbignfCcpICsgJyknXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdzZWxlY3Rvci1wc2V1ZG8nLFxuICAgICAgICBiZWdpbjogJzooOik/KCcgKyBQU0VVRE9fRUxFTUVOVFMuam9pbignfCcpICsgJyknXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBiZWdpbjogL1xcKC8sXG4gICAgICAgIGVuZDogL1xcKS8sXG4gICAgICAgIHJlbGV2YW5jZTogMCxcbiAgICAgICAgY29udGFpbnM6IFZBTFVFX1dJVEhfUlVMRVNFVFNcbiAgICAgIH0sIC8vIGFyZ3VtZW50IGxpc3Qgb2YgcGFyYW1ldHJpYyBtaXhpbnNcbiAgICAgIHsgYmVnaW46ICchaW1wb3J0YW50JyB9LCAvLyBlYXQgIWltcG9ydGFudCBhZnRlciBtaXhpbiBjYWxsIG9yIGl0IHdpbGwgYmUgY29sb3JlZCBhcyB0YWdcbiAgICAgIG1vZGVzLkZVTkNUSU9OX0RJU1BBVENIXG4gICAgXVxuICB9O1xuXG4gIGNvbnN0IFBTRVVET19TRUxFQ1RPUl9NT0RFID0ge1xuICAgIGJlZ2luOiBJREVOVF9SRSArICc6KDopPycgKyBgKCR7UFNFVURPX1NFTEVDVE9SUyQxLmpvaW4oJ3wnKX0pYCxcbiAgICByZXR1cm5CZWdpbjogdHJ1ZSxcbiAgICBjb250YWluczogWyBTRUxFQ1RPUl9NT0RFIF1cbiAgfTtcblxuICBSVUxFUy5wdXNoKFxuICAgIGhsanMuQ19MSU5FX0NPTU1FTlRfTU9ERSxcbiAgICBobGpzLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLFxuICAgIEFUX1JVTEVfTU9ERSxcbiAgICBWQVJfUlVMRV9NT0RFLFxuICAgIFBTRVVET19TRUxFQ1RPUl9NT0RFLFxuICAgIFJVTEVfTU9ERSxcbiAgICBTRUxFQ1RPUl9NT0RFLFxuICAgIE1JWElOX0dVQVJEX01PREUsXG4gICAgbW9kZXMuRlVOQ1RJT05fRElTUEFUQ0hcbiAgKTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdMZXNzJyxcbiAgICBjYXNlX2luc2Vuc2l0aXZlOiB0cnVlLFxuICAgIGlsbGVnYWw6ICdbPT5cXCcvPCgkXCJdJyxcbiAgICBjb250YWluczogUlVMRVNcbiAgfTtcbn1cblxuZXhwb3J0IHsgbGVzcyBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsiTU9ERVMiLCJobGpzIiwiSU1QT1JUQU5UIiwic2NvcGUiLCJiZWdpbiIsIkJMT0NLX0NPTU1FTlQiLCJDX0JMT0NLX0NPTU1FTlRfTU9ERSIsIkhFWENPTE9SIiwiRlVOQ1RJT05fRElTUEFUQ0giLCJjbGFzc05hbWUiLCJBVFRSSUJVVEVfU0VMRUNUT1JfTU9ERSIsImVuZCIsImlsbGVnYWwiLCJjb250YWlucyIsIkFQT1NfU1RSSU5HX01PREUiLCJRVU9URV9TVFJJTkdfTU9ERSIsIkNTU19OVU1CRVJfTU9ERSIsIk5VTUJFUl9SRSIsInJlbGV2YW5jZSIsIkNTU19WQVJJQUJMRSIsIkhUTUxfVEFHUyIsIlNWR19UQUdTIiwiVEFHUyIsIk1FRElBX0ZFQVRVUkVTIiwic29ydCIsInJldmVyc2UiLCJQU0VVRE9fQ0xBU1NFUyIsIlBTRVVET19FTEVNRU5UUyIsIkFUVFJJQlVURVMiLCJQU0VVRE9fU0VMRUNUT1JTIiwiY29uY2F0IiwibGVzcyIsIm1vZGVzIiwiUFNFVURPX1NFTEVDVE9SUyQxIiwiQVRfTU9ESUZJRVJTIiwiSURFTlRfUkUiLCJJTlRFUlBfSURFTlRfUkUiLCJSVUxFUyIsIlZBTFVFX01PREVTIiwiU1RSSU5HX01PREUiLCJjIiwiSURFTlRfTU9ERSIsIm5hbWUiLCJBVF9LRVlXT1JEUyIsIiRwYXR0ZXJuIiwia2V5d29yZCIsImF0dHJpYnV0ZSIsImpvaW4iLCJQQVJFTlNfTU9ERSIsImtleXdvcmRzIiwicHVzaCIsIkNfTElORV9DT01NRU5UX01PREUiLCJzdGFydHMiLCJleGNsdWRlRW5kIiwicmV0dXJuQmVnaW4iLCJiZWdpbktleXdvcmRzIiwiVkFMVUVfV0lUSF9SVUxFU0VUUyIsIk1JWElOX0dVQVJEX01PREUiLCJlbmRzV2l0aFBhcmVudCIsIlJVTEVfTU9ERSIsIkFUX1JVTEVfTU9ERSIsInJldHVybkVuZCIsIlZBUl9SVUxFX01PREUiLCJ2YXJpYW50cyIsIlNFTEVDVE9SX01PREUiLCJQU0VVRE9fU0VMRUNUT1JfTU9ERSIsImNhc2VfaW5zZW5zaXRpdmUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/less.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/lua.js":
/*!*******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/lua.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ lua)\n/* harmony export */ });\n/*\nLanguage: Lua\nDescription: Lua is a powerful, efficient, lightweight, embeddable scripting language.\nAuthor: Andrew Fedorov <dmmdrs@mail.ru>\nCategory: common, gaming, scripting\nWebsite: https://www.lua.org\n*/ function lua(hljs) {\n    const OPENING_LONG_BRACKET = \"\\\\[=*\\\\[\";\n    const CLOSING_LONG_BRACKET = \"\\\\]=*\\\\]\";\n    const LONG_BRACKETS = {\n        begin: OPENING_LONG_BRACKET,\n        end: CLOSING_LONG_BRACKET,\n        contains: [\n            \"self\"\n        ]\n    };\n    const COMMENTS = [\n        hljs.COMMENT(\"--(?!\" + OPENING_LONG_BRACKET + \")\", \"$\"),\n        hljs.COMMENT(\"--\" + OPENING_LONG_BRACKET, CLOSING_LONG_BRACKET, {\n            contains: [\n                LONG_BRACKETS\n            ],\n            relevance: 10\n        })\n    ];\n    return {\n        name: \"Lua\",\n        aliases: [\n            \"pluto\"\n        ],\n        keywords: {\n            $pattern: hljs.UNDERSCORE_IDENT_RE,\n            literal: \"true false nil\",\n            keyword: \"and break do else elseif end for goto if in local not or repeat return then until while\",\n            built_in: // Metatags and globals:\n            \"_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len \" + \"__gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert \" + \"collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring \" + \"module next pairs pcall print rawequal rawget rawset require select setfenv \" + \"setmetatable tonumber tostring type unpack xpcall arg self \" + \"coroutine resume yield status wrap create running debug getupvalue \" + \"debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv \" + \"io lines write close flush open output type read stderr stdin input stdout popen tmpfile \" + \"math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan \" + \"os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall \" + \"string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower \" + \"table setn insert getn foreachi maxn foreach concat sort remove\"\n        },\n        contains: COMMENTS.concat([\n            {\n                className: \"function\",\n                beginKeywords: \"function\",\n                end: \"\\\\)\",\n                contains: [\n                    hljs.inherit(hljs.TITLE_MODE, {\n                        begin: \"([_a-zA-Z]\\\\w*\\\\.)*([_a-zA-Z]\\\\w*:)?[_a-zA-Z]\\\\w*\"\n                    }),\n                    {\n                        className: \"params\",\n                        begin: \"\\\\(\",\n                        endsWithParent: true,\n                        contains: COMMENTS\n                    }\n                ].concat(COMMENTS)\n            },\n            hljs.C_NUMBER_MODE,\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE,\n            {\n                className: \"string\",\n                begin: OPENING_LONG_BRACKET,\n                end: CLOSING_LONG_BRACKET,\n                contains: [\n                    LONG_BRACKETS\n                ],\n                relevance: 5\n            }\n        ])\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9sdWEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7QUFNQSxHQUVBLFNBQVNBLElBQUlDLElBQUk7SUFDZixNQUFNQyx1QkFBdUI7SUFDN0IsTUFBTUMsdUJBQXVCO0lBQzdCLE1BQU1DLGdCQUFnQjtRQUNwQkMsT0FBT0g7UUFDUEksS0FBS0g7UUFDTEksVUFBVTtZQUFFO1NBQVE7SUFDdEI7SUFDQSxNQUFNQyxXQUFXO1FBQ2ZQLEtBQUtRLE9BQU8sQ0FBQyxVQUFVUCx1QkFBdUIsS0FBSztRQUNuREQsS0FBS1EsT0FBTyxDQUNWLE9BQU9QLHNCQUNQQyxzQkFDQTtZQUNFSSxVQUFVO2dCQUFFSDthQUFlO1lBQzNCTSxXQUFXO1FBQ2I7S0FFSDtJQUNELE9BQU87UUFDTEMsTUFBTTtRQUNOQyxTQUFTO1lBQUM7U0FBUTtRQUNsQkMsVUFBVTtZQUNSQyxVQUFVYixLQUFLYyxtQkFBbUI7WUFDbENDLFNBQVM7WUFDVEMsU0FBUztZQUNUQyxVQUNFLHdCQUF3QjtZQUN4QixvRkFDRSxtRkFFQSxzRkFDQSxpRkFDQSxnRUFFQSx3RUFDQSxnSUFDQSw4RkFDQSxvS0FDQSxxSkFDQSwrRkFDQTtRQUNOO1FBQ0FYLFVBQVVDLFNBQVNXLE1BQU0sQ0FBQztZQUN4QjtnQkFDRUMsV0FBVztnQkFDWEMsZUFBZTtnQkFDZmYsS0FBSztnQkFDTEMsVUFBVTtvQkFDUk4sS0FBS3FCLE9BQU8sQ0FBQ3JCLEtBQUtzQixVQUFVLEVBQUU7d0JBQUVsQixPQUFPO29CQUFvRDtvQkFDM0Y7d0JBQ0VlLFdBQVc7d0JBQ1hmLE9BQU87d0JBQ1BtQixnQkFBZ0I7d0JBQ2hCakIsVUFBVUM7b0JBQ1o7aUJBQ0QsQ0FBQ1csTUFBTSxDQUFDWDtZQUNYO1lBQ0FQLEtBQUt3QixhQUFhO1lBQ2xCeEIsS0FBS3lCLGdCQUFnQjtZQUNyQnpCLEtBQUswQixpQkFBaUI7WUFDdEI7Z0JBQ0VQLFdBQVc7Z0JBQ1hmLE9BQU9IO2dCQUNQSSxLQUFLSDtnQkFDTEksVUFBVTtvQkFBRUg7aUJBQWU7Z0JBQzNCTSxXQUFXO1lBQ2I7U0FDRDtJQUNIO0FBQ0Y7QUFFMEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbW5pLWNoYXQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9sdWEuanM/Y2U4YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTGFuZ3VhZ2U6IEx1YVxuRGVzY3JpcHRpb246IEx1YSBpcyBhIHBvd2VyZnVsLCBlZmZpY2llbnQsIGxpZ2h0d2VpZ2h0LCBlbWJlZGRhYmxlIHNjcmlwdGluZyBsYW5ndWFnZS5cbkF1dGhvcjogQW5kcmV3IEZlZG9yb3YgPGRtbWRyc0BtYWlsLnJ1PlxuQ2F0ZWdvcnk6IGNvbW1vbiwgZ2FtaW5nLCBzY3JpcHRpbmdcbldlYnNpdGU6IGh0dHBzOi8vd3d3Lmx1YS5vcmdcbiovXG5cbmZ1bmN0aW9uIGx1YShobGpzKSB7XG4gIGNvbnN0IE9QRU5JTkdfTE9OR19CUkFDS0VUID0gJ1xcXFxbPSpcXFxcWyc7XG4gIGNvbnN0IENMT1NJTkdfTE9OR19CUkFDS0VUID0gJ1xcXFxdPSpcXFxcXSc7XG4gIGNvbnN0IExPTkdfQlJBQ0tFVFMgPSB7XG4gICAgYmVnaW46IE9QRU5JTkdfTE9OR19CUkFDS0VULFxuICAgIGVuZDogQ0xPU0lOR19MT05HX0JSQUNLRVQsXG4gICAgY29udGFpbnM6IFsgJ3NlbGYnIF1cbiAgfTtcbiAgY29uc3QgQ09NTUVOVFMgPSBbXG4gICAgaGxqcy5DT01NRU5UKCctLSg/IScgKyBPUEVOSU5HX0xPTkdfQlJBQ0tFVCArICcpJywgJyQnKSxcbiAgICBobGpzLkNPTU1FTlQoXG4gICAgICAnLS0nICsgT1BFTklOR19MT05HX0JSQUNLRVQsXG4gICAgICBDTE9TSU5HX0xPTkdfQlJBQ0tFVCxcbiAgICAgIHtcbiAgICAgICAgY29udGFpbnM6IFsgTE9OR19CUkFDS0VUUyBdLFxuICAgICAgICByZWxldmFuY2U6IDEwXG4gICAgICB9XG4gICAgKVxuICBdO1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdMdWEnLFxuICAgIGFsaWFzZXM6IFsncGx1dG8nXSxcbiAgICBrZXl3b3Jkczoge1xuICAgICAgJHBhdHRlcm46IGhsanMuVU5ERVJTQ09SRV9JREVOVF9SRSxcbiAgICAgIGxpdGVyYWw6IFwidHJ1ZSBmYWxzZSBuaWxcIixcbiAgICAgIGtleXdvcmQ6IFwiYW5kIGJyZWFrIGRvIGVsc2UgZWxzZWlmIGVuZCBmb3IgZ290byBpZiBpbiBsb2NhbCBub3Qgb3IgcmVwZWF0IHJldHVybiB0aGVuIHVudGlsIHdoaWxlXCIsXG4gICAgICBidWlsdF9pbjpcbiAgICAgICAgLy8gTWV0YXRhZ3MgYW5kIGdsb2JhbHM6XG4gICAgICAgICdfRyBfRU5WIF9WRVJTSU9OIF9faW5kZXggX19uZXdpbmRleCBfX21vZGUgX19jYWxsIF9fbWV0YXRhYmxlIF9fdG9zdHJpbmcgX19sZW4gJ1xuICAgICAgICArICdfX2djIF9fYWRkIF9fc3ViIF9fbXVsIF9fZGl2IF9fbW9kIF9fcG93IF9fY29uY2F0IF9fdW5tIF9fZXEgX19sdCBfX2xlIGFzc2VydCAnXG4gICAgICAgIC8vIFN0YW5kYXJkIG1ldGhvZHMgYW5kIHByb3BlcnRpZXM6XG4gICAgICAgICsgJ2NvbGxlY3RnYXJiYWdlIGRvZmlsZSBlcnJvciBnZXRmZW52IGdldG1ldGF0YWJsZSBpcGFpcnMgbG9hZCBsb2FkZmlsZSBsb2Fkc3RyaW5nICdcbiAgICAgICAgKyAnbW9kdWxlIG5leHQgcGFpcnMgcGNhbGwgcHJpbnQgcmF3ZXF1YWwgcmF3Z2V0IHJhd3NldCByZXF1aXJlIHNlbGVjdCBzZXRmZW52ICdcbiAgICAgICAgKyAnc2V0bWV0YXRhYmxlIHRvbnVtYmVyIHRvc3RyaW5nIHR5cGUgdW5wYWNrIHhwY2FsbCBhcmcgc2VsZiAnXG4gICAgICAgIC8vIExpYnJhcnkgbWV0aG9kcyBhbmQgcHJvcGVydGllcyAob25lIGxpbmUgcGVyIGxpYnJhcnkpOlxuICAgICAgICArICdjb3JvdXRpbmUgcmVzdW1lIHlpZWxkIHN0YXR1cyB3cmFwIGNyZWF0ZSBydW5uaW5nIGRlYnVnIGdldHVwdmFsdWUgJ1xuICAgICAgICArICdkZWJ1ZyBzZXRob29rIGdldG1ldGF0YWJsZSBnZXRob29rIHNldG1ldGF0YWJsZSBzZXRsb2NhbCB0cmFjZWJhY2sgc2V0ZmVudiBnZXRpbmZvIHNldHVwdmFsdWUgZ2V0bG9jYWwgZ2V0cmVnaXN0cnkgZ2V0ZmVudiAnXG4gICAgICAgICsgJ2lvIGxpbmVzIHdyaXRlIGNsb3NlIGZsdXNoIG9wZW4gb3V0cHV0IHR5cGUgcmVhZCBzdGRlcnIgc3RkaW4gaW5wdXQgc3Rkb3V0IHBvcGVuIHRtcGZpbGUgJ1xuICAgICAgICArICdtYXRoIGxvZyBtYXggYWNvcyBodWdlIGxkZXhwIHBpIGNvcyB0YW5oIHBvdyBkZWcgdGFuIGNvc2ggc2luaCByYW5kb20gcmFuZG9tc2VlZCBmcmV4cCBjZWlsIGZsb29yIHJhZCBhYnMgc3FydCBtb2RmIGFzaW4gbWluIG1vZCBmbW9kIGxvZzEwIGF0YW4yIGV4cCBzaW4gYXRhbiAnXG4gICAgICAgICsgJ29zIGV4aXQgc2V0bG9jYWxlIGRhdGUgZ2V0ZW52IGRpZmZ0aW1lIHJlbW92ZSB0aW1lIGNsb2NrIHRtcG5hbWUgcmVuYW1lIGV4ZWN1dGUgcGFja2FnZSBwcmVsb2FkIGxvYWRsaWIgbG9hZGVkIGxvYWRlcnMgY3BhdGggY29uZmlnIHBhdGggc2VlYWxsICdcbiAgICAgICAgKyAnc3RyaW5nIHN1YiB1cHBlciBsZW4gZ2ZpbmQgcmVwIGZpbmQgbWF0Y2ggY2hhciBkdW1wIGdtYXRjaCByZXZlcnNlIGJ5dGUgZm9ybWF0IGdzdWIgbG93ZXIgJ1xuICAgICAgICArICd0YWJsZSBzZXRuIGluc2VydCBnZXRuIGZvcmVhY2hpIG1heG4gZm9yZWFjaCBjb25jYXQgc29ydCByZW1vdmUnXG4gICAgfSxcbiAgICBjb250YWluczogQ09NTUVOVFMuY29uY2F0KFtcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnZnVuY3Rpb24nLFxuICAgICAgICBiZWdpbktleXdvcmRzOiAnZnVuY3Rpb24nLFxuICAgICAgICBlbmQ6ICdcXFxcKScsXG4gICAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgICAgaGxqcy5pbmhlcml0KGhsanMuVElUTEVfTU9ERSwgeyBiZWdpbjogJyhbX2EtekEtWl1cXFxcdypcXFxcLikqKFtfYS16QS1aXVxcXFx3KjopP1tfYS16QS1aXVxcXFx3KicgfSksXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAncGFyYW1zJyxcbiAgICAgICAgICAgIGJlZ2luOiAnXFxcXCgnLFxuICAgICAgICAgICAgZW5kc1dpdGhQYXJlbnQ6IHRydWUsXG4gICAgICAgICAgICBjb250YWluczogQ09NTUVOVFNcbiAgICAgICAgICB9XG4gICAgICAgIF0uY29uY2F0KENPTU1FTlRTKVxuICAgICAgfSxcbiAgICAgIGhsanMuQ19OVU1CRVJfTU9ERSxcbiAgICAgIGhsanMuQVBPU19TVFJJTkdfTU9ERSxcbiAgICAgIGhsanMuUVVPVEVfU1RSSU5HX01PREUsXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ3N0cmluZycsXG4gICAgICAgIGJlZ2luOiBPUEVOSU5HX0xPTkdfQlJBQ0tFVCxcbiAgICAgICAgZW5kOiBDTE9TSU5HX0xPTkdfQlJBQ0tFVCxcbiAgICAgICAgY29udGFpbnM6IFsgTE9OR19CUkFDS0VUUyBdLFxuICAgICAgICByZWxldmFuY2U6IDVcbiAgICAgIH1cbiAgICBdKVxuICB9O1xufVxuXG5leHBvcnQgeyBsdWEgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbImx1YSIsImhsanMiLCJPUEVOSU5HX0xPTkdfQlJBQ0tFVCIsIkNMT1NJTkdfTE9OR19CUkFDS0VUIiwiTE9OR19CUkFDS0VUUyIsImJlZ2luIiwiZW5kIiwiY29udGFpbnMiLCJDT01NRU5UUyIsIkNPTU1FTlQiLCJyZWxldmFuY2UiLCJuYW1lIiwiYWxpYXNlcyIsImtleXdvcmRzIiwiJHBhdHRlcm4iLCJVTkRFUlNDT1JFX0lERU5UX1JFIiwibGl0ZXJhbCIsImtleXdvcmQiLCJidWlsdF9pbiIsImNvbmNhdCIsImNsYXNzTmFtZSIsImJlZ2luS2V5d29yZHMiLCJpbmhlcml0IiwiVElUTEVfTU9ERSIsImVuZHNXaXRoUGFyZW50IiwiQ19OVU1CRVJfTU9ERSIsIkFQT1NfU1RSSU5HX01PREUiLCJRVU9URV9TVFJJTkdfTU9ERSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/lua.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/makefile.js":
/*!************************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/makefile.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ makefile)\n/* harmony export */ });\n/*\nLanguage: Makefile\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nContributors: Joël Porquet <joel@porquet.org>\nWebsite: https://www.gnu.org/software/make/manual/html_node/Introduction.html\nCategory: common, build-system\n*/ function makefile(hljs) {\n    /* Variables: simple (eg $(var)) and special (eg $@) */ const VARIABLE = {\n        className: \"variable\",\n        variants: [\n            {\n                begin: \"\\\\$\\\\(\" + hljs.UNDERSCORE_IDENT_RE + \"\\\\)\",\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ]\n            },\n            {\n                begin: /\\$[@%<?\\^\\+\\*]/\n            }\n        ]\n    };\n    /* Quoted string with variables inside */ const QUOTE_STRING = {\n        className: \"string\",\n        begin: /\"/,\n        end: /\"/,\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            VARIABLE\n        ]\n    };\n    /* Function: $(func arg,...) */ const FUNC = {\n        className: \"variable\",\n        begin: /\\$\\([\\w-]+\\s/,\n        end: /\\)/,\n        keywords: {\n            built_in: \"subst patsubst strip findstring filter filter-out sort \" + \"word wordlist firstword lastword dir notdir suffix basename \" + \"addsuffix addprefix join wildcard realpath abspath error warning \" + \"shell origin flavor foreach if or and call eval file value\"\n        },\n        contains: [\n            VARIABLE,\n            QUOTE_STRING // Added QUOTE_STRING as they can be a part of functions\n        ]\n    };\n    /* Variable assignment */ const ASSIGNMENT = {\n        begin: \"^\" + hljs.UNDERSCORE_IDENT_RE + \"\\\\s*(?=[:+?]?=)\"\n    };\n    /* Meta targets (.PHONY) */ const META = {\n        className: \"meta\",\n        begin: /^\\.PHONY:/,\n        end: /$/,\n        keywords: {\n            $pattern: /[\\.\\w]+/,\n            keyword: \".PHONY\"\n        }\n    };\n    /* Targets */ const TARGET = {\n        className: \"section\",\n        begin: /^[^\\s]+:/,\n        end: /$/,\n        contains: [\n            VARIABLE\n        ]\n    };\n    return {\n        name: \"Makefile\",\n        aliases: [\n            \"mk\",\n            \"mak\",\n            \"make\"\n        ],\n        keywords: {\n            $pattern: /[\\w-]+/,\n            keyword: \"define endef undefine ifdef ifndef ifeq ifneq else endif \" + \"include -include sinclude override export unexport private vpath\"\n        },\n        contains: [\n            hljs.HASH_COMMENT_MODE,\n            VARIABLE,\n            QUOTE_STRING,\n            FUNC,\n            ASSIGNMENT,\n            META,\n            TARGET\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9tYWtlZmlsZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7OztBQU1BLEdBRUEsU0FBU0EsU0FBU0MsSUFBSTtJQUNwQixxREFBcUQsR0FDckQsTUFBTUMsV0FBVztRQUNmQyxXQUFXO1FBQ1hDLFVBQVU7WUFDUjtnQkFDRUMsT0FBTyxXQUFXSixLQUFLSyxtQkFBbUIsR0FBRztnQkFDN0NDLFVBQVU7b0JBQUVOLEtBQUtPLGdCQUFnQjtpQkFBRTtZQUNyQztZQUNBO2dCQUFFSCxPQUFPO1lBQWlCO1NBQzNCO0lBQ0g7SUFDQSx1Q0FBdUMsR0FDdkMsTUFBTUksZUFBZTtRQUNuQk4sV0FBVztRQUNYRSxPQUFPO1FBQ1BLLEtBQUs7UUFDTEgsVUFBVTtZQUNSTixLQUFLTyxnQkFBZ0I7WUFDckJOO1NBQ0Q7SUFDSDtJQUNBLDZCQUE2QixHQUM3QixNQUFNUyxPQUFPO1FBQ1hSLFdBQVc7UUFDWEUsT0FBTztRQUNQSyxLQUFLO1FBQ0xFLFVBQVU7WUFBRUMsVUFDUiw0REFDRSxpRUFDQSxzRUFDQTtRQUE2RDtRQUNuRU4sVUFBVTtZQUNSTDtZQUNBTyxhQUFhLHdEQUF3RDtTQUN0RTtJQUNIO0lBQ0EsdUJBQXVCLEdBQ3ZCLE1BQU1LLGFBQWE7UUFBRVQsT0FBTyxNQUFNSixLQUFLSyxtQkFBbUIsR0FBRztJQUFrQjtJQUMvRSx5QkFBeUIsR0FDekIsTUFBTVMsT0FBTztRQUNYWixXQUFXO1FBQ1hFLE9BQU87UUFDUEssS0FBSztRQUNMRSxVQUFVO1lBQ1JJLFVBQVU7WUFDVkMsU0FBUztRQUNYO0lBQ0Y7SUFDQSxXQUFXLEdBQ1gsTUFBTUMsU0FBUztRQUNiZixXQUFXO1FBQ1hFLE9BQU87UUFDUEssS0FBSztRQUNMSCxVQUFVO1lBQUVMO1NBQVU7SUFDeEI7SUFDQSxPQUFPO1FBQ0xpQixNQUFNO1FBQ05DLFNBQVM7WUFDUDtZQUNBO1lBQ0E7U0FDRDtRQUNEUixVQUFVO1lBQ1JJLFVBQVU7WUFDVkMsU0FBUyw4REFDUDtRQUNKO1FBQ0FWLFVBQVU7WUFDUk4sS0FBS29CLGlCQUFpQjtZQUN0Qm5CO1lBQ0FPO1lBQ0FFO1lBQ0FHO1lBQ0FDO1lBQ0FHO1NBQ0Q7SUFDSDtBQUNGO0FBRStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb21uaS1jaGF0LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9lcy9sYW5ndWFnZXMvbWFrZWZpbGUuanM/NmU2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTGFuZ3VhZ2U6IE1ha2VmaWxlXG5BdXRob3I6IEl2YW4gU2FnYWxhZXYgPG1hbmlhY0Bzb2Z0d2FyZW1hbmlhY3Mub3JnPlxuQ29udHJpYnV0b3JzOiBKb8OrbCBQb3JxdWV0IDxqb2VsQHBvcnF1ZXQub3JnPlxuV2Vic2l0ZTogaHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9tYWtlL21hbnVhbC9odG1sX25vZGUvSW50cm9kdWN0aW9uLmh0bWxcbkNhdGVnb3J5OiBjb21tb24sIGJ1aWxkLXN5c3RlbVxuKi9cblxuZnVuY3Rpb24gbWFrZWZpbGUoaGxqcykge1xuICAvKiBWYXJpYWJsZXM6IHNpbXBsZSAoZWcgJCh2YXIpKSBhbmQgc3BlY2lhbCAoZWcgJEApICovXG4gIGNvbnN0IFZBUklBQkxFID0ge1xuICAgIGNsYXNzTmFtZTogJ3ZhcmlhYmxlJyxcbiAgICB2YXJpYW50czogW1xuICAgICAge1xuICAgICAgICBiZWdpbjogJ1xcXFwkXFxcXCgnICsgaGxqcy5VTkRFUlNDT1JFX0lERU5UX1JFICsgJ1xcXFwpJyxcbiAgICAgICAgY29udGFpbnM6IFsgaGxqcy5CQUNLU0xBU0hfRVNDQVBFIF1cbiAgICAgIH0sXG4gICAgICB7IGJlZ2luOiAvXFwkW0AlPD9cXF5cXCtcXCpdLyB9XG4gICAgXVxuICB9O1xuICAvKiBRdW90ZWQgc3RyaW5nIHdpdGggdmFyaWFibGVzIGluc2lkZSAqL1xuICBjb25zdCBRVU9URV9TVFJJTkcgPSB7XG4gICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICBiZWdpbjogL1wiLyxcbiAgICBlbmQ6IC9cIi8sXG4gICAgY29udGFpbnM6IFtcbiAgICAgIGhsanMuQkFDS1NMQVNIX0VTQ0FQRSxcbiAgICAgIFZBUklBQkxFXG4gICAgXVxuICB9O1xuICAvKiBGdW5jdGlvbjogJChmdW5jIGFyZywuLi4pICovXG4gIGNvbnN0IEZVTkMgPSB7XG4gICAgY2xhc3NOYW1lOiAndmFyaWFibGUnLFxuICAgIGJlZ2luOiAvXFwkXFwoW1xcdy1dK1xccy8sXG4gICAgZW5kOiAvXFwpLyxcbiAgICBrZXl3b3JkczogeyBidWlsdF9pbjpcbiAgICAgICAgJ3N1YnN0IHBhdHN1YnN0IHN0cmlwIGZpbmRzdHJpbmcgZmlsdGVyIGZpbHRlci1vdXQgc29ydCAnXG4gICAgICAgICsgJ3dvcmQgd29yZGxpc3QgZmlyc3R3b3JkIGxhc3R3b3JkIGRpciBub3RkaXIgc3VmZml4IGJhc2VuYW1lICdcbiAgICAgICAgKyAnYWRkc3VmZml4IGFkZHByZWZpeCBqb2luIHdpbGRjYXJkIHJlYWxwYXRoIGFic3BhdGggZXJyb3Igd2FybmluZyAnXG4gICAgICAgICsgJ3NoZWxsIG9yaWdpbiBmbGF2b3IgZm9yZWFjaCBpZiBvciBhbmQgY2FsbCBldmFsIGZpbGUgdmFsdWUnIH0sXG4gICAgY29udGFpbnM6IFsgXG4gICAgICBWQVJJQUJMRSxcbiAgICAgIFFVT1RFX1NUUklORyAvLyBBZGRlZCBRVU9URV9TVFJJTkcgYXMgdGhleSBjYW4gYmUgYSBwYXJ0IG9mIGZ1bmN0aW9uc1xuICAgIF1cbiAgfTtcbiAgLyogVmFyaWFibGUgYXNzaWdubWVudCAqL1xuICBjb25zdCBBU1NJR05NRU5UID0geyBiZWdpbjogJ14nICsgaGxqcy5VTkRFUlNDT1JFX0lERU5UX1JFICsgJ1xcXFxzKig/PVs6Kz9dPz0pJyB9O1xuICAvKiBNZXRhIHRhcmdldHMgKC5QSE9OWSkgKi9cbiAgY29uc3QgTUVUQSA9IHtcbiAgICBjbGFzc05hbWU6ICdtZXRhJyxcbiAgICBiZWdpbjogL15cXC5QSE9OWTovLFxuICAgIGVuZDogLyQvLFxuICAgIGtleXdvcmRzOiB7XG4gICAgICAkcGF0dGVybjogL1tcXC5cXHddKy8sXG4gICAgICBrZXl3b3JkOiAnLlBIT05ZJ1xuICAgIH1cbiAgfTtcbiAgLyogVGFyZ2V0cyAqL1xuICBjb25zdCBUQVJHRVQgPSB7XG4gICAgY2xhc3NOYW1lOiAnc2VjdGlvbicsXG4gICAgYmVnaW46IC9eW15cXHNdKzovLFxuICAgIGVuZDogLyQvLFxuICAgIGNvbnRhaW5zOiBbIFZBUklBQkxFIF1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnTWFrZWZpbGUnLFxuICAgIGFsaWFzZXM6IFtcbiAgICAgICdtaycsXG4gICAgICAnbWFrJyxcbiAgICAgICdtYWtlJyxcbiAgICBdLFxuICAgIGtleXdvcmRzOiB7XG4gICAgICAkcGF0dGVybjogL1tcXHctXSsvLFxuICAgICAga2V5d29yZDogJ2RlZmluZSBlbmRlZiB1bmRlZmluZSBpZmRlZiBpZm5kZWYgaWZlcSBpZm5lcSBlbHNlIGVuZGlmICdcbiAgICAgICsgJ2luY2x1ZGUgLWluY2x1ZGUgc2luY2x1ZGUgb3ZlcnJpZGUgZXhwb3J0IHVuZXhwb3J0IHByaXZhdGUgdnBhdGgnXG4gICAgfSxcbiAgICBjb250YWluczogW1xuICAgICAgaGxqcy5IQVNIX0NPTU1FTlRfTU9ERSxcbiAgICAgIFZBUklBQkxFLFxuICAgICAgUVVPVEVfU1RSSU5HLFxuICAgICAgRlVOQyxcbiAgICAgIEFTU0lHTk1FTlQsXG4gICAgICBNRVRBLFxuICAgICAgVEFSR0VUXG4gICAgXVxuICB9O1xufVxuXG5leHBvcnQgeyBtYWtlZmlsZSBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsibWFrZWZpbGUiLCJobGpzIiwiVkFSSUFCTEUiLCJjbGFzc05hbWUiLCJ2YXJpYW50cyIsImJlZ2luIiwiVU5ERVJTQ09SRV9JREVOVF9SRSIsImNvbnRhaW5zIiwiQkFDS1NMQVNIX0VTQ0FQRSIsIlFVT1RFX1NUUklORyIsImVuZCIsIkZVTkMiLCJrZXl3b3JkcyIsImJ1aWx0X2luIiwiQVNTSUdOTUVOVCIsIk1FVEEiLCIkcGF0dGVybiIsImtleXdvcmQiLCJUQVJHRVQiLCJuYW1lIiwiYWxpYXNlcyIsIkhBU0hfQ09NTUVOVF9NT0RFIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/makefile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/markdown.js":
/*!************************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/markdown.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ markdown)\n/* harmony export */ });\n/*\nLanguage: Markdown\nRequires: xml.js\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\nWebsite: https://daringfireball.net/projects/markdown/\nCategory: common, markup\n*/ function markdown(hljs) {\n    const regex = hljs.regex;\n    const INLINE_HTML = {\n        begin: /<\\/?[A-Za-z_]/,\n        end: \">\",\n        subLanguage: \"xml\",\n        relevance: 0\n    };\n    const HORIZONTAL_RULE = {\n        begin: \"^[-\\\\*]{3,}\",\n        end: \"$\"\n    };\n    const CODE = {\n        className: \"code\",\n        variants: [\n            // TODO: fix to allow these to work with sublanguage also\n            {\n                begin: \"(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*\"\n            },\n            {\n                begin: \"(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*\"\n            },\n            // needed to allow markdown as a sublanguage to work\n            {\n                begin: \"```\",\n                end: \"```+[ ]*$\"\n            },\n            {\n                begin: \"~~~\",\n                end: \"~~~+[ ]*$\"\n            },\n            {\n                begin: \"`.+?`\"\n            },\n            {\n                begin: \"(?=^( {4}|\\\\t))\",\n                // use contains to gobble up multiple lines to allow the block to be whatever size\n                // but only have a single open/close tag vs one per line\n                contains: [\n                    {\n                        begin: \"^( {4}|\\\\t)\",\n                        end: \"(\\\\n)$\"\n                    }\n                ],\n                relevance: 0\n            }\n        ]\n    };\n    const LIST = {\n        className: \"bullet\",\n        begin: \"^[ \t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)\",\n        end: \"\\\\s+\",\n        excludeEnd: true\n    };\n    const LINK_REFERENCE = {\n        begin: /^\\[[^\\n]+\\]:/,\n        returnBegin: true,\n        contains: [\n            {\n                className: \"symbol\",\n                begin: /\\[/,\n                end: /\\]/,\n                excludeBegin: true,\n                excludeEnd: true\n            },\n            {\n                className: \"link\",\n                begin: /:\\s*/,\n                end: /$/,\n                excludeBegin: true\n            }\n        ]\n    };\n    const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\n    const LINK = {\n        variants: [\n            // too much like nested array access in so many languages\n            // to have any real relevance\n            {\n                begin: /\\[.+?\\]\\[.*?\\]/,\n                relevance: 0\n            },\n            // popular internet URLs\n            {\n                begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n                relevance: 2\n            },\n            {\n                begin: regex.concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\n                relevance: 2\n            },\n            // relative urls\n            {\n                begin: /\\[.+?\\]\\([./?&#].*?\\)/,\n                relevance: 1\n            },\n            // whatever else, lower relevance (might not be a link at all)\n            {\n                begin: /\\[.*?\\]\\(.*?\\)/,\n                relevance: 0\n            }\n        ],\n        returnBegin: true,\n        contains: [\n            {\n                // empty strings for alt or link text\n                match: /\\[(?=\\])/\n            },\n            {\n                className: \"string\",\n                relevance: 0,\n                begin: \"\\\\[\",\n                end: \"\\\\]\",\n                excludeBegin: true,\n                returnEnd: true\n            },\n            {\n                className: \"link\",\n                relevance: 0,\n                begin: \"\\\\]\\\\(\",\n                end: \"\\\\)\",\n                excludeBegin: true,\n                excludeEnd: true\n            },\n            {\n                className: \"symbol\",\n                relevance: 0,\n                begin: \"\\\\]\\\\[\",\n                end: \"\\\\]\",\n                excludeBegin: true,\n                excludeEnd: true\n            }\n        ]\n    };\n    const BOLD = {\n        className: \"strong\",\n        contains: [],\n        variants: [\n            {\n                begin: /_{2}(?!\\s)/,\n                end: /_{2}/\n            },\n            {\n                begin: /\\*{2}(?!\\s)/,\n                end: /\\*{2}/\n            }\n        ]\n    };\n    const ITALIC = {\n        className: \"emphasis\",\n        contains: [],\n        variants: [\n            {\n                begin: /\\*(?![*\\s])/,\n                end: /\\*/\n            },\n            {\n                begin: /_(?![_\\s])/,\n                end: /_/,\n                relevance: 0\n            }\n        ]\n    };\n    // 3 level deep nesting is not allowed because it would create confusion\n    // in cases like `***testing***` because where we don't know if the last\n    // `***` is starting a new bold/italic or finishing the last one\n    const BOLD_WITHOUT_ITALIC = hljs.inherit(BOLD, {\n        contains: []\n    });\n    const ITALIC_WITHOUT_BOLD = hljs.inherit(ITALIC, {\n        contains: []\n    });\n    BOLD.contains.push(ITALIC_WITHOUT_BOLD);\n    ITALIC.contains.push(BOLD_WITHOUT_ITALIC);\n    let CONTAINABLE = [\n        INLINE_HTML,\n        LINK\n    ];\n    [\n        BOLD,\n        ITALIC,\n        BOLD_WITHOUT_ITALIC,\n        ITALIC_WITHOUT_BOLD\n    ].forEach((m)=>{\n        m.contains = m.contains.concat(CONTAINABLE);\n    });\n    CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\n    const HEADER = {\n        className: \"section\",\n        variants: [\n            {\n                begin: \"^#{1,6}\",\n                end: \"$\",\n                contains: CONTAINABLE\n            },\n            {\n                begin: \"(?=^.+?\\\\n[=-]{2,}$)\",\n                contains: [\n                    {\n                        begin: \"^[=-]*$\"\n                    },\n                    {\n                        begin: \"^\",\n                        end: \"\\\\n\",\n                        contains: CONTAINABLE\n                    }\n                ]\n            }\n        ]\n    };\n    const BLOCKQUOTE = {\n        className: \"quote\",\n        begin: \"^>\\\\s+\",\n        contains: CONTAINABLE,\n        end: \"$\"\n    };\n    const ENTITY = {\n        //https://spec.commonmark.org/0.31.2/#entity-references\n        scope: \"literal\",\n        match: /&([a-zA-Z0-9]+|#[0-9]{1,7}|#[Xx][0-9a-fA-F]{1,6});/\n    };\n    return {\n        name: \"Markdown\",\n        aliases: [\n            \"md\",\n            \"mkdown\",\n            \"mkd\"\n        ],\n        contains: [\n            HEADER,\n            INLINE_HTML,\n            LIST,\n            BOLD,\n            ITALIC,\n            BLOCKQUOTE,\n            CODE,\n            HORIZONTAL_RULE,\n            LINK,\n            LINK_REFERENCE,\n            ENTITY\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/markdown.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/objectivec.js":
/*!**************************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/objectivec.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ objectivec)\n/* harmony export */ });\n/*\nLanguage: Objective-C\nAuthor: Valerii Hiora <valerii.hiora@gmail.com>\nContributors: Angel G. Olloqui <angelgarcia.mail@gmail.com>, Matt Diephouse <matt@diephouse.com>, Andrew Farmer <ahfarmer@gmail.com>, Minh Nguyễn <mxn@1ec5.org>\nWebsite: https://developer.apple.com/documentation/objectivec\nCategory: common\n*/ function objectivec(hljs) {\n    const API_CLASS = {\n        className: \"built_in\",\n        begin: \"\\\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\\\w+\"\n    };\n    const IDENTIFIER_RE = /[a-zA-Z@][a-zA-Z0-9_]*/;\n    const TYPES = [\n        \"int\",\n        \"float\",\n        \"char\",\n        \"unsigned\",\n        \"signed\",\n        \"short\",\n        \"long\",\n        \"double\",\n        \"wchar_t\",\n        \"unichar\",\n        \"void\",\n        \"bool\",\n        \"BOOL\",\n        \"id|0\",\n        \"_Bool\"\n    ];\n    const KWS = [\n        \"while\",\n        \"export\",\n        \"sizeof\",\n        \"typedef\",\n        \"const\",\n        \"struct\",\n        \"for\",\n        \"union\",\n        \"volatile\",\n        \"static\",\n        \"mutable\",\n        \"if\",\n        \"do\",\n        \"return\",\n        \"goto\",\n        \"enum\",\n        \"else\",\n        \"break\",\n        \"extern\",\n        \"asm\",\n        \"case\",\n        \"default\",\n        \"register\",\n        \"explicit\",\n        \"typename\",\n        \"switch\",\n        \"continue\",\n        \"inline\",\n        \"readonly\",\n        \"assign\",\n        \"readwrite\",\n        \"self\",\n        \"@synchronized\",\n        \"id\",\n        \"typeof\",\n        \"nonatomic\",\n        \"IBOutlet\",\n        \"IBAction\",\n        \"strong\",\n        \"weak\",\n        \"copy\",\n        \"in\",\n        \"out\",\n        \"inout\",\n        \"bycopy\",\n        \"byref\",\n        \"oneway\",\n        \"__strong\",\n        \"__weak\",\n        \"__block\",\n        \"__autoreleasing\",\n        \"@private\",\n        \"@protected\",\n        \"@public\",\n        \"@try\",\n        \"@property\",\n        \"@end\",\n        \"@throw\",\n        \"@catch\",\n        \"@finally\",\n        \"@autoreleasepool\",\n        \"@synthesize\",\n        \"@dynamic\",\n        \"@selector\",\n        \"@optional\",\n        \"@required\",\n        \"@encode\",\n        \"@package\",\n        \"@import\",\n        \"@defs\",\n        \"@compatibility_alias\",\n        \"__bridge\",\n        \"__bridge_transfer\",\n        \"__bridge_retained\",\n        \"__bridge_retain\",\n        \"__covariant\",\n        \"__contravariant\",\n        \"__kindof\",\n        \"_Nonnull\",\n        \"_Nullable\",\n        \"_Null_unspecified\",\n        \"__FUNCTION__\",\n        \"__PRETTY_FUNCTION__\",\n        \"__attribute__\",\n        \"getter\",\n        \"setter\",\n        \"retain\",\n        \"unsafe_unretained\",\n        \"nonnull\",\n        \"nullable\",\n        \"null_unspecified\",\n        \"null_resettable\",\n        \"class\",\n        \"instancetype\",\n        \"NS_DESIGNATED_INITIALIZER\",\n        \"NS_UNAVAILABLE\",\n        \"NS_REQUIRES_SUPER\",\n        \"NS_RETURNS_INNER_POINTER\",\n        \"NS_INLINE\",\n        \"NS_AVAILABLE\",\n        \"NS_DEPRECATED\",\n        \"NS_ENUM\",\n        \"NS_OPTIONS\",\n        \"NS_SWIFT_UNAVAILABLE\",\n        \"NS_ASSUME_NONNULL_BEGIN\",\n        \"NS_ASSUME_NONNULL_END\",\n        \"NS_REFINED_FOR_SWIFT\",\n        \"NS_SWIFT_NAME\",\n        \"NS_SWIFT_NOTHROW\",\n        \"NS_DURING\",\n        \"NS_HANDLER\",\n        \"NS_ENDHANDLER\",\n        \"NS_VALUERETURN\",\n        \"NS_VOIDRETURN\"\n    ];\n    const LITERALS = [\n        \"false\",\n        \"true\",\n        \"FALSE\",\n        \"TRUE\",\n        \"nil\",\n        \"YES\",\n        \"NO\",\n        \"NULL\"\n    ];\n    const BUILT_INS = [\n        \"dispatch_once_t\",\n        \"dispatch_queue_t\",\n        \"dispatch_sync\",\n        \"dispatch_async\",\n        \"dispatch_once\"\n    ];\n    const KEYWORDS = {\n        \"variable.language\": [\n            \"this\",\n            \"super\"\n        ],\n        $pattern: IDENTIFIER_RE,\n        keyword: KWS,\n        literal: LITERALS,\n        built_in: BUILT_INS,\n        type: TYPES\n    };\n    const CLASS_KEYWORDS = {\n        $pattern: IDENTIFIER_RE,\n        keyword: [\n            \"@interface\",\n            \"@class\",\n            \"@protocol\",\n            \"@implementation\"\n        ]\n    };\n    return {\n        name: \"Objective-C\",\n        aliases: [\n            \"mm\",\n            \"objc\",\n            \"obj-c\",\n            \"obj-c++\",\n            \"objective-c++\"\n        ],\n        keywords: KEYWORDS,\n        illegal: \"</\",\n        contains: [\n            API_CLASS,\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            hljs.C_NUMBER_MODE,\n            hljs.QUOTE_STRING_MODE,\n            hljs.APOS_STRING_MODE,\n            {\n                className: \"string\",\n                variants: [\n                    {\n                        begin: '@\"',\n                        end: '\"',\n                        illegal: \"\\\\n\",\n                        contains: [\n                            hljs.BACKSLASH_ESCAPE\n                        ]\n                    }\n                ]\n            },\n            {\n                className: \"meta\",\n                begin: /#\\s*[a-z]+\\b/,\n                end: /$/,\n                keywords: {\n                    keyword: \"if else elif endif define undef warning error line \" + \"pragma ifdef ifndef include\"\n                },\n                contains: [\n                    {\n                        begin: /\\\\\\n/,\n                        relevance: 0\n                    },\n                    hljs.inherit(hljs.QUOTE_STRING_MODE, {\n                        className: \"string\"\n                    }),\n                    {\n                        className: \"string\",\n                        begin: /<.*?>/,\n                        end: /$/,\n                        illegal: \"\\\\n\"\n                    },\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            {\n                className: \"class\",\n                begin: \"(\" + CLASS_KEYWORDS.keyword.join(\"|\") + \")\\\\b\",\n                end: /(\\{|$)/,\n                excludeEnd: true,\n                keywords: CLASS_KEYWORDS,\n                contains: [\n                    hljs.UNDERSCORE_TITLE_MODE\n                ]\n            },\n            {\n                begin: \"\\\\.\" + hljs.UNDERSCORE_IDENT_RE,\n                relevance: 0\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9vYmplY3RpdmVjLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7O0FBTUEsR0FFQSxTQUFTQSxXQUFXQyxJQUFJO0lBQ3RCLE1BQU1DLFlBQVk7UUFDaEJDLFdBQVc7UUFDWEMsT0FBTztJQUNUO0lBQ0EsTUFBTUMsZ0JBQWdCO0lBQ3RCLE1BQU1DLFFBQVE7UUFDWjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUNELE1BQU1DLE1BQU07UUFDVjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUNELE1BQU1DLFdBQVc7UUFDZjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFDRCxNQUFNQyxZQUFZO1FBQ2hCO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUNELE1BQU1DLFdBQVc7UUFDZixxQkFBcUI7WUFDbkI7WUFDQTtTQUNEO1FBQ0RDLFVBQVVOO1FBQ1ZPLFNBQVNMO1FBQ1RNLFNBQVNMO1FBQ1RNLFVBQVVMO1FBQ1ZNLE1BQU1UO0lBQ1I7SUFDQSxNQUFNVSxpQkFBaUI7UUFDckJMLFVBQVVOO1FBQ1ZPLFNBQVM7WUFDUDtZQUNBO1lBQ0E7WUFDQTtTQUNEO0lBQ0g7SUFDQSxPQUFPO1FBQ0xLLE1BQU07UUFDTkMsU0FBUztZQUNQO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7U0FDRDtRQUNEQyxVQUFVVDtRQUNWVSxTQUFTO1FBQ1RDLFVBQVU7WUFDUm5CO1lBQ0FELEtBQUtxQixtQkFBbUI7WUFDeEJyQixLQUFLc0Isb0JBQW9CO1lBQ3pCdEIsS0FBS3VCLGFBQWE7WUFDbEJ2QixLQUFLd0IsaUJBQWlCO1lBQ3RCeEIsS0FBS3lCLGdCQUFnQjtZQUNyQjtnQkFDRXZCLFdBQVc7Z0JBQ1h3QixVQUFVO29CQUNSO3dCQUNFdkIsT0FBTzt3QkFDUHdCLEtBQUs7d0JBQ0xSLFNBQVM7d0JBQ1RDLFVBQVU7NEJBQUVwQixLQUFLNEIsZ0JBQWdCO3lCQUFFO29CQUNyQztpQkFDRDtZQUNIO1lBQ0E7Z0JBQ0UxQixXQUFXO2dCQUNYQyxPQUFPO2dCQUNQd0IsS0FBSztnQkFDTFQsVUFBVTtvQkFBRVAsU0FDUix3REFDRTtnQkFBOEI7Z0JBQ3BDUyxVQUFVO29CQUNSO3dCQUNFakIsT0FBTzt3QkFDUDBCLFdBQVc7b0JBQ2I7b0JBQ0E3QixLQUFLOEIsT0FBTyxDQUFDOUIsS0FBS3dCLGlCQUFpQixFQUFFO3dCQUFFdEIsV0FBVztvQkFBUztvQkFDM0Q7d0JBQ0VBLFdBQVc7d0JBQ1hDLE9BQU87d0JBQ1B3QixLQUFLO3dCQUNMUixTQUFTO29CQUNYO29CQUNBbkIsS0FBS3FCLG1CQUFtQjtvQkFDeEJyQixLQUFLc0Isb0JBQW9CO2lCQUMxQjtZQUNIO1lBQ0E7Z0JBQ0VwQixXQUFXO2dCQUNYQyxPQUFPLE1BQU1ZLGVBQWVKLE9BQU8sQ0FBQ29CLElBQUksQ0FBQyxPQUFPO2dCQUNoREosS0FBSztnQkFDTEssWUFBWTtnQkFDWmQsVUFBVUg7Z0JBQ1ZLLFVBQVU7b0JBQUVwQixLQUFLaUMscUJBQXFCO2lCQUFFO1lBQzFDO1lBQ0E7Z0JBQ0U5QixPQUFPLFFBQVFILEtBQUtrQyxtQkFBbUI7Z0JBQ3ZDTCxXQUFXO1lBQ2I7U0FDRDtJQUNIO0FBQ0Y7QUFFaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbW5pLWNoYXQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9vYmplY3RpdmVjLmpzP2VhNGEiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkxhbmd1YWdlOiBPYmplY3RpdmUtQ1xuQXV0aG9yOiBWYWxlcmlpIEhpb3JhIDx2YWxlcmlpLmhpb3JhQGdtYWlsLmNvbT5cbkNvbnRyaWJ1dG9yczogQW5nZWwgRy4gT2xsb3F1aSA8YW5nZWxnYXJjaWEubWFpbEBnbWFpbC5jb20+LCBNYXR0IERpZXBob3VzZSA8bWF0dEBkaWVwaG91c2UuY29tPiwgQW5kcmV3IEZhcm1lciA8YWhmYXJtZXJAZ21haWwuY29tPiwgTWluaCBOZ3V54buFbiA8bXhuQDFlYzUub3JnPlxuV2Vic2l0ZTogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vb2JqZWN0aXZlY1xuQ2F0ZWdvcnk6IGNvbW1vblxuKi9cblxuZnVuY3Rpb24gb2JqZWN0aXZlYyhobGpzKSB7XG4gIGNvbnN0IEFQSV9DTEFTUyA9IHtcbiAgICBjbGFzc05hbWU6ICdidWlsdF9pbicsXG4gICAgYmVnaW46ICdcXFxcYihBVnxDQXxDRnxDR3xDSXxDTHxDTXxDTnxDVHxNS3xNUHxNVEt8TVRMfE5TfFNDTnxTS3xVSXxXS3xYQylcXFxcdysnXG4gIH07XG4gIGNvbnN0IElERU5USUZJRVJfUkUgPSAvW2EtekEtWkBdW2EtekEtWjAtOV9dKi87XG4gIGNvbnN0IFRZUEVTID0gW1xuICAgIFwiaW50XCIsXG4gICAgXCJmbG9hdFwiLFxuICAgIFwiY2hhclwiLFxuICAgIFwidW5zaWduZWRcIixcbiAgICBcInNpZ25lZFwiLFxuICAgIFwic2hvcnRcIixcbiAgICBcImxvbmdcIixcbiAgICBcImRvdWJsZVwiLFxuICAgIFwid2NoYXJfdFwiLFxuICAgIFwidW5pY2hhclwiLFxuICAgIFwidm9pZFwiLFxuICAgIFwiYm9vbFwiLFxuICAgIFwiQk9PTFwiLFxuICAgIFwiaWR8MFwiLFxuICAgIFwiX0Jvb2xcIlxuICBdO1xuICBjb25zdCBLV1MgPSBbXG4gICAgXCJ3aGlsZVwiLFxuICAgIFwiZXhwb3J0XCIsXG4gICAgXCJzaXplb2ZcIixcbiAgICBcInR5cGVkZWZcIixcbiAgICBcImNvbnN0XCIsXG4gICAgXCJzdHJ1Y3RcIixcbiAgICBcImZvclwiLFxuICAgIFwidW5pb25cIixcbiAgICBcInZvbGF0aWxlXCIsXG4gICAgXCJzdGF0aWNcIixcbiAgICBcIm11dGFibGVcIixcbiAgICBcImlmXCIsXG4gICAgXCJkb1wiLFxuICAgIFwicmV0dXJuXCIsXG4gICAgXCJnb3RvXCIsXG4gICAgXCJlbnVtXCIsXG4gICAgXCJlbHNlXCIsXG4gICAgXCJicmVha1wiLFxuICAgIFwiZXh0ZXJuXCIsXG4gICAgXCJhc21cIixcbiAgICBcImNhc2VcIixcbiAgICBcImRlZmF1bHRcIixcbiAgICBcInJlZ2lzdGVyXCIsXG4gICAgXCJleHBsaWNpdFwiLFxuICAgIFwidHlwZW5hbWVcIixcbiAgICBcInN3aXRjaFwiLFxuICAgIFwiY29udGludWVcIixcbiAgICBcImlubGluZVwiLFxuICAgIFwicmVhZG9ubHlcIixcbiAgICBcImFzc2lnblwiLFxuICAgIFwicmVhZHdyaXRlXCIsXG4gICAgXCJzZWxmXCIsXG4gICAgXCJAc3luY2hyb25pemVkXCIsXG4gICAgXCJpZFwiLFxuICAgIFwidHlwZW9mXCIsXG4gICAgXCJub25hdG9taWNcIixcbiAgICBcIklCT3V0bGV0XCIsXG4gICAgXCJJQkFjdGlvblwiLFxuICAgIFwic3Ryb25nXCIsXG4gICAgXCJ3ZWFrXCIsXG4gICAgXCJjb3B5XCIsXG4gICAgXCJpblwiLFxuICAgIFwib3V0XCIsXG4gICAgXCJpbm91dFwiLFxuICAgIFwiYnljb3B5XCIsXG4gICAgXCJieXJlZlwiLFxuICAgIFwib25ld2F5XCIsXG4gICAgXCJfX3N0cm9uZ1wiLFxuICAgIFwiX193ZWFrXCIsXG4gICAgXCJfX2Jsb2NrXCIsXG4gICAgXCJfX2F1dG9yZWxlYXNpbmdcIixcbiAgICBcIkBwcml2YXRlXCIsXG4gICAgXCJAcHJvdGVjdGVkXCIsXG4gICAgXCJAcHVibGljXCIsXG4gICAgXCJAdHJ5XCIsXG4gICAgXCJAcHJvcGVydHlcIixcbiAgICBcIkBlbmRcIixcbiAgICBcIkB0aHJvd1wiLFxuICAgIFwiQGNhdGNoXCIsXG4gICAgXCJAZmluYWxseVwiLFxuICAgIFwiQGF1dG9yZWxlYXNlcG9vbFwiLFxuICAgIFwiQHN5bnRoZXNpemVcIixcbiAgICBcIkBkeW5hbWljXCIsXG4gICAgXCJAc2VsZWN0b3JcIixcbiAgICBcIkBvcHRpb25hbFwiLFxuICAgIFwiQHJlcXVpcmVkXCIsXG4gICAgXCJAZW5jb2RlXCIsXG4gICAgXCJAcGFja2FnZVwiLFxuICAgIFwiQGltcG9ydFwiLFxuICAgIFwiQGRlZnNcIixcbiAgICBcIkBjb21wYXRpYmlsaXR5X2FsaWFzXCIsXG4gICAgXCJfX2JyaWRnZVwiLFxuICAgIFwiX19icmlkZ2VfdHJhbnNmZXJcIixcbiAgICBcIl9fYnJpZGdlX3JldGFpbmVkXCIsXG4gICAgXCJfX2JyaWRnZV9yZXRhaW5cIixcbiAgICBcIl9fY292YXJpYW50XCIsXG4gICAgXCJfX2NvbnRyYXZhcmlhbnRcIixcbiAgICBcIl9fa2luZG9mXCIsXG4gICAgXCJfTm9ubnVsbFwiLFxuICAgIFwiX051bGxhYmxlXCIsXG4gICAgXCJfTnVsbF91bnNwZWNpZmllZFwiLFxuICAgIFwiX19GVU5DVElPTl9fXCIsXG4gICAgXCJfX1BSRVRUWV9GVU5DVElPTl9fXCIsXG4gICAgXCJfX2F0dHJpYnV0ZV9fXCIsXG4gICAgXCJnZXR0ZXJcIixcbiAgICBcInNldHRlclwiLFxuICAgIFwicmV0YWluXCIsXG4gICAgXCJ1bnNhZmVfdW5yZXRhaW5lZFwiLFxuICAgIFwibm9ubnVsbFwiLFxuICAgIFwibnVsbGFibGVcIixcbiAgICBcIm51bGxfdW5zcGVjaWZpZWRcIixcbiAgICBcIm51bGxfcmVzZXR0YWJsZVwiLFxuICAgIFwiY2xhc3NcIixcbiAgICBcImluc3RhbmNldHlwZVwiLFxuICAgIFwiTlNfREVTSUdOQVRFRF9JTklUSUFMSVpFUlwiLFxuICAgIFwiTlNfVU5BVkFJTEFCTEVcIixcbiAgICBcIk5TX1JFUVVJUkVTX1NVUEVSXCIsXG4gICAgXCJOU19SRVRVUk5TX0lOTkVSX1BPSU5URVJcIixcbiAgICBcIk5TX0lOTElORVwiLFxuICAgIFwiTlNfQVZBSUxBQkxFXCIsXG4gICAgXCJOU19ERVBSRUNBVEVEXCIsXG4gICAgXCJOU19FTlVNXCIsXG4gICAgXCJOU19PUFRJT05TXCIsXG4gICAgXCJOU19TV0lGVF9VTkFWQUlMQUJMRVwiLFxuICAgIFwiTlNfQVNTVU1FX05PTk5VTExfQkVHSU5cIixcbiAgICBcIk5TX0FTU1VNRV9OT05OVUxMX0VORFwiLFxuICAgIFwiTlNfUkVGSU5FRF9GT1JfU1dJRlRcIixcbiAgICBcIk5TX1NXSUZUX05BTUVcIixcbiAgICBcIk5TX1NXSUZUX05PVEhST1dcIixcbiAgICBcIk5TX0RVUklOR1wiLFxuICAgIFwiTlNfSEFORExFUlwiLFxuICAgIFwiTlNfRU5ESEFORExFUlwiLFxuICAgIFwiTlNfVkFMVUVSRVRVUk5cIixcbiAgICBcIk5TX1ZPSURSRVRVUk5cIlxuICBdO1xuICBjb25zdCBMSVRFUkFMUyA9IFtcbiAgICBcImZhbHNlXCIsXG4gICAgXCJ0cnVlXCIsXG4gICAgXCJGQUxTRVwiLFxuICAgIFwiVFJVRVwiLFxuICAgIFwibmlsXCIsXG4gICAgXCJZRVNcIixcbiAgICBcIk5PXCIsXG4gICAgXCJOVUxMXCJcbiAgXTtcbiAgY29uc3QgQlVJTFRfSU5TID0gW1xuICAgIFwiZGlzcGF0Y2hfb25jZV90XCIsXG4gICAgXCJkaXNwYXRjaF9xdWV1ZV90XCIsXG4gICAgXCJkaXNwYXRjaF9zeW5jXCIsXG4gICAgXCJkaXNwYXRjaF9hc3luY1wiLFxuICAgIFwiZGlzcGF0Y2hfb25jZVwiXG4gIF07XG4gIGNvbnN0IEtFWVdPUkRTID0ge1xuICAgIFwidmFyaWFibGUubGFuZ3VhZ2VcIjogW1xuICAgICAgXCJ0aGlzXCIsXG4gICAgICBcInN1cGVyXCJcbiAgICBdLFxuICAgICRwYXR0ZXJuOiBJREVOVElGSUVSX1JFLFxuICAgIGtleXdvcmQ6IEtXUyxcbiAgICBsaXRlcmFsOiBMSVRFUkFMUyxcbiAgICBidWlsdF9pbjogQlVJTFRfSU5TLFxuICAgIHR5cGU6IFRZUEVTXG4gIH07XG4gIGNvbnN0IENMQVNTX0tFWVdPUkRTID0ge1xuICAgICRwYXR0ZXJuOiBJREVOVElGSUVSX1JFLFxuICAgIGtleXdvcmQ6IFtcbiAgICAgIFwiQGludGVyZmFjZVwiLFxuICAgICAgXCJAY2xhc3NcIixcbiAgICAgIFwiQHByb3RvY29sXCIsXG4gICAgICBcIkBpbXBsZW1lbnRhdGlvblwiXG4gICAgXVxuICB9O1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdPYmplY3RpdmUtQycsXG4gICAgYWxpYXNlczogW1xuICAgICAgJ21tJyxcbiAgICAgICdvYmpjJyxcbiAgICAgICdvYmotYycsXG4gICAgICAnb2JqLWMrKycsXG4gICAgICAnb2JqZWN0aXZlLWMrKydcbiAgICBdLFxuICAgIGtleXdvcmRzOiBLRVlXT1JEUyxcbiAgICBpbGxlZ2FsOiAnPC8nLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICBBUElfQ0xBU1MsXG4gICAgICBobGpzLkNfTElORV9DT01NRU5UX01PREUsXG4gICAgICBobGpzLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLFxuICAgICAgaGxqcy5DX05VTUJFUl9NT0RFLFxuICAgICAgaGxqcy5RVU9URV9TVFJJTkdfTU9ERSxcbiAgICAgIGhsanMuQVBPU19TVFJJTkdfTU9ERSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICAgICAgdmFyaWFudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBiZWdpbjogJ0BcIicsXG4gICAgICAgICAgICBlbmQ6ICdcIicsXG4gICAgICAgICAgICBpbGxlZ2FsOiAnXFxcXG4nLFxuICAgICAgICAgICAgY29udGFpbnM6IFsgaGxqcy5CQUNLU0xBU0hfRVNDQVBFIF1cbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ21ldGEnLFxuICAgICAgICBiZWdpbjogLyNcXHMqW2Etel0rXFxiLyxcbiAgICAgICAgZW5kOiAvJC8sXG4gICAgICAgIGtleXdvcmRzOiB7IGtleXdvcmQ6XG4gICAgICAgICAgICAnaWYgZWxzZSBlbGlmIGVuZGlmIGRlZmluZSB1bmRlZiB3YXJuaW5nIGVycm9yIGxpbmUgJ1xuICAgICAgICAgICAgKyAncHJhZ21hIGlmZGVmIGlmbmRlZiBpbmNsdWRlJyB9LFxuICAgICAgICBjb250YWluczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGJlZ2luOiAvXFxcXFxcbi8sXG4gICAgICAgICAgICByZWxldmFuY2U6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhsanMuaW5oZXJpdChobGpzLlFVT1RFX1NUUklOR19NT0RFLCB7IGNsYXNzTmFtZTogJ3N0cmluZycgfSksXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIGJlZ2luOiAvPC4qPz4vLFxuICAgICAgICAgICAgZW5kOiAvJC8sXG4gICAgICAgICAgICBpbGxlZ2FsOiAnXFxcXG4nXG4gICAgICAgICAgfSxcbiAgICAgICAgICBobGpzLkNfTElORV9DT01NRU5UX01PREUsXG4gICAgICAgICAgaGxqcy5DX0JMT0NLX0NPTU1FTlRfTU9ERVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdjbGFzcycsXG4gICAgICAgIGJlZ2luOiAnKCcgKyBDTEFTU19LRVlXT1JEUy5rZXl3b3JkLmpvaW4oJ3wnKSArICcpXFxcXGInLFxuICAgICAgICBlbmQ6IC8oXFx7fCQpLyxcbiAgICAgICAgZXhjbHVkZUVuZDogdHJ1ZSxcbiAgICAgICAga2V5d29yZHM6IENMQVNTX0tFWVdPUkRTLFxuICAgICAgICBjb250YWluczogWyBobGpzLlVOREVSU0NPUkVfVElUTEVfTU9ERSBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBiZWdpbjogJ1xcXFwuJyArIGhsanMuVU5ERVJTQ09SRV9JREVOVF9SRSxcbiAgICAgICAgcmVsZXZhbmNlOiAwXG4gICAgICB9XG4gICAgXVxuICB9O1xufVxuXG5leHBvcnQgeyBvYmplY3RpdmVjIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJvYmplY3RpdmVjIiwiaGxqcyIsIkFQSV9DTEFTUyIsImNsYXNzTmFtZSIsImJlZ2luIiwiSURFTlRJRklFUl9SRSIsIlRZUEVTIiwiS1dTIiwiTElURVJBTFMiLCJCVUlMVF9JTlMiLCJLRVlXT1JEUyIsIiRwYXR0ZXJuIiwia2V5d29yZCIsImxpdGVyYWwiLCJidWlsdF9pbiIsInR5cGUiLCJDTEFTU19LRVlXT1JEUyIsIm5hbWUiLCJhbGlhc2VzIiwia2V5d29yZHMiLCJpbGxlZ2FsIiwiY29udGFpbnMiLCJDX0xJTkVfQ09NTUVOVF9NT0RFIiwiQ19CTE9DS19DT01NRU5UX01PREUiLCJDX05VTUJFUl9NT0RFIiwiUVVPVEVfU1RSSU5HX01PREUiLCJBUE9TX1NUUklOR19NT0RFIiwidmFyaWFudHMiLCJlbmQiLCJCQUNLU0xBU0hfRVNDQVBFIiwicmVsZXZhbmNlIiwiaW5oZXJpdCIsImpvaW4iLCJleGNsdWRlRW5kIiwiVU5ERVJTQ09SRV9USVRMRV9NT0RFIiwiVU5ERVJTQ09SRV9JREVOVF9SRSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/objectivec.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/perl.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/perl.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ perl)\n/* harmony export */ });\n/*\nLanguage: Perl\nAuthor: Peter Leonov <gojpeg@yandex.ru>\nWebsite: https://www.perl.org\nCategory: common\n*/ /** @type LanguageFn */ function perl(hljs) {\n    const regex = hljs.regex;\n    const KEYWORDS = [\n        \"abs\",\n        \"accept\",\n        \"alarm\",\n        \"and\",\n        \"atan2\",\n        \"bind\",\n        \"binmode\",\n        \"bless\",\n        \"break\",\n        \"caller\",\n        \"chdir\",\n        \"chmod\",\n        \"chomp\",\n        \"chop\",\n        \"chown\",\n        \"chr\",\n        \"chroot\",\n        \"class\",\n        \"close\",\n        \"closedir\",\n        \"connect\",\n        \"continue\",\n        \"cos\",\n        \"crypt\",\n        \"dbmclose\",\n        \"dbmopen\",\n        \"defined\",\n        \"delete\",\n        \"die\",\n        \"do\",\n        \"dump\",\n        \"each\",\n        \"else\",\n        \"elsif\",\n        \"endgrent\",\n        \"endhostent\",\n        \"endnetent\",\n        \"endprotoent\",\n        \"endpwent\",\n        \"endservent\",\n        \"eof\",\n        \"eval\",\n        \"exec\",\n        \"exists\",\n        \"exit\",\n        \"exp\",\n        \"fcntl\",\n        \"field\",\n        \"fileno\",\n        \"flock\",\n        \"for\",\n        \"foreach\",\n        \"fork\",\n        \"format\",\n        \"formline\",\n        \"getc\",\n        \"getgrent\",\n        \"getgrgid\",\n        \"getgrnam\",\n        \"gethostbyaddr\",\n        \"gethostbyname\",\n        \"gethostent\",\n        \"getlogin\",\n        \"getnetbyaddr\",\n        \"getnetbyname\",\n        \"getnetent\",\n        \"getpeername\",\n        \"getpgrp\",\n        \"getpriority\",\n        \"getprotobyname\",\n        \"getprotobynumber\",\n        \"getprotoent\",\n        \"getpwent\",\n        \"getpwnam\",\n        \"getpwuid\",\n        \"getservbyname\",\n        \"getservbyport\",\n        \"getservent\",\n        \"getsockname\",\n        \"getsockopt\",\n        \"given\",\n        \"glob\",\n        \"gmtime\",\n        \"goto\",\n        \"grep\",\n        \"gt\",\n        \"hex\",\n        \"if\",\n        \"index\",\n        \"int\",\n        \"ioctl\",\n        \"join\",\n        \"keys\",\n        \"kill\",\n        \"last\",\n        \"lc\",\n        \"lcfirst\",\n        \"length\",\n        \"link\",\n        \"listen\",\n        \"local\",\n        \"localtime\",\n        \"log\",\n        \"lstat\",\n        \"lt\",\n        \"ma\",\n        \"map\",\n        \"method\",\n        \"mkdir\",\n        \"msgctl\",\n        \"msgget\",\n        \"msgrcv\",\n        \"msgsnd\",\n        \"my\",\n        \"ne\",\n        \"next\",\n        \"no\",\n        \"not\",\n        \"oct\",\n        \"open\",\n        \"opendir\",\n        \"or\",\n        \"ord\",\n        \"our\",\n        \"pack\",\n        \"package\",\n        \"pipe\",\n        \"pop\",\n        \"pos\",\n        \"print\",\n        \"printf\",\n        \"prototype\",\n        \"push\",\n        \"q|0\",\n        \"qq\",\n        \"quotemeta\",\n        \"qw\",\n        \"qx\",\n        \"rand\",\n        \"read\",\n        \"readdir\",\n        \"readline\",\n        \"readlink\",\n        \"readpipe\",\n        \"recv\",\n        \"redo\",\n        \"ref\",\n        \"rename\",\n        \"require\",\n        \"reset\",\n        \"return\",\n        \"reverse\",\n        \"rewinddir\",\n        \"rindex\",\n        \"rmdir\",\n        \"say\",\n        \"scalar\",\n        \"seek\",\n        \"seekdir\",\n        \"select\",\n        \"semctl\",\n        \"semget\",\n        \"semop\",\n        \"send\",\n        \"setgrent\",\n        \"sethostent\",\n        \"setnetent\",\n        \"setpgrp\",\n        \"setpriority\",\n        \"setprotoent\",\n        \"setpwent\",\n        \"setservent\",\n        \"setsockopt\",\n        \"shift\",\n        \"shmctl\",\n        \"shmget\",\n        \"shmread\",\n        \"shmwrite\",\n        \"shutdown\",\n        \"sin\",\n        \"sleep\",\n        \"socket\",\n        \"socketpair\",\n        \"sort\",\n        \"splice\",\n        \"split\",\n        \"sprintf\",\n        \"sqrt\",\n        \"srand\",\n        \"stat\",\n        \"state\",\n        \"study\",\n        \"sub\",\n        \"substr\",\n        \"symlink\",\n        \"syscall\",\n        \"sysopen\",\n        \"sysread\",\n        \"sysseek\",\n        \"system\",\n        \"syswrite\",\n        \"tell\",\n        \"telldir\",\n        \"tie\",\n        \"tied\",\n        \"time\",\n        \"times\",\n        \"tr\",\n        \"truncate\",\n        \"uc\",\n        \"ucfirst\",\n        \"umask\",\n        \"undef\",\n        \"unless\",\n        \"unlink\",\n        \"unpack\",\n        \"unshift\",\n        \"untie\",\n        \"until\",\n        \"use\",\n        \"utime\",\n        \"values\",\n        \"vec\",\n        \"wait\",\n        \"waitpid\",\n        \"wantarray\",\n        \"warn\",\n        \"when\",\n        \"while\",\n        \"write\",\n        \"x|0\",\n        \"xor\",\n        \"y|0\"\n    ];\n    // https://perldoc.perl.org/perlre#Modifiers\n    const REGEX_MODIFIERS = /[dualxmsipngr]{0,12}/; // aa and xx are valid, making max length 12\n    const PERL_KEYWORDS = {\n        $pattern: /[\\w.]+/,\n        keyword: KEYWORDS.join(\" \")\n    };\n    const SUBST = {\n        className: \"subst\",\n        begin: \"[$@]\\\\{\",\n        end: \"\\\\}\",\n        keywords: PERL_KEYWORDS\n    };\n    const METHOD = {\n        begin: /->\\{/,\n        end: /\\}/\n    };\n    const ATTR = {\n        scope: \"attr\",\n        match: /\\s+:\\s*\\w+(\\s*\\(.*?\\))?/\n    };\n    const VAR = {\n        scope: \"variable\",\n        variants: [\n            {\n                begin: /\\$\\d/\n            },\n            {\n                begin: regex.concat(/[$%@](?!\")(\\^\\w\\b|#\\w+(::\\w+)*|\\{\\w+\\}|\\w+(::\\w*)*)/, // negative look-ahead tries to avoid matching patterns that are not\n                // Perl at all like $ident$, @ident@, etc.\n                `(?![A-Za-z])(?![@$%])`)\n            },\n            {\n                // Only $= is a special Perl variable and one can't declare @= or %=.\n                begin: /[$%@](?!\")[^\\s\\w{=]|\\$=/,\n                relevance: 0\n            }\n        ],\n        contains: [\n            ATTR\n        ]\n    };\n    const NUMBER = {\n        className: \"number\",\n        variants: [\n            // decimal numbers:\n            // include the case where a number starts with a dot (eg. .9), and\n            // the leading 0? avoids mixing the first and second match on 0.x cases\n            {\n                match: /0?\\.[0-9][0-9_]+\\b/\n            },\n            // include the special versioned number (eg. v5.38)\n            {\n                match: /\\bv?(0|[1-9][0-9_]*(\\.[0-9_]+)?|[1-9][0-9_]*)\\b/\n            },\n            // non-decimal numbers:\n            {\n                match: /\\b0[0-7][0-7_]*\\b/\n            },\n            {\n                match: /\\b0x[0-9a-fA-F][0-9a-fA-F_]*\\b/\n            },\n            {\n                match: /\\b0b[0-1][0-1_]*\\b/\n            }\n        ],\n        relevance: 0\n    };\n    const STRING_CONTAINS = [\n        hljs.BACKSLASH_ESCAPE,\n        SUBST,\n        VAR\n    ];\n    const REGEX_DELIMS = [\n        /!/,\n        /\\//,\n        /\\|/,\n        /\\?/,\n        /'/,\n        /\"/,\n        /#/ // valid but infrequent and weird\n    ];\n    /**\n   * @param {string|RegExp} prefix\n   * @param {string|RegExp} open\n   * @param {string|RegExp} close\n   */ const PAIRED_DOUBLE_RE = (prefix, open, close = \"\\\\1\")=>{\n        const middle = close === \"\\\\1\" ? close : regex.concat(close, open);\n        return regex.concat(regex.concat(\"(?:\", prefix, \")\"), open, /(?:\\\\.|[^\\\\\\/])*?/, middle, /(?:\\\\.|[^\\\\\\/])*?/, close, REGEX_MODIFIERS);\n    };\n    /**\n   * @param {string|RegExp} prefix\n   * @param {string|RegExp} open\n   * @param {string|RegExp} close\n   */ const PAIRED_RE = (prefix, open, close)=>{\n        return regex.concat(regex.concat(\"(?:\", prefix, \")\"), open, /(?:\\\\.|[^\\\\\\/])*?/, close, REGEX_MODIFIERS);\n    };\n    const PERL_DEFAULT_CONTAINS = [\n        VAR,\n        hljs.HASH_COMMENT_MODE,\n        hljs.COMMENT(/^=\\w/, /=cut/, {\n            endsWithParent: true\n        }),\n        METHOD,\n        {\n            className: \"string\",\n            contains: STRING_CONTAINS,\n            variants: [\n                {\n                    begin: \"q[qwxr]?\\\\s*\\\\(\",\n                    end: \"\\\\)\",\n                    relevance: 5\n                },\n                {\n                    begin: \"q[qwxr]?\\\\s*\\\\[\",\n                    end: \"\\\\]\",\n                    relevance: 5\n                },\n                {\n                    begin: \"q[qwxr]?\\\\s*\\\\{\",\n                    end: \"\\\\}\",\n                    relevance: 5\n                },\n                {\n                    begin: \"q[qwxr]?\\\\s*\\\\|\",\n                    end: \"\\\\|\",\n                    relevance: 5\n                },\n                {\n                    begin: \"q[qwxr]?\\\\s*<\",\n                    end: \">\",\n                    relevance: 5\n                },\n                {\n                    begin: \"qw\\\\s+q\",\n                    end: \"q\",\n                    relevance: 5\n                },\n                {\n                    begin: \"'\",\n                    end: \"'\",\n                    contains: [\n                        hljs.BACKSLASH_ESCAPE\n                    ]\n                },\n                {\n                    begin: '\"',\n                    end: '\"'\n                },\n                {\n                    begin: \"`\",\n                    end: \"`\",\n                    contains: [\n                        hljs.BACKSLASH_ESCAPE\n                    ]\n                },\n                {\n                    begin: /\\{\\w+\\}/,\n                    relevance: 0\n                },\n                {\n                    begin: \"-?\\\\w+\\\\s*=>\",\n                    relevance: 0\n                }\n            ]\n        },\n        NUMBER,\n        {\n            begin: \"(\\\\/\\\\/|\" + hljs.RE_STARTERS_RE + \"|\\\\b(split|return|print|reverse|grep)\\\\b)\\\\s*\",\n            keywords: \"split return print reverse grep\",\n            relevance: 0,\n            contains: [\n                hljs.HASH_COMMENT_MODE,\n                {\n                    className: \"regexp\",\n                    variants: [\n                        // allow matching common delimiters\n                        {\n                            begin: PAIRED_DOUBLE_RE(\"s|tr|y\", regex.either(...REGEX_DELIMS, {\n                                capture: true\n                            }))\n                        },\n                        // and then paired delmis\n                        {\n                            begin: PAIRED_DOUBLE_RE(\"s|tr|y\", \"\\\\(\", \"\\\\)\")\n                        },\n                        {\n                            begin: PAIRED_DOUBLE_RE(\"s|tr|y\", \"\\\\[\", \"\\\\]\")\n                        },\n                        {\n                            begin: PAIRED_DOUBLE_RE(\"s|tr|y\", \"\\\\{\", \"\\\\}\")\n                        }\n                    ],\n                    relevance: 2\n                },\n                {\n                    className: \"regexp\",\n                    variants: [\n                        {\n                            // could be a comment in many languages so do not count\n                            // as relevant\n                            begin: /(m|qr)\\/\\//,\n                            relevance: 0\n                        },\n                        // prefix is optional with /regex/\n                        {\n                            begin: PAIRED_RE(\"(?:m|qr)?\", /\\//, /\\//)\n                        },\n                        // allow matching common delimiters\n                        {\n                            begin: PAIRED_RE(\"m|qr\", regex.either(...REGEX_DELIMS, {\n                                capture: true\n                            }), /\\1/)\n                        },\n                        // allow common paired delmins\n                        {\n                            begin: PAIRED_RE(\"m|qr\", /\\(/, /\\)/)\n                        },\n                        {\n                            begin: PAIRED_RE(\"m|qr\", /\\[/, /\\]/)\n                        },\n                        {\n                            begin: PAIRED_RE(\"m|qr\", /\\{/, /\\}/)\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            className: \"function\",\n            beginKeywords: \"sub method\",\n            end: \"(\\\\s*\\\\(.*?\\\\))?[;{]\",\n            excludeEnd: true,\n            relevance: 5,\n            contains: [\n                hljs.TITLE_MODE,\n                ATTR\n            ]\n        },\n        {\n            className: \"class\",\n            beginKeywords: \"class\",\n            end: \"[;{]\",\n            excludeEnd: true,\n            relevance: 5,\n            contains: [\n                hljs.TITLE_MODE,\n                ATTR,\n                NUMBER\n            ]\n        },\n        {\n            begin: \"-\\\\w\\\\b\",\n            relevance: 0\n        },\n        {\n            begin: \"^__DATA__$\",\n            end: \"^__END__$\",\n            subLanguage: \"mojolicious\",\n            contains: [\n                {\n                    begin: \"^@@.*\",\n                    end: \"$\",\n                    className: \"comment\"\n                }\n            ]\n        }\n    ];\n    SUBST.contains = PERL_DEFAULT_CONTAINS;\n    METHOD.contains = PERL_DEFAULT_CONTAINS;\n    return {\n        name: \"Perl\",\n        aliases: [\n            \"pl\",\n            \"pm\"\n        ],\n        keywords: PERL_KEYWORDS,\n        contains: PERL_DEFAULT_CONTAINS\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9wZXJsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7QUFLQSxHQUVBLHFCQUFxQixHQUNyQixTQUFTQSxLQUFLQyxJQUFJO0lBQ2hCLE1BQU1DLFFBQVFELEtBQUtDLEtBQUs7SUFDeEIsTUFBTUMsV0FBVztRQUNmO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUVELDRDQUE0QztJQUM1QyxNQUFNQyxrQkFBa0Isd0JBQXdCLDRDQUE0QztJQUM1RixNQUFNQyxnQkFBZ0I7UUFDcEJDLFVBQVU7UUFDVkMsU0FBU0osU0FBU0ssSUFBSSxDQUFDO0lBQ3pCO0lBQ0EsTUFBTUMsUUFBUTtRQUNaQyxXQUFXO1FBQ1hDLE9BQU87UUFDUEMsS0FBSztRQUNMQyxVQUFVUjtJQUNaO0lBQ0EsTUFBTVMsU0FBUztRQUNiSCxPQUFPO1FBQ1BDLEtBQUs7SUFFUDtJQUNBLE1BQU1HLE9BQU87UUFDWEMsT0FBTztRQUNQQyxPQUFPO0lBQ1Q7SUFDQSxNQUFNQyxNQUFNO1FBQ1ZGLE9BQU87UUFDUEcsVUFBVTtZQUNSO2dCQUFFUixPQUFPO1lBQU87WUFDaEI7Z0JBQUVBLE9BQU9ULE1BQU1rQixNQUFNLENBQ25CLHVEQUNBLG9FQUFvRTtnQkFDcEUsMENBQTBDO2dCQUMxQyxDQUFDLHFCQUFxQixDQUFDO1lBRXpCO1lBQ0E7Z0JBQ0UscUVBQXFFO2dCQUNyRVQsT0FBTztnQkFDUFUsV0FBVztZQUNiO1NBQ0Q7UUFDREMsVUFBVTtZQUFFUDtTQUFNO0lBQ3BCO0lBQ0EsTUFBTVEsU0FBUztRQUNiYixXQUFXO1FBQ1hTLFVBQVU7WUFDUixtQkFBbUI7WUFDbkIsa0VBQWtFO1lBQ2xFLHVFQUF1RTtZQUN2RTtnQkFBRUYsT0FBTztZQUFxQjtZQUM5QixtREFBbUQ7WUFDbkQ7Z0JBQUVBLE9BQU87WUFBa0Q7WUFDM0QsdUJBQXVCO1lBQ3ZCO2dCQUFFQSxPQUFPO1lBQW9CO1lBQzdCO2dCQUFFQSxPQUFPO1lBQWlDO1lBQzFDO2dCQUFFQSxPQUFPO1lBQXFCO1NBQy9CO1FBQ0RJLFdBQVc7SUFDYjtJQUNBLE1BQU1HLGtCQUFrQjtRQUN0QnZCLEtBQUt3QixnQkFBZ0I7UUFDckJoQjtRQUNBUztLQUNEO0lBQ0QsTUFBTVEsZUFBZTtRQUNuQjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxJQUFJLGlDQUFpQztLQUN0QztJQUNEOzs7O0dBSUMsR0FDRCxNQUFNQyxtQkFBbUIsQ0FBQ0MsUUFBUUMsTUFBTUMsUUFBUSxLQUFLO1FBQ25ELE1BQU1DLFNBQVMsVUFBVyxRQUN0QkQsUUFDQTVCLE1BQU1rQixNQUFNLENBQUNVLE9BQU9EO1FBQ3hCLE9BQU8zQixNQUFNa0IsTUFBTSxDQUNqQmxCLE1BQU1rQixNQUFNLENBQUMsT0FBT1EsUUFBUSxNQUM1QkMsTUFDQSxxQkFDQUUsUUFDQSxxQkFDQUQsT0FDQTFCO0lBRUo7SUFDQTs7OztHQUlDLEdBQ0QsTUFBTTRCLFlBQVksQ0FBQ0osUUFBUUMsTUFBTUM7UUFDL0IsT0FBTzVCLE1BQU1rQixNQUFNLENBQ2pCbEIsTUFBTWtCLE1BQU0sQ0FBQyxPQUFPUSxRQUFRLE1BQzVCQyxNQUNBLHFCQUNBQyxPQUNBMUI7SUFFSjtJQUNBLE1BQU02Qix3QkFBd0I7UUFDNUJmO1FBQ0FqQixLQUFLaUMsaUJBQWlCO1FBQ3RCakMsS0FBS2tDLE9BQU8sQ0FDVixRQUNBLFFBQ0E7WUFBRUMsZ0JBQWdCO1FBQUs7UUFFekJ0QjtRQUNBO1lBQ0VKLFdBQVc7WUFDWFksVUFBVUU7WUFDVkwsVUFBVTtnQkFDUjtvQkFDRVIsT0FBTztvQkFDUEMsS0FBSztvQkFDTFMsV0FBVztnQkFDYjtnQkFDQTtvQkFDRVYsT0FBTztvQkFDUEMsS0FBSztvQkFDTFMsV0FBVztnQkFDYjtnQkFDQTtvQkFDRVYsT0FBTztvQkFDUEMsS0FBSztvQkFDTFMsV0FBVztnQkFDYjtnQkFDQTtvQkFDRVYsT0FBTztvQkFDUEMsS0FBSztvQkFDTFMsV0FBVztnQkFDYjtnQkFDQTtvQkFDRVYsT0FBTztvQkFDUEMsS0FBSztvQkFDTFMsV0FBVztnQkFDYjtnQkFDQTtvQkFDRVYsT0FBTztvQkFDUEMsS0FBSztvQkFDTFMsV0FBVztnQkFDYjtnQkFDQTtvQkFDRVYsT0FBTztvQkFDUEMsS0FBSztvQkFDTFUsVUFBVTt3QkFBRXJCLEtBQUt3QixnQkFBZ0I7cUJBQUU7Z0JBQ3JDO2dCQUNBO29CQUNFZCxPQUFPO29CQUNQQyxLQUFLO2dCQUNQO2dCQUNBO29CQUNFRCxPQUFPO29CQUNQQyxLQUFLO29CQUNMVSxVQUFVO3dCQUFFckIsS0FBS3dCLGdCQUFnQjtxQkFBRTtnQkFDckM7Z0JBQ0E7b0JBQ0VkLE9BQU87b0JBQ1BVLFdBQVc7Z0JBQ2I7Z0JBQ0E7b0JBQ0VWLE9BQU87b0JBQ1BVLFdBQVc7Z0JBQ2I7YUFDRDtRQUNIO1FBQ0FFO1FBQ0E7WUFDRVosT0FBTyxhQUFhVixLQUFLb0MsY0FBYyxHQUFHO1lBQzFDeEIsVUFBVTtZQUNWUSxXQUFXO1lBQ1hDLFVBQVU7Z0JBQ1JyQixLQUFLaUMsaUJBQWlCO2dCQUN0QjtvQkFDRXhCLFdBQVc7b0JBQ1hTLFVBQVU7d0JBQ1IsbUNBQW1DO3dCQUNuQzs0QkFBRVIsT0FBT2dCLGlCQUFpQixVQUFVekIsTUFBTW9DLE1BQU0sSUFBSVosY0FBYztnQ0FBRWEsU0FBUzs0QkFBSzt3QkFBSTt3QkFDdEYseUJBQXlCO3dCQUN6Qjs0QkFBRTVCLE9BQU9nQixpQkFBaUIsVUFBVSxPQUFPO3dCQUFPO3dCQUNsRDs0QkFBRWhCLE9BQU9nQixpQkFBaUIsVUFBVSxPQUFPO3dCQUFPO3dCQUNsRDs0QkFBRWhCLE9BQU9nQixpQkFBaUIsVUFBVSxPQUFPO3dCQUFPO3FCQUNuRDtvQkFDRE4sV0FBVztnQkFDYjtnQkFDQTtvQkFDRVgsV0FBVztvQkFDWFMsVUFBVTt3QkFDUjs0QkFDRSx1REFBdUQ7NEJBQ3ZELGNBQWM7NEJBQ2RSLE9BQU87NEJBQ1BVLFdBQVc7d0JBQ2I7d0JBQ0Esa0NBQWtDO3dCQUNsQzs0QkFBRVYsT0FBT3FCLFVBQVUsYUFBYSxNQUFNO3dCQUFNO3dCQUM1QyxtQ0FBbUM7d0JBQ25DOzRCQUFFckIsT0FBT3FCLFVBQVUsUUFBUTlCLE1BQU1vQyxNQUFNLElBQUlaLGNBQWM7Z0NBQUVhLFNBQVM7NEJBQUssSUFBSTt3QkFBTTt3QkFDbkYsOEJBQThCO3dCQUM5Qjs0QkFBRTVCLE9BQU9xQixVQUFVLFFBQVEsTUFBTTt3QkFBTTt3QkFDdkM7NEJBQUVyQixPQUFPcUIsVUFBVSxRQUFRLE1BQU07d0JBQU07d0JBQ3ZDOzRCQUFFckIsT0FBT3FCLFVBQVUsUUFBUSxNQUFNO3dCQUFNO3FCQUN4QztnQkFDSDthQUNEO1FBQ0g7UUFDQTtZQUNFdEIsV0FBVztZQUNYOEIsZUFBZTtZQUNmNUIsS0FBSztZQUNMNkIsWUFBWTtZQUNacEIsV0FBVztZQUNYQyxVQUFVO2dCQUFFckIsS0FBS3lDLFVBQVU7Z0JBQUUzQjthQUFNO1FBQ3JDO1FBQ0E7WUFDRUwsV0FBVztZQUNYOEIsZUFBZTtZQUNmNUIsS0FBSztZQUNMNkIsWUFBWTtZQUNacEIsV0FBVztZQUNYQyxVQUFVO2dCQUFFckIsS0FBS3lDLFVBQVU7Z0JBQUUzQjtnQkFBTVE7YUFBUTtRQUM3QztRQUNBO1lBQ0VaLE9BQU87WUFDUFUsV0FBVztRQUNiO1FBQ0E7WUFDRVYsT0FBTztZQUNQQyxLQUFLO1lBQ0wrQixhQUFhO1lBQ2JyQixVQUFVO2dCQUNSO29CQUNFWCxPQUFPO29CQUNQQyxLQUFLO29CQUNMRixXQUFXO2dCQUNiO2FBQ0Q7UUFDSDtLQUNEO0lBQ0RELE1BQU1hLFFBQVEsR0FBR1c7SUFDakJuQixPQUFPUSxRQUFRLEdBQUdXO0lBRWxCLE9BQU87UUFDTFcsTUFBTTtRQUNOQyxTQUFTO1lBQ1A7WUFDQTtTQUNEO1FBQ0RoQyxVQUFVUjtRQUNWaUIsVUFBVVc7SUFDWjtBQUNGO0FBRTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb21uaS1jaGF0LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9lcy9sYW5ndWFnZXMvcGVybC5qcz8wMmRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogUGVybFxuQXV0aG9yOiBQZXRlciBMZW9ub3YgPGdvanBlZ0B5YW5kZXgucnU+XG5XZWJzaXRlOiBodHRwczovL3d3dy5wZXJsLm9yZ1xuQ2F0ZWdvcnk6IGNvbW1vblxuKi9cblxuLyoqIEB0eXBlIExhbmd1YWdlRm4gKi9cbmZ1bmN0aW9uIHBlcmwoaGxqcykge1xuICBjb25zdCByZWdleCA9IGhsanMucmVnZXg7XG4gIGNvbnN0IEtFWVdPUkRTID0gW1xuICAgICdhYnMnLFxuICAgICdhY2NlcHQnLFxuICAgICdhbGFybScsXG4gICAgJ2FuZCcsXG4gICAgJ2F0YW4yJyxcbiAgICAnYmluZCcsXG4gICAgJ2Jpbm1vZGUnLFxuICAgICdibGVzcycsXG4gICAgJ2JyZWFrJyxcbiAgICAnY2FsbGVyJyxcbiAgICAnY2hkaXInLFxuICAgICdjaG1vZCcsXG4gICAgJ2Nob21wJyxcbiAgICAnY2hvcCcsXG4gICAgJ2Nob3duJyxcbiAgICAnY2hyJyxcbiAgICAnY2hyb290JyxcbiAgICAnY2xhc3MnLFxuICAgICdjbG9zZScsXG4gICAgJ2Nsb3NlZGlyJyxcbiAgICAnY29ubmVjdCcsXG4gICAgJ2NvbnRpbnVlJyxcbiAgICAnY29zJyxcbiAgICAnY3J5cHQnLFxuICAgICdkYm1jbG9zZScsXG4gICAgJ2RibW9wZW4nLFxuICAgICdkZWZpbmVkJyxcbiAgICAnZGVsZXRlJyxcbiAgICAnZGllJyxcbiAgICAnZG8nLFxuICAgICdkdW1wJyxcbiAgICAnZWFjaCcsXG4gICAgJ2Vsc2UnLFxuICAgICdlbHNpZicsXG4gICAgJ2VuZGdyZW50JyxcbiAgICAnZW5kaG9zdGVudCcsXG4gICAgJ2VuZG5ldGVudCcsXG4gICAgJ2VuZHByb3RvZW50JyxcbiAgICAnZW5kcHdlbnQnLFxuICAgICdlbmRzZXJ2ZW50JyxcbiAgICAnZW9mJyxcbiAgICAnZXZhbCcsXG4gICAgJ2V4ZWMnLFxuICAgICdleGlzdHMnLFxuICAgICdleGl0JyxcbiAgICAnZXhwJyxcbiAgICAnZmNudGwnLFxuICAgICdmaWVsZCcsXG4gICAgJ2ZpbGVubycsXG4gICAgJ2Zsb2NrJyxcbiAgICAnZm9yJyxcbiAgICAnZm9yZWFjaCcsXG4gICAgJ2ZvcmsnLFxuICAgICdmb3JtYXQnLFxuICAgICdmb3JtbGluZScsXG4gICAgJ2dldGMnLFxuICAgICdnZXRncmVudCcsXG4gICAgJ2dldGdyZ2lkJyxcbiAgICAnZ2V0Z3JuYW0nLFxuICAgICdnZXRob3N0YnlhZGRyJyxcbiAgICAnZ2V0aG9zdGJ5bmFtZScsXG4gICAgJ2dldGhvc3RlbnQnLFxuICAgICdnZXRsb2dpbicsXG4gICAgJ2dldG5ldGJ5YWRkcicsXG4gICAgJ2dldG5ldGJ5bmFtZScsXG4gICAgJ2dldG5ldGVudCcsXG4gICAgJ2dldHBlZXJuYW1lJyxcbiAgICAnZ2V0cGdycCcsXG4gICAgJ2dldHByaW9yaXR5JyxcbiAgICAnZ2V0cHJvdG9ieW5hbWUnLFxuICAgICdnZXRwcm90b2J5bnVtYmVyJyxcbiAgICAnZ2V0cHJvdG9lbnQnLFxuICAgICdnZXRwd2VudCcsXG4gICAgJ2dldHB3bmFtJyxcbiAgICAnZ2V0cHd1aWQnLFxuICAgICdnZXRzZXJ2YnluYW1lJyxcbiAgICAnZ2V0c2VydmJ5cG9ydCcsXG4gICAgJ2dldHNlcnZlbnQnLFxuICAgICdnZXRzb2NrbmFtZScsXG4gICAgJ2dldHNvY2tvcHQnLFxuICAgICdnaXZlbicsXG4gICAgJ2dsb2InLFxuICAgICdnbXRpbWUnLFxuICAgICdnb3RvJyxcbiAgICAnZ3JlcCcsXG4gICAgJ2d0JyxcbiAgICAnaGV4JyxcbiAgICAnaWYnLFxuICAgICdpbmRleCcsXG4gICAgJ2ludCcsXG4gICAgJ2lvY3RsJyxcbiAgICAnam9pbicsXG4gICAgJ2tleXMnLFxuICAgICdraWxsJyxcbiAgICAnbGFzdCcsXG4gICAgJ2xjJyxcbiAgICAnbGNmaXJzdCcsXG4gICAgJ2xlbmd0aCcsXG4gICAgJ2xpbmsnLFxuICAgICdsaXN0ZW4nLFxuICAgICdsb2NhbCcsXG4gICAgJ2xvY2FsdGltZScsXG4gICAgJ2xvZycsXG4gICAgJ2xzdGF0JyxcbiAgICAnbHQnLFxuICAgICdtYScsXG4gICAgJ21hcCcsXG4gICAgJ21ldGhvZCcsXG4gICAgJ21rZGlyJyxcbiAgICAnbXNnY3RsJyxcbiAgICAnbXNnZ2V0JyxcbiAgICAnbXNncmN2JyxcbiAgICAnbXNnc25kJyxcbiAgICAnbXknLFxuICAgICduZScsXG4gICAgJ25leHQnLFxuICAgICdubycsXG4gICAgJ25vdCcsXG4gICAgJ29jdCcsXG4gICAgJ29wZW4nLFxuICAgICdvcGVuZGlyJyxcbiAgICAnb3InLFxuICAgICdvcmQnLFxuICAgICdvdXInLFxuICAgICdwYWNrJyxcbiAgICAncGFja2FnZScsXG4gICAgJ3BpcGUnLFxuICAgICdwb3AnLFxuICAgICdwb3MnLFxuICAgICdwcmludCcsXG4gICAgJ3ByaW50ZicsXG4gICAgJ3Byb3RvdHlwZScsXG4gICAgJ3B1c2gnLFxuICAgICdxfDAnLFxuICAgICdxcScsXG4gICAgJ3F1b3RlbWV0YScsXG4gICAgJ3F3JyxcbiAgICAncXgnLFxuICAgICdyYW5kJyxcbiAgICAncmVhZCcsXG4gICAgJ3JlYWRkaXInLFxuICAgICdyZWFkbGluZScsXG4gICAgJ3JlYWRsaW5rJyxcbiAgICAncmVhZHBpcGUnLFxuICAgICdyZWN2JyxcbiAgICAncmVkbycsXG4gICAgJ3JlZicsXG4gICAgJ3JlbmFtZScsXG4gICAgJ3JlcXVpcmUnLFxuICAgICdyZXNldCcsXG4gICAgJ3JldHVybicsXG4gICAgJ3JldmVyc2UnLFxuICAgICdyZXdpbmRkaXInLFxuICAgICdyaW5kZXgnLFxuICAgICdybWRpcicsXG4gICAgJ3NheScsXG4gICAgJ3NjYWxhcicsXG4gICAgJ3NlZWsnLFxuICAgICdzZWVrZGlyJyxcbiAgICAnc2VsZWN0JyxcbiAgICAnc2VtY3RsJyxcbiAgICAnc2VtZ2V0JyxcbiAgICAnc2Vtb3AnLFxuICAgICdzZW5kJyxcbiAgICAnc2V0Z3JlbnQnLFxuICAgICdzZXRob3N0ZW50JyxcbiAgICAnc2V0bmV0ZW50JyxcbiAgICAnc2V0cGdycCcsXG4gICAgJ3NldHByaW9yaXR5JyxcbiAgICAnc2V0cHJvdG9lbnQnLFxuICAgICdzZXRwd2VudCcsXG4gICAgJ3NldHNlcnZlbnQnLFxuICAgICdzZXRzb2Nrb3B0JyxcbiAgICAnc2hpZnQnLFxuICAgICdzaG1jdGwnLFxuICAgICdzaG1nZXQnLFxuICAgICdzaG1yZWFkJyxcbiAgICAnc2htd3JpdGUnLFxuICAgICdzaHV0ZG93bicsXG4gICAgJ3NpbicsXG4gICAgJ3NsZWVwJyxcbiAgICAnc29ja2V0JyxcbiAgICAnc29ja2V0cGFpcicsXG4gICAgJ3NvcnQnLFxuICAgICdzcGxpY2UnLFxuICAgICdzcGxpdCcsXG4gICAgJ3NwcmludGYnLFxuICAgICdzcXJ0JyxcbiAgICAnc3JhbmQnLFxuICAgICdzdGF0JyxcbiAgICAnc3RhdGUnLFxuICAgICdzdHVkeScsXG4gICAgJ3N1YicsXG4gICAgJ3N1YnN0cicsXG4gICAgJ3N5bWxpbmsnLFxuICAgICdzeXNjYWxsJyxcbiAgICAnc3lzb3BlbicsXG4gICAgJ3N5c3JlYWQnLFxuICAgICdzeXNzZWVrJyxcbiAgICAnc3lzdGVtJyxcbiAgICAnc3lzd3JpdGUnLFxuICAgICd0ZWxsJyxcbiAgICAndGVsbGRpcicsXG4gICAgJ3RpZScsXG4gICAgJ3RpZWQnLFxuICAgICd0aW1lJyxcbiAgICAndGltZXMnLFxuICAgICd0cicsXG4gICAgJ3RydW5jYXRlJyxcbiAgICAndWMnLFxuICAgICd1Y2ZpcnN0JyxcbiAgICAndW1hc2snLFxuICAgICd1bmRlZicsXG4gICAgJ3VubGVzcycsXG4gICAgJ3VubGluaycsXG4gICAgJ3VucGFjaycsXG4gICAgJ3Vuc2hpZnQnLFxuICAgICd1bnRpZScsXG4gICAgJ3VudGlsJyxcbiAgICAndXNlJyxcbiAgICAndXRpbWUnLFxuICAgICd2YWx1ZXMnLFxuICAgICd2ZWMnLFxuICAgICd3YWl0JyxcbiAgICAnd2FpdHBpZCcsXG4gICAgJ3dhbnRhcnJheScsXG4gICAgJ3dhcm4nLFxuICAgICd3aGVuJyxcbiAgICAnd2hpbGUnLFxuICAgICd3cml0ZScsXG4gICAgJ3h8MCcsXG4gICAgJ3hvcicsXG4gICAgJ3l8MCdcbiAgXTtcblxuICAvLyBodHRwczovL3Blcmxkb2MucGVybC5vcmcvcGVybHJlI01vZGlmaWVyc1xuICBjb25zdCBSRUdFWF9NT0RJRklFUlMgPSAvW2R1YWx4bXNpcG5ncl17MCwxMn0vOyAvLyBhYSBhbmQgeHggYXJlIHZhbGlkLCBtYWtpbmcgbWF4IGxlbmd0aCAxMlxuICBjb25zdCBQRVJMX0tFWVdPUkRTID0ge1xuICAgICRwYXR0ZXJuOiAvW1xcdy5dKy8sXG4gICAga2V5d29yZDogS0VZV09SRFMuam9pbihcIiBcIilcbiAgfTtcbiAgY29uc3QgU1VCU1QgPSB7XG4gICAgY2xhc3NOYW1lOiAnc3Vic3QnLFxuICAgIGJlZ2luOiAnWyRAXVxcXFx7JyxcbiAgICBlbmQ6ICdcXFxcfScsXG4gICAga2V5d29yZHM6IFBFUkxfS0VZV09SRFNcbiAgfTtcbiAgY29uc3QgTUVUSE9EID0ge1xuICAgIGJlZ2luOiAvLT5cXHsvLFxuICAgIGVuZDogL1xcfS9cbiAgICAvLyBjb250YWlucyBkZWZpbmVkIGxhdGVyXG4gIH07XG4gIGNvbnN0IEFUVFIgPSB7XG4gICAgc2NvcGU6ICdhdHRyJyxcbiAgICBtYXRjaDogL1xccys6XFxzKlxcdysoXFxzKlxcKC4qP1xcKSk/LyxcbiAgfTtcbiAgY29uc3QgVkFSID0ge1xuICAgIHNjb3BlOiAndmFyaWFibGUnLFxuICAgIHZhcmlhbnRzOiBbXG4gICAgICB7IGJlZ2luOiAvXFwkXFxkLyB9LFxuICAgICAgeyBiZWdpbjogcmVnZXguY29uY2F0KFxuICAgICAgICAvWyQlQF0oPyFcIikoXFxeXFx3XFxifCNcXHcrKDo6XFx3KykqfFxce1xcdytcXH18XFx3Kyg6OlxcdyopKikvLFxuICAgICAgICAvLyBuZWdhdGl2ZSBsb29rLWFoZWFkIHRyaWVzIHRvIGF2b2lkIG1hdGNoaW5nIHBhdHRlcm5zIHRoYXQgYXJlIG5vdFxuICAgICAgICAvLyBQZXJsIGF0IGFsbCBsaWtlICRpZGVudCQsIEBpZGVudEAsIGV0Yy5cbiAgICAgICAgYCg/IVtBLVphLXpdKSg/IVtAJCVdKWBcbiAgICAgICAgKVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgLy8gT25seSAkPSBpcyBhIHNwZWNpYWwgUGVybCB2YXJpYWJsZSBhbmQgb25lIGNhbid0IGRlY2xhcmUgQD0gb3IgJT0uXG4gICAgICAgIGJlZ2luOiAvWyQlQF0oPyFcIilbXlxcc1xcd3s9XXxcXCQ9LyxcbiAgICAgICAgcmVsZXZhbmNlOiAwXG4gICAgICB9XG4gICAgXSxcbiAgICBjb250YWluczogWyBBVFRSIF0sXG4gIH07XG4gIGNvbnN0IE5VTUJFUiA9IHtcbiAgICBjbGFzc05hbWU6ICdudW1iZXInLFxuICAgIHZhcmlhbnRzOiBbXG4gICAgICAvLyBkZWNpbWFsIG51bWJlcnM6XG4gICAgICAvLyBpbmNsdWRlIHRoZSBjYXNlIHdoZXJlIGEgbnVtYmVyIHN0YXJ0cyB3aXRoIGEgZG90IChlZy4gLjkpLCBhbmRcbiAgICAgIC8vIHRoZSBsZWFkaW5nIDA/IGF2b2lkcyBtaXhpbmcgdGhlIGZpcnN0IGFuZCBzZWNvbmQgbWF0Y2ggb24gMC54IGNhc2VzXG4gICAgICB7IG1hdGNoOiAvMD9cXC5bMC05XVswLTlfXStcXGIvIH0sXG4gICAgICAvLyBpbmNsdWRlIHRoZSBzcGVjaWFsIHZlcnNpb25lZCBudW1iZXIgKGVnLiB2NS4zOClcbiAgICAgIHsgbWF0Y2g6IC9cXGJ2PygwfFsxLTldWzAtOV9dKihcXC5bMC05X10rKT98WzEtOV1bMC05X10qKVxcYi8gfSxcbiAgICAgIC8vIG5vbi1kZWNpbWFsIG51bWJlcnM6XG4gICAgICB7IG1hdGNoOiAvXFxiMFswLTddWzAtN19dKlxcYi8gfSxcbiAgICAgIHsgbWF0Y2g6IC9cXGIweFswLTlhLWZBLUZdWzAtOWEtZkEtRl9dKlxcYi8gfSxcbiAgICAgIHsgbWF0Y2g6IC9cXGIwYlswLTFdWzAtMV9dKlxcYi8gfSxcbiAgICBdLFxuICAgIHJlbGV2YW5jZTogMFxuICB9O1xuICBjb25zdCBTVFJJTkdfQ09OVEFJTlMgPSBbXG4gICAgaGxqcy5CQUNLU0xBU0hfRVNDQVBFLFxuICAgIFNVQlNULFxuICAgIFZBUlxuICBdO1xuICBjb25zdCBSRUdFWF9ERUxJTVMgPSBbXG4gICAgLyEvLFxuICAgIC9cXC8vLFxuICAgIC9cXHwvLFxuICAgIC9cXD8vLFxuICAgIC8nLyxcbiAgICAvXCIvLCAvLyB2YWxpZCBidXQgaW5mcmVxdWVudCBhbmQgd2VpcmRcbiAgICAvIy8gLy8gdmFsaWQgYnV0IGluZnJlcXVlbnQgYW5kIHdlaXJkXG4gIF07XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB9IHByZWZpeFxuICAgKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB9IG9wZW5cbiAgICogQHBhcmFtIHtzdHJpbmd8UmVnRXhwfSBjbG9zZVxuICAgKi9cbiAgY29uc3QgUEFJUkVEX0RPVUJMRV9SRSA9IChwcmVmaXgsIG9wZW4sIGNsb3NlID0gJ1xcXFwxJykgPT4ge1xuICAgIGNvbnN0IG1pZGRsZSA9IChjbG9zZSA9PT0gJ1xcXFwxJylcbiAgICAgID8gY2xvc2VcbiAgICAgIDogcmVnZXguY29uY2F0KGNsb3NlLCBvcGVuKTtcbiAgICByZXR1cm4gcmVnZXguY29uY2F0KFxuICAgICAgcmVnZXguY29uY2F0KFwiKD86XCIsIHByZWZpeCwgXCIpXCIpLFxuICAgICAgb3BlbixcbiAgICAgIC8oPzpcXFxcLnxbXlxcXFxcXC9dKSo/LyxcbiAgICAgIG1pZGRsZSxcbiAgICAgIC8oPzpcXFxcLnxbXlxcXFxcXC9dKSo/LyxcbiAgICAgIGNsb3NlLFxuICAgICAgUkVHRVhfTU9ESUZJRVJTXG4gICAgKTtcbiAgfTtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfFJlZ0V4cH0gcHJlZml4XG4gICAqIEBwYXJhbSB7c3RyaW5nfFJlZ0V4cH0gb3BlblxuICAgKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB9IGNsb3NlXG4gICAqL1xuICBjb25zdCBQQUlSRURfUkUgPSAocHJlZml4LCBvcGVuLCBjbG9zZSkgPT4ge1xuICAgIHJldHVybiByZWdleC5jb25jYXQoXG4gICAgICByZWdleC5jb25jYXQoXCIoPzpcIiwgcHJlZml4LCBcIilcIiksXG4gICAgICBvcGVuLFxuICAgICAgLyg/OlxcXFwufFteXFxcXFxcL10pKj8vLFxuICAgICAgY2xvc2UsXG4gICAgICBSRUdFWF9NT0RJRklFUlNcbiAgICApO1xuICB9O1xuICBjb25zdCBQRVJMX0RFRkFVTFRfQ09OVEFJTlMgPSBbXG4gICAgVkFSLFxuICAgIGhsanMuSEFTSF9DT01NRU5UX01PREUsXG4gICAgaGxqcy5DT01NRU5UKFxuICAgICAgL149XFx3LyxcbiAgICAgIC89Y3V0LyxcbiAgICAgIHsgZW5kc1dpdGhQYXJlbnQ6IHRydWUgfVxuICAgICksXG4gICAgTUVUSE9ELFxuICAgIHtcbiAgICAgIGNsYXNzTmFtZTogJ3N0cmluZycsXG4gICAgICBjb250YWluczogU1RSSU5HX0NPTlRBSU5TLFxuICAgICAgdmFyaWFudHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGJlZ2luOiAncVtxd3hyXT9cXFxccypcXFxcKCcsXG4gICAgICAgICAgZW5kOiAnXFxcXCknLFxuICAgICAgICAgIHJlbGV2YW5jZTogNVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgYmVnaW46ICdxW3F3eHJdP1xcXFxzKlxcXFxbJyxcbiAgICAgICAgICBlbmQ6ICdcXFxcXScsXG4gICAgICAgICAgcmVsZXZhbmNlOiA1XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBiZWdpbjogJ3FbcXd4cl0/XFxcXHMqXFxcXHsnLFxuICAgICAgICAgIGVuZDogJ1xcXFx9JyxcbiAgICAgICAgICByZWxldmFuY2U6IDVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGJlZ2luOiAncVtxd3hyXT9cXFxccypcXFxcfCcsXG4gICAgICAgICAgZW5kOiAnXFxcXHwnLFxuICAgICAgICAgIHJlbGV2YW5jZTogNVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgYmVnaW46ICdxW3F3eHJdP1xcXFxzKjwnLFxuICAgICAgICAgIGVuZDogJz4nLFxuICAgICAgICAgIHJlbGV2YW5jZTogNVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgYmVnaW46ICdxd1xcXFxzK3EnLFxuICAgICAgICAgIGVuZDogJ3EnLFxuICAgICAgICAgIHJlbGV2YW5jZTogNVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgYmVnaW46ICdcXCcnLFxuICAgICAgICAgIGVuZDogJ1xcJycsXG4gICAgICAgICAgY29udGFpbnM6IFsgaGxqcy5CQUNLU0xBU0hfRVNDQVBFIF1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGJlZ2luOiAnXCInLFxuICAgICAgICAgIGVuZDogJ1wiJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgYmVnaW46ICdgJyxcbiAgICAgICAgICBlbmQ6ICdgJyxcbiAgICAgICAgICBjb250YWluczogWyBobGpzLkJBQ0tTTEFTSF9FU0NBUEUgXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgYmVnaW46IC9cXHtcXHcrXFx9LyxcbiAgICAgICAgICByZWxldmFuY2U6IDBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGJlZ2luOiAnLT9cXFxcdytcXFxccyo9PicsXG4gICAgICAgICAgcmVsZXZhbmNlOiAwXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIE5VTUJFUixcbiAgICB7IC8vIHJlZ2V4cCBjb250YWluZXJcbiAgICAgIGJlZ2luOiAnKFxcXFwvXFxcXC98JyArIGhsanMuUkVfU1RBUlRFUlNfUkUgKyAnfFxcXFxiKHNwbGl0fHJldHVybnxwcmludHxyZXZlcnNlfGdyZXApXFxcXGIpXFxcXHMqJyxcbiAgICAgIGtleXdvcmRzOiAnc3BsaXQgcmV0dXJuIHByaW50IHJldmVyc2UgZ3JlcCcsXG4gICAgICByZWxldmFuY2U6IDAsXG4gICAgICBjb250YWluczogW1xuICAgICAgICBobGpzLkhBU0hfQ09NTUVOVF9NT0RFLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3NOYW1lOiAncmVnZXhwJyxcbiAgICAgICAgICB2YXJpYW50czogW1xuICAgICAgICAgICAgLy8gYWxsb3cgbWF0Y2hpbmcgY29tbW9uIGRlbGltaXRlcnNcbiAgICAgICAgICAgIHsgYmVnaW46IFBBSVJFRF9ET1VCTEVfUkUoXCJzfHRyfHlcIiwgcmVnZXguZWl0aGVyKC4uLlJFR0VYX0RFTElNUywgeyBjYXB0dXJlOiB0cnVlIH0pKSB9LFxuICAgICAgICAgICAgLy8gYW5kIHRoZW4gcGFpcmVkIGRlbG1pc1xuICAgICAgICAgICAgeyBiZWdpbjogUEFJUkVEX0RPVUJMRV9SRShcInN8dHJ8eVwiLCBcIlxcXFwoXCIsIFwiXFxcXClcIikgfSxcbiAgICAgICAgICAgIHsgYmVnaW46IFBBSVJFRF9ET1VCTEVfUkUoXCJzfHRyfHlcIiwgXCJcXFxcW1wiLCBcIlxcXFxdXCIpIH0sXG4gICAgICAgICAgICB7IGJlZ2luOiBQQUlSRURfRE9VQkxFX1JFKFwic3x0cnx5XCIsIFwiXFxcXHtcIiwgXCJcXFxcfVwiKSB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICByZWxldmFuY2U6IDJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzTmFtZTogJ3JlZ2V4cCcsXG4gICAgICAgICAgdmFyaWFudHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLy8gY291bGQgYmUgYSBjb21tZW50IGluIG1hbnkgbGFuZ3VhZ2VzIHNvIGRvIG5vdCBjb3VudFxuICAgICAgICAgICAgICAvLyBhcyByZWxldmFudFxuICAgICAgICAgICAgICBiZWdpbjogLyhtfHFyKVxcL1xcLy8sXG4gICAgICAgICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHByZWZpeCBpcyBvcHRpb25hbCB3aXRoIC9yZWdleC9cbiAgICAgICAgICAgIHsgYmVnaW46IFBBSVJFRF9SRShcIig/Om18cXIpP1wiLCAvXFwvLywgL1xcLy8pIH0sXG4gICAgICAgICAgICAvLyBhbGxvdyBtYXRjaGluZyBjb21tb24gZGVsaW1pdGVyc1xuICAgICAgICAgICAgeyBiZWdpbjogUEFJUkVEX1JFKFwibXxxclwiLCByZWdleC5laXRoZXIoLi4uUkVHRVhfREVMSU1TLCB7IGNhcHR1cmU6IHRydWUgfSksIC9cXDEvKSB9LFxuICAgICAgICAgICAgLy8gYWxsb3cgY29tbW9uIHBhaXJlZCBkZWxtaW5zXG4gICAgICAgICAgICB7IGJlZ2luOiBQQUlSRURfUkUoXCJtfHFyXCIsIC9cXCgvLCAvXFwpLykgfSxcbiAgICAgICAgICAgIHsgYmVnaW46IFBBSVJFRF9SRShcIm18cXJcIiwgL1xcWy8sIC9cXF0vKSB9LFxuICAgICAgICAgICAgeyBiZWdpbjogUEFJUkVEX1JFKFwibXxxclwiLCAvXFx7LywgL1xcfS8pIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIGNsYXNzTmFtZTogJ2Z1bmN0aW9uJyxcbiAgICAgIGJlZ2luS2V5d29yZHM6ICdzdWIgbWV0aG9kJyxcbiAgICAgIGVuZDogJyhcXFxccypcXFxcKC4qP1xcXFwpKT9bO3tdJyxcbiAgICAgIGV4Y2x1ZGVFbmQ6IHRydWUsXG4gICAgICByZWxldmFuY2U6IDUsXG4gICAgICBjb250YWluczogWyBobGpzLlRJVExFX01PREUsIEFUVFIgXVxuICAgIH0sXG4gICAge1xuICAgICAgY2xhc3NOYW1lOiAnY2xhc3MnLFxuICAgICAgYmVnaW5LZXl3b3JkczogJ2NsYXNzJyxcbiAgICAgIGVuZDogJ1s7e10nLFxuICAgICAgZXhjbHVkZUVuZDogdHJ1ZSxcbiAgICAgIHJlbGV2YW5jZTogNSxcbiAgICAgIGNvbnRhaW5zOiBbIGhsanMuVElUTEVfTU9ERSwgQVRUUiwgTlVNQkVSIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIGJlZ2luOiAnLVxcXFx3XFxcXGInLFxuICAgICAgcmVsZXZhbmNlOiAwXG4gICAgfSxcbiAgICB7XG4gICAgICBiZWdpbjogXCJeX19EQVRBX18kXCIsXG4gICAgICBlbmQ6IFwiXl9fRU5EX18kXCIsXG4gICAgICBzdWJMYW5ndWFnZTogJ21vam9saWNpb3VzJyxcbiAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBiZWdpbjogXCJeQEAuKlwiLFxuICAgICAgICAgIGVuZDogXCIkXCIsXG4gICAgICAgICAgY2xhc3NOYW1lOiBcImNvbW1lbnRcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICBdO1xuICBTVUJTVC5jb250YWlucyA9IFBFUkxfREVGQVVMVF9DT05UQUlOUztcbiAgTUVUSE9ELmNvbnRhaW5zID0gUEVSTF9ERUZBVUxUX0NPTlRBSU5TO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ1BlcmwnLFxuICAgIGFsaWFzZXM6IFtcbiAgICAgICdwbCcsXG4gICAgICAncG0nXG4gICAgXSxcbiAgICBrZXl3b3JkczogUEVSTF9LRVlXT1JEUyxcbiAgICBjb250YWluczogUEVSTF9ERUZBVUxUX0NPTlRBSU5TXG4gIH07XG59XG5cbmV4cG9ydCB7IHBlcmwgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbInBlcmwiLCJobGpzIiwicmVnZXgiLCJLRVlXT1JEUyIsIlJFR0VYX01PRElGSUVSUyIsIlBFUkxfS0VZV09SRFMiLCIkcGF0dGVybiIsImtleXdvcmQiLCJqb2luIiwiU1VCU1QiLCJjbGFzc05hbWUiLCJiZWdpbiIsImVuZCIsImtleXdvcmRzIiwiTUVUSE9EIiwiQVRUUiIsInNjb3BlIiwibWF0Y2giLCJWQVIiLCJ2YXJpYW50cyIsImNvbmNhdCIsInJlbGV2YW5jZSIsImNvbnRhaW5zIiwiTlVNQkVSIiwiU1RSSU5HX0NPTlRBSU5TIiwiQkFDS1NMQVNIX0VTQ0FQRSIsIlJFR0VYX0RFTElNUyIsIlBBSVJFRF9ET1VCTEVfUkUiLCJwcmVmaXgiLCJvcGVuIiwiY2xvc2UiLCJtaWRkbGUiLCJQQUlSRURfUkUiLCJQRVJMX0RFRkFVTFRfQ09OVEFJTlMiLCJIQVNIX0NPTU1FTlRfTU9ERSIsIkNPTU1FTlQiLCJlbmRzV2l0aFBhcmVudCIsIlJFX1NUQVJURVJTX1JFIiwiZWl0aGVyIiwiY2FwdHVyZSIsImJlZ2luS2V5d29yZHMiLCJleGNsdWRlRW5kIiwiVElUTEVfTU9ERSIsInN1Ykxhbmd1YWdlIiwibmFtZSIsImFsaWFzZXMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/perl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/php-template.js":
/*!****************************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/php-template.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ phpTemplate)\n/* harmony export */ });\n/*\nLanguage: PHP Template\nRequires: xml.js, php.js\nAuthor: Josh Goebel <hello@joshgoebel.com>\nWebsite: https://www.php.net\nCategory: common\n*/ function phpTemplate(hljs) {\n    return {\n        name: \"PHP template\",\n        subLanguage: \"xml\",\n        contains: [\n            {\n                begin: /<\\?(php|=)?/,\n                end: /\\?>/,\n                subLanguage: \"php\",\n                contains: [\n                    // We don't want the php closing tag ?> to close the PHP block when\n                    // inside any of the following blocks:\n                    {\n                        begin: \"/\\\\*\",\n                        end: \"\\\\*/\",\n                        skip: true\n                    },\n                    {\n                        begin: 'b\"',\n                        end: '\"',\n                        skip: true\n                    },\n                    {\n                        begin: \"b'\",\n                        end: \"'\",\n                        skip: true\n                    },\n                    hljs.inherit(hljs.APOS_STRING_MODE, {\n                        illegal: null,\n                        className: null,\n                        contains: null,\n                        skip: true\n                    }),\n                    hljs.inherit(hljs.QUOTE_STRING_MODE, {\n                        illegal: null,\n                        className: null,\n                        contains: null,\n                        skip: true\n                    })\n                ]\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9waHAtdGVtcGxhdGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7QUFNQSxHQUVBLFNBQVNBLFlBQVlDLElBQUk7SUFDdkIsT0FBTztRQUNMQyxNQUFNO1FBQ05DLGFBQWE7UUFDYkMsVUFBVTtZQUNSO2dCQUNFQyxPQUFPO2dCQUNQQyxLQUFLO2dCQUNMSCxhQUFhO2dCQUNiQyxVQUFVO29CQUNSLG1FQUFtRTtvQkFDbkUsc0NBQXNDO29CQUN0Qzt3QkFDRUMsT0FBTzt3QkFDUEMsS0FBSzt3QkFDTEMsTUFBTTtvQkFDUjtvQkFDQTt3QkFDRUYsT0FBTzt3QkFDUEMsS0FBSzt3QkFDTEMsTUFBTTtvQkFDUjtvQkFDQTt3QkFDRUYsT0FBTzt3QkFDUEMsS0FBSzt3QkFDTEMsTUFBTTtvQkFDUjtvQkFDQU4sS0FBS08sT0FBTyxDQUFDUCxLQUFLUSxnQkFBZ0IsRUFBRTt3QkFDbENDLFNBQVM7d0JBQ1RDLFdBQVc7d0JBQ1hQLFVBQVU7d0JBQ1ZHLE1BQU07b0JBQ1I7b0JBQ0FOLEtBQUtPLE9BQU8sQ0FBQ1AsS0FBS1csaUJBQWlCLEVBQUU7d0JBQ25DRixTQUFTO3dCQUNUQyxXQUFXO3dCQUNYUCxVQUFVO3dCQUNWRyxNQUFNO29CQUNSO2lCQUNEO1lBQ0g7U0FDRDtJQUNIO0FBQ0Y7QUFFa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbW5pLWNoYXQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9waHAtdGVtcGxhdGUuanM/MDJhNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTGFuZ3VhZ2U6IFBIUCBUZW1wbGF0ZVxuUmVxdWlyZXM6IHhtbC5qcywgcGhwLmpzXG5BdXRob3I6IEpvc2ggR29lYmVsIDxoZWxsb0Bqb3NoZ29lYmVsLmNvbT5cbldlYnNpdGU6IGh0dHBzOi8vd3d3LnBocC5uZXRcbkNhdGVnb3J5OiBjb21tb25cbiovXG5cbmZ1bmN0aW9uIHBocFRlbXBsYXRlKGhsanMpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBcIlBIUCB0ZW1wbGF0ZVwiLFxuICAgIHN1Ykxhbmd1YWdlOiAneG1sJyxcbiAgICBjb250YWluczogW1xuICAgICAge1xuICAgICAgICBiZWdpbjogLzxcXD8ocGhwfD0pPy8sXG4gICAgICAgIGVuZDogL1xcPz4vLFxuICAgICAgICBzdWJMYW5ndWFnZTogJ3BocCcsXG4gICAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0aGUgcGhwIGNsb3NpbmcgdGFnID8+IHRvIGNsb3NlIHRoZSBQSFAgYmxvY2sgd2hlblxuICAgICAgICAgIC8vIGluc2lkZSBhbnkgb2YgdGhlIGZvbGxvd2luZyBibG9ja3M6XG4gICAgICAgICAge1xuICAgICAgICAgICAgYmVnaW46ICcvXFxcXConLFxuICAgICAgICAgICAgZW5kOiAnXFxcXCovJyxcbiAgICAgICAgICAgIHNraXA6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGJlZ2luOiAnYlwiJyxcbiAgICAgICAgICAgIGVuZDogJ1wiJyxcbiAgICAgICAgICAgIHNraXA6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGJlZ2luOiAnYlxcJycsXG4gICAgICAgICAgICBlbmQ6ICdcXCcnLFxuICAgICAgICAgICAgc2tpcDogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgaGxqcy5pbmhlcml0KGhsanMuQVBPU19TVFJJTkdfTU9ERSwge1xuICAgICAgICAgICAgaWxsZWdhbDogbnVsbCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogbnVsbCxcbiAgICAgICAgICAgIGNvbnRhaW5zOiBudWxsLFxuICAgICAgICAgICAgc2tpcDogdHJ1ZVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGhsanMuaW5oZXJpdChobGpzLlFVT1RFX1NUUklOR19NT0RFLCB7XG4gICAgICAgICAgICBpbGxlZ2FsOiBudWxsLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBudWxsLFxuICAgICAgICAgICAgY29udGFpbnM6IG51bGwsXG4gICAgICAgICAgICBza2lwOiB0cnVlXG4gICAgICAgICAgfSlcbiAgICAgICAgXVxuICAgICAgfVxuICAgIF1cbiAgfTtcbn1cblxuZXhwb3J0IHsgcGhwVGVtcGxhdGUgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbInBocFRlbXBsYXRlIiwiaGxqcyIsIm5hbWUiLCJzdWJMYW5ndWFnZSIsImNvbnRhaW5zIiwiYmVnaW4iLCJlbmQiLCJza2lwIiwiaW5oZXJpdCIsIkFQT1NfU1RSSU5HX01PREUiLCJpbGxlZ2FsIiwiY2xhc3NOYW1lIiwiUVVPVEVfU1RSSU5HX01PREUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/php-template.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/php.js":
/*!*******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/php.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ php)\n/* harmony export */ });\n/*\nLanguage: PHP\nAuthor: Victor Karamzin <Victor.Karamzin@enterra-inc.com>\nContributors: Evgeny Stepanischev <imbolk@gmail.com>, Ivan Sagalaev <maniac@softwaremaniacs.org>\nWebsite: https://www.php.net\nCategory: common\n*/ /**\n * @param {HLJSApi} hljs\n * @returns {LanguageDetail}\n * */ function php(hljs) {\n    const regex = hljs.regex;\n    // negative look-ahead tries to avoid matching patterns that are not\n    // Perl at all like $ident$, @ident@, etc.\n    const NOT_PERL_ETC = /(?![A-Za-z0-9])(?![$])/;\n    const IDENT_RE = regex.concat(/[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/, NOT_PERL_ETC);\n    // Will not detect camelCase classes\n    const PASCAL_CASE_CLASS_NAME_RE = regex.concat(/(\\\\?[A-Z][a-z0-9_\\x7f-\\xff]+|\\\\?[A-Z]+(?=[A-Z][a-z0-9_\\x7f-\\xff])){1,}/, NOT_PERL_ETC);\n    const UPCASE_NAME_RE = regex.concat(/[A-Z]+/, NOT_PERL_ETC);\n    const VARIABLE = {\n        scope: \"variable\",\n        match: \"\\\\$+\" + IDENT_RE\n    };\n    const PREPROCESSOR = {\n        scope: \"meta\",\n        variants: [\n            {\n                begin: /<\\?php/,\n                relevance: 10\n            },\n            {\n                begin: /<\\?=/\n            },\n            // less relevant per PSR-1 which says not to use short-tags\n            {\n                begin: /<\\?/,\n                relevance: 0.1\n            },\n            {\n                begin: /\\?>/\n            } // end php tag\n        ]\n    };\n    const SUBST = {\n        scope: \"subst\",\n        variants: [\n            {\n                begin: /\\$\\w+/\n            },\n            {\n                begin: /\\{\\$/,\n                end: /\\}/\n            }\n        ]\n    };\n    const SINGLE_QUOTED = hljs.inherit(hljs.APOS_STRING_MODE, {\n        illegal: null\n    });\n    const DOUBLE_QUOTED = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        illegal: null,\n        contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST)\n    });\n    const HEREDOC = {\n        begin: /<<<[ \\t]*(?:(\\w+)|\"(\\w+)\")\\n/,\n        end: /[ \\t]*(\\w+)\\b/,\n        contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),\n        \"on:begin\": (m, resp)=>{\n            resp.data._beginMatch = m[1] || m[2];\n        },\n        \"on:end\": (m, resp)=>{\n            if (resp.data._beginMatch !== m[1]) resp.ignoreMatch();\n        }\n    };\n    const NOWDOC = hljs.END_SAME_AS_BEGIN({\n        begin: /<<<[ \\t]*'(\\w+)'\\n/,\n        end: /[ \\t]*(\\w+)\\b/\n    });\n    // list of valid whitespaces because non-breaking space might be part of a IDENT_RE\n    const WHITESPACE = \"[ \t\\n]\";\n    const STRING = {\n        scope: \"string\",\n        variants: [\n            DOUBLE_QUOTED,\n            SINGLE_QUOTED,\n            HEREDOC,\n            NOWDOC\n        ]\n    };\n    const NUMBER = {\n        scope: \"number\",\n        variants: [\n            {\n                begin: `\\\\b0[bB][01]+(?:_[01]+)*\\\\b`\n            },\n            {\n                begin: `\\\\b0[oO][0-7]+(?:_[0-7]+)*\\\\b`\n            },\n            {\n                begin: `\\\\b0[xX][\\\\da-fA-F]+(?:_[\\\\da-fA-F]+)*\\\\b`\n            },\n            // Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.\n            {\n                begin: `(?:\\\\b\\\\d+(?:_\\\\d+)*(\\\\.(?:\\\\d+(?:_\\\\d+)*))?|\\\\B\\\\.\\\\d+)(?:[eE][+-]?\\\\d+)?`\n            }\n        ],\n        relevance: 0\n    };\n    const LITERALS = [\n        \"false\",\n        \"null\",\n        \"true\"\n    ];\n    const KWS = [\n        // Magic constants:\n        // <https://www.php.net/manual/en/language.constants.predefined.php>\n        \"__CLASS__\",\n        \"__DIR__\",\n        \"__FILE__\",\n        \"__FUNCTION__\",\n        \"__COMPILER_HALT_OFFSET__\",\n        \"__LINE__\",\n        \"__METHOD__\",\n        \"__NAMESPACE__\",\n        \"__TRAIT__\",\n        // Function that look like language construct or language construct that look like function:\n        // List of keywords that may not require parenthesis\n        \"die\",\n        \"echo\",\n        \"exit\",\n        \"include\",\n        \"include_once\",\n        \"print\",\n        \"require\",\n        \"require_once\",\n        // These are not language construct (function) but operate on the currently-executing function and can access the current symbol table\n        // 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +\n        // Other keywords:\n        // <https://www.php.net/manual/en/reserved.php>\n        // <https://www.php.net/manual/en/language.types.type-juggling.php>\n        \"array\",\n        \"abstract\",\n        \"and\",\n        \"as\",\n        \"binary\",\n        \"bool\",\n        \"boolean\",\n        \"break\",\n        \"callable\",\n        \"case\",\n        \"catch\",\n        \"class\",\n        \"clone\",\n        \"const\",\n        \"continue\",\n        \"declare\",\n        \"default\",\n        \"do\",\n        \"double\",\n        \"else\",\n        \"elseif\",\n        \"empty\",\n        \"enddeclare\",\n        \"endfor\",\n        \"endforeach\",\n        \"endif\",\n        \"endswitch\",\n        \"endwhile\",\n        \"enum\",\n        \"eval\",\n        \"extends\",\n        \"final\",\n        \"finally\",\n        \"float\",\n        \"for\",\n        \"foreach\",\n        \"from\",\n        \"global\",\n        \"goto\",\n        \"if\",\n        \"implements\",\n        \"instanceof\",\n        \"insteadof\",\n        \"int\",\n        \"integer\",\n        \"interface\",\n        \"isset\",\n        \"iterable\",\n        \"list\",\n        \"match|0\",\n        \"mixed\",\n        \"new\",\n        \"never\",\n        \"object\",\n        \"or\",\n        \"private\",\n        \"protected\",\n        \"public\",\n        \"readonly\",\n        \"real\",\n        \"return\",\n        \"string\",\n        \"switch\",\n        \"throw\",\n        \"trait\",\n        \"try\",\n        \"unset\",\n        \"use\",\n        \"var\",\n        \"void\",\n        \"while\",\n        \"xor\",\n        \"yield\"\n    ];\n    const BUILT_INS = [\n        // Standard PHP library:\n        // <https://www.php.net/manual/en/book.spl.php>\n        \"Error|0\",\n        \"AppendIterator\",\n        \"ArgumentCountError\",\n        \"ArithmeticError\",\n        \"ArrayIterator\",\n        \"ArrayObject\",\n        \"AssertionError\",\n        \"BadFunctionCallException\",\n        \"BadMethodCallException\",\n        \"CachingIterator\",\n        \"CallbackFilterIterator\",\n        \"CompileError\",\n        \"Countable\",\n        \"DirectoryIterator\",\n        \"DivisionByZeroError\",\n        \"DomainException\",\n        \"EmptyIterator\",\n        \"ErrorException\",\n        \"Exception\",\n        \"FilesystemIterator\",\n        \"FilterIterator\",\n        \"GlobIterator\",\n        \"InfiniteIterator\",\n        \"InvalidArgumentException\",\n        \"IteratorIterator\",\n        \"LengthException\",\n        \"LimitIterator\",\n        \"LogicException\",\n        \"MultipleIterator\",\n        \"NoRewindIterator\",\n        \"OutOfBoundsException\",\n        \"OutOfRangeException\",\n        \"OuterIterator\",\n        \"OverflowException\",\n        \"ParentIterator\",\n        \"ParseError\",\n        \"RangeException\",\n        \"RecursiveArrayIterator\",\n        \"RecursiveCachingIterator\",\n        \"RecursiveCallbackFilterIterator\",\n        \"RecursiveDirectoryIterator\",\n        \"RecursiveFilterIterator\",\n        \"RecursiveIterator\",\n        \"RecursiveIteratorIterator\",\n        \"RecursiveRegexIterator\",\n        \"RecursiveTreeIterator\",\n        \"RegexIterator\",\n        \"RuntimeException\",\n        \"SeekableIterator\",\n        \"SplDoublyLinkedList\",\n        \"SplFileInfo\",\n        \"SplFileObject\",\n        \"SplFixedArray\",\n        \"SplHeap\",\n        \"SplMaxHeap\",\n        \"SplMinHeap\",\n        \"SplObjectStorage\",\n        \"SplObserver\",\n        \"SplPriorityQueue\",\n        \"SplQueue\",\n        \"SplStack\",\n        \"SplSubject\",\n        \"SplTempFileObject\",\n        \"TypeError\",\n        \"UnderflowException\",\n        \"UnexpectedValueException\",\n        \"UnhandledMatchError\",\n        // Reserved interfaces:\n        // <https://www.php.net/manual/en/reserved.interfaces.php>\n        \"ArrayAccess\",\n        \"BackedEnum\",\n        \"Closure\",\n        \"Fiber\",\n        \"Generator\",\n        \"Iterator\",\n        \"IteratorAggregate\",\n        \"Serializable\",\n        \"Stringable\",\n        \"Throwable\",\n        \"Traversable\",\n        \"UnitEnum\",\n        \"WeakReference\",\n        \"WeakMap\",\n        // Reserved classes:\n        // <https://www.php.net/manual/en/reserved.classes.php>\n        \"Directory\",\n        \"__PHP_Incomplete_Class\",\n        \"parent\",\n        \"php_user_filter\",\n        \"self\",\n        \"static\",\n        \"stdClass\"\n    ];\n    /** Dual-case keywords\n   *\n   * [\"then\",\"FILE\"] =>\n   *     [\"then\", \"THEN\", \"FILE\", \"file\"]\n   *\n   * @param {string[]} items */ const dualCase = (items)=>{\n        /** @type string[] */ const result = [];\n        items.forEach((item)=>{\n            result.push(item);\n            if (item.toLowerCase() === item) {\n                result.push(item.toUpperCase());\n            } else {\n                result.push(item.toLowerCase());\n            }\n        });\n        return result;\n    };\n    const KEYWORDS = {\n        keyword: KWS,\n        literal: dualCase(LITERALS),\n        built_in: BUILT_INS\n    };\n    /**\n   * @param {string[]} items */ const normalizeKeywords = (items)=>{\n        return items.map((item)=>{\n            return item.replace(/\\|\\d+$/, \"\");\n        });\n    };\n    const CONSTRUCTOR_CALL = {\n        variants: [\n            {\n                match: [\n                    /new/,\n                    regex.concat(WHITESPACE, \"+\"),\n                    // to prevent built ins from being confused as the class constructor call\n                    regex.concat(\"(?!\", normalizeKeywords(BUILT_INS).join(\"\\\\b|\"), \"\\\\b)\"),\n                    PASCAL_CASE_CLASS_NAME_RE\n                ],\n                scope: {\n                    1: \"keyword\",\n                    4: \"title.class\"\n                }\n            }\n        ]\n    };\n    const CONSTANT_REFERENCE = regex.concat(IDENT_RE, \"\\\\b(?!\\\\()\");\n    const LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON = {\n        variants: [\n            {\n                match: [\n                    regex.concat(/::/, regex.lookahead(/(?!class\\b)/)),\n                    CONSTANT_REFERENCE\n                ],\n                scope: {\n                    2: \"variable.constant\"\n                }\n            },\n            {\n                match: [\n                    /::/,\n                    /class/\n                ],\n                scope: {\n                    2: \"variable.language\"\n                }\n            },\n            {\n                match: [\n                    PASCAL_CASE_CLASS_NAME_RE,\n                    regex.concat(/::/, regex.lookahead(/(?!class\\b)/)),\n                    CONSTANT_REFERENCE\n                ],\n                scope: {\n                    1: \"title.class\",\n                    3: \"variable.constant\"\n                }\n            },\n            {\n                match: [\n                    PASCAL_CASE_CLASS_NAME_RE,\n                    regex.concat(\"::\", regex.lookahead(/(?!class\\b)/))\n                ],\n                scope: {\n                    1: \"title.class\"\n                }\n            },\n            {\n                match: [\n                    PASCAL_CASE_CLASS_NAME_RE,\n                    /::/,\n                    /class/\n                ],\n                scope: {\n                    1: \"title.class\",\n                    3: \"variable.language\"\n                }\n            }\n        ]\n    };\n    const NAMED_ARGUMENT = {\n        scope: \"attr\",\n        match: regex.concat(IDENT_RE, regex.lookahead(\":\"), regex.lookahead(/(?!::)/))\n    };\n    const PARAMS_MODE = {\n        relevance: 0,\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        contains: [\n            NAMED_ARGUMENT,\n            VARIABLE,\n            LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\n            hljs.C_BLOCK_COMMENT_MODE,\n            STRING,\n            NUMBER,\n            CONSTRUCTOR_CALL\n        ]\n    };\n    const FUNCTION_INVOKE = {\n        relevance: 0,\n        match: [\n            /\\b/,\n            // to prevent keywords from being confused as the function title\n            regex.concat(\"(?!fn\\\\b|function\\\\b|\", normalizeKeywords(KWS).join(\"\\\\b|\"), \"|\", normalizeKeywords(BUILT_INS).join(\"\\\\b|\"), \"\\\\b)\"),\n            IDENT_RE,\n            regex.concat(WHITESPACE, \"*\"),\n            regex.lookahead(/(?=\\()/)\n        ],\n        scope: {\n            3: \"title.function.invoke\"\n        },\n        contains: [\n            PARAMS_MODE\n        ]\n    };\n    PARAMS_MODE.contains.push(FUNCTION_INVOKE);\n    const ATTRIBUTE_CONTAINS = [\n        NAMED_ARGUMENT,\n        LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\n        hljs.C_BLOCK_COMMENT_MODE,\n        STRING,\n        NUMBER,\n        CONSTRUCTOR_CALL\n    ];\n    const ATTRIBUTES = {\n        begin: regex.concat(/#\\[\\s*\\\\?/, regex.either(PASCAL_CASE_CLASS_NAME_RE, UPCASE_NAME_RE)),\n        beginScope: \"meta\",\n        end: /]/,\n        endScope: \"meta\",\n        keywords: {\n            literal: LITERALS,\n            keyword: [\n                \"new\",\n                \"array\"\n            ]\n        },\n        contains: [\n            {\n                begin: /\\[/,\n                end: /]/,\n                keywords: {\n                    literal: LITERALS,\n                    keyword: [\n                        \"new\",\n                        \"array\"\n                    ]\n                },\n                contains: [\n                    \"self\",\n                    ...ATTRIBUTE_CONTAINS\n                ]\n            },\n            ...ATTRIBUTE_CONTAINS,\n            {\n                scope: \"meta\",\n                variants: [\n                    {\n                        match: PASCAL_CASE_CLASS_NAME_RE\n                    },\n                    {\n                        match: UPCASE_NAME_RE\n                    }\n                ]\n            }\n        ]\n    };\n    return {\n        case_insensitive: false,\n        keywords: KEYWORDS,\n        contains: [\n            ATTRIBUTES,\n            hljs.HASH_COMMENT_MODE,\n            hljs.COMMENT(\"//\", \"$\"),\n            hljs.COMMENT(\"/\\\\*\", \"\\\\*/\", {\n                contains: [\n                    {\n                        scope: \"doctag\",\n                        match: \"@[A-Za-z]+\"\n                    }\n                ]\n            }),\n            {\n                match: /__halt_compiler\\(\\);/,\n                keywords: \"__halt_compiler\",\n                starts: {\n                    scope: \"comment\",\n                    end: hljs.MATCH_NOTHING_RE,\n                    contains: [\n                        {\n                            match: /\\?>/,\n                            scope: \"meta\",\n                            endsParent: true\n                        }\n                    ]\n                }\n            },\n            PREPROCESSOR,\n            {\n                scope: \"variable.language\",\n                match: /\\$this\\b/\n            },\n            VARIABLE,\n            FUNCTION_INVOKE,\n            LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\n            {\n                match: [\n                    /const/,\n                    /\\s/,\n                    IDENT_RE\n                ],\n                scope: {\n                    1: \"keyword\",\n                    3: \"variable.constant\"\n                }\n            },\n            CONSTRUCTOR_CALL,\n            {\n                scope: \"function\",\n                relevance: 0,\n                beginKeywords: \"fn function\",\n                end: /[;{]/,\n                excludeEnd: true,\n                illegal: \"[$%\\\\[]\",\n                contains: [\n                    {\n                        beginKeywords: \"use\"\n                    },\n                    hljs.UNDERSCORE_TITLE_MODE,\n                    {\n                        begin: \"=>\",\n                        endsParent: true\n                    },\n                    {\n                        scope: \"params\",\n                        begin: \"\\\\(\",\n                        end: \"\\\\)\",\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        keywords: KEYWORDS,\n                        contains: [\n                            \"self\",\n                            ATTRIBUTES,\n                            VARIABLE,\n                            LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\n                            hljs.C_BLOCK_COMMENT_MODE,\n                            STRING,\n                            NUMBER\n                        ]\n                    }\n                ]\n            },\n            {\n                scope: \"class\",\n                variants: [\n                    {\n                        beginKeywords: \"enum\",\n                        illegal: /[($\"]/\n                    },\n                    {\n                        beginKeywords: \"class interface trait\",\n                        illegal: /[:($\"]/\n                    }\n                ],\n                relevance: 0,\n                end: /\\{/,\n                excludeEnd: true,\n                contains: [\n                    {\n                        beginKeywords: \"extends implements\"\n                    },\n                    hljs.UNDERSCORE_TITLE_MODE\n                ]\n            },\n            // both use and namespace still use \"old style\" rules (vs multi-match)\n            // because the namespace name can include `\\` and we still want each\n            // element to be treated as its own *individual* title\n            {\n                beginKeywords: \"namespace\",\n                relevance: 0,\n                end: \";\",\n                illegal: /[.']/,\n                contains: [\n                    hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {\n                        scope: \"title.class\"\n                    })\n                ]\n            },\n            {\n                beginKeywords: \"use\",\n                relevance: 0,\n                end: \";\",\n                contains: [\n                    // TODO: title.function vs title.class\n                    {\n                        match: /\\b(as|const|function)\\b/,\n                        scope: \"keyword\"\n                    },\n                    // TODO: could be title.class or title.function\n                    hljs.UNDERSCORE_TITLE_MODE\n                ]\n            },\n            STRING,\n            NUMBER\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/php.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/plaintext.js":
/*!*************************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/plaintext.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ plaintext)\n/* harmony export */ });\n/*\nLanguage: Plain text\nAuthor: Egor Rogov (e.rogov@postgrespro.ru)\nDescription: Plain text without any highlighting.\nCategory: common\n*/ function plaintext(hljs) {\n    return {\n        name: \"Plain text\",\n        aliases: [\n            \"text\",\n            \"txt\"\n        ],\n        disableAutodetect: true\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9wbGFpbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7OztBQUtBLEdBRUEsU0FBU0EsVUFBVUMsSUFBSTtJQUNyQixPQUFPO1FBQ0xDLE1BQU07UUFDTkMsU0FBUztZQUNQO1lBQ0E7U0FDRDtRQUNEQyxtQkFBbUI7SUFDckI7QUFDRjtBQUVnQyIsInNvdXJjZXMiOlsid2VicGFjazovL29tbmktY2hhdC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9oaWdobGlnaHQuanMvZXMvbGFuZ3VhZ2VzL3BsYWludGV4dC5qcz9kOWNlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogUGxhaW4gdGV4dFxuQXV0aG9yOiBFZ29yIFJvZ292IChlLnJvZ292QHBvc3RncmVzcHJvLnJ1KVxuRGVzY3JpcHRpb246IFBsYWluIHRleHQgd2l0aG91dCBhbnkgaGlnaGxpZ2h0aW5nLlxuQ2F0ZWdvcnk6IGNvbW1vblxuKi9cblxuZnVuY3Rpb24gcGxhaW50ZXh0KGhsanMpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnUGxhaW4gdGV4dCcsXG4gICAgYWxpYXNlczogW1xuICAgICAgJ3RleHQnLFxuICAgICAgJ3R4dCdcbiAgICBdLFxuICAgIGRpc2FibGVBdXRvZGV0ZWN0OiB0cnVlXG4gIH07XG59XG5cbmV4cG9ydCB7IHBsYWludGV4dCBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsicGxhaW50ZXh0IiwiaGxqcyIsIm5hbWUiLCJhbGlhc2VzIiwiZGlzYWJsZUF1dG9kZXRlY3QiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/plaintext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/python-repl.js":
/*!***************************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/python-repl.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ pythonRepl)\n/* harmony export */ });\n/*\nLanguage: Python REPL\nRequires: python.js\nAuthor: Josh Goebel <hello@joshgoebel.com>\nCategory: common\n*/ function pythonRepl(hljs) {\n    return {\n        aliases: [\n            \"pycon\"\n        ],\n        contains: [\n            {\n                className: \"meta.prompt\",\n                starts: {\n                    // a space separates the REPL prefix from the actual code\n                    // this is purely for cleaner HTML output\n                    end: / |$/,\n                    starts: {\n                        end: \"$\",\n                        subLanguage: \"python\"\n                    }\n                },\n                variants: [\n                    {\n                        begin: /^>>>(?=[ ]|$)/\n                    },\n                    {\n                        begin: /^\\.\\.\\.(?=[ ]|$)/\n                    }\n                ]\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9weXRob24tcmVwbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7O0FBS0EsR0FFQSxTQUFTQSxXQUFXQyxJQUFJO0lBQ3RCLE9BQU87UUFDTEMsU0FBUztZQUFFO1NBQVM7UUFDcEJDLFVBQVU7WUFDUjtnQkFDRUMsV0FBVztnQkFDWEMsUUFBUTtvQkFDTix5REFBeUQ7b0JBQ3pELHlDQUF5QztvQkFDekNDLEtBQUs7b0JBQ0xELFFBQVE7d0JBQ05DLEtBQUs7d0JBQ0xDLGFBQWE7b0JBQ2Y7Z0JBQ0Y7Z0JBQ0FDLFVBQVU7b0JBQ1I7d0JBQUVDLE9BQU87b0JBQWdCO29CQUN6Qjt3QkFBRUEsT0FBTztvQkFBbUI7aUJBQzdCO1lBQ0g7U0FDRDtJQUNIO0FBQ0Y7QUFFaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbW5pLWNoYXQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9weXRob24tcmVwbC5qcz83MTQ4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogUHl0aG9uIFJFUExcblJlcXVpcmVzOiBweXRob24uanNcbkF1dGhvcjogSm9zaCBHb2ViZWwgPGhlbGxvQGpvc2hnb2ViZWwuY29tPlxuQ2F0ZWdvcnk6IGNvbW1vblxuKi9cblxuZnVuY3Rpb24gcHl0aG9uUmVwbChobGpzKSB7XG4gIHJldHVybiB7XG4gICAgYWxpYXNlczogWyAncHljb24nIF0sXG4gICAgY29udGFpbnM6IFtcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnbWV0YS5wcm9tcHQnLFxuICAgICAgICBzdGFydHM6IHtcbiAgICAgICAgICAvLyBhIHNwYWNlIHNlcGFyYXRlcyB0aGUgUkVQTCBwcmVmaXggZnJvbSB0aGUgYWN0dWFsIGNvZGVcbiAgICAgICAgICAvLyB0aGlzIGlzIHB1cmVseSBmb3IgY2xlYW5lciBIVE1MIG91dHB1dFxuICAgICAgICAgIGVuZDogLyB8JC8sXG4gICAgICAgICAgc3RhcnRzOiB7XG4gICAgICAgICAgICBlbmQ6ICckJyxcbiAgICAgICAgICAgIHN1Ykxhbmd1YWdlOiAncHl0aG9uJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdmFyaWFudHM6IFtcbiAgICAgICAgICB7IGJlZ2luOiAvXj4+Pig/PVsgXXwkKS8gfSxcbiAgICAgICAgICB7IGJlZ2luOiAvXlxcLlxcLlxcLig/PVsgXXwkKS8gfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgXVxuICB9O1xufVxuXG5leHBvcnQgeyBweXRob25SZXBsIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJweXRob25SZXBsIiwiaGxqcyIsImFsaWFzZXMiLCJjb250YWlucyIsImNsYXNzTmFtZSIsInN0YXJ0cyIsImVuZCIsInN1Ykxhbmd1YWdlIiwidmFyaWFudHMiLCJiZWdpbiIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/python-repl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/python.js":
/*!**********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/python.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ python)\n/* harmony export */ });\n/*\nLanguage: Python\nDescription: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.\nWebsite: https://www.python.org\nCategory: common\n*/ function python(hljs) {\n    const regex = hljs.regex;\n    const IDENT_RE = /[\\p{XID_Start}_]\\p{XID_Continue}*/u;\n    const RESERVED_WORDS = [\n        \"and\",\n        \"as\",\n        \"assert\",\n        \"async\",\n        \"await\",\n        \"break\",\n        \"case\",\n        \"class\",\n        \"continue\",\n        \"def\",\n        \"del\",\n        \"elif\",\n        \"else\",\n        \"except\",\n        \"finally\",\n        \"for\",\n        \"from\",\n        \"global\",\n        \"if\",\n        \"import\",\n        \"in\",\n        \"is\",\n        \"lambda\",\n        \"match\",\n        \"nonlocal|10\",\n        \"not\",\n        \"or\",\n        \"pass\",\n        \"raise\",\n        \"return\",\n        \"try\",\n        \"while\",\n        \"with\",\n        \"yield\"\n    ];\n    const BUILT_INS = [\n        \"__import__\",\n        \"abs\",\n        \"all\",\n        \"any\",\n        \"ascii\",\n        \"bin\",\n        \"bool\",\n        \"breakpoint\",\n        \"bytearray\",\n        \"bytes\",\n        \"callable\",\n        \"chr\",\n        \"classmethod\",\n        \"compile\",\n        \"complex\",\n        \"delattr\",\n        \"dict\",\n        \"dir\",\n        \"divmod\",\n        \"enumerate\",\n        \"eval\",\n        \"exec\",\n        \"filter\",\n        \"float\",\n        \"format\",\n        \"frozenset\",\n        \"getattr\",\n        \"globals\",\n        \"hasattr\",\n        \"hash\",\n        \"help\",\n        \"hex\",\n        \"id\",\n        \"input\",\n        \"int\",\n        \"isinstance\",\n        \"issubclass\",\n        \"iter\",\n        \"len\",\n        \"list\",\n        \"locals\",\n        \"map\",\n        \"max\",\n        \"memoryview\",\n        \"min\",\n        \"next\",\n        \"object\",\n        \"oct\",\n        \"open\",\n        \"ord\",\n        \"pow\",\n        \"print\",\n        \"property\",\n        \"range\",\n        \"repr\",\n        \"reversed\",\n        \"round\",\n        \"set\",\n        \"setattr\",\n        \"slice\",\n        \"sorted\",\n        \"staticmethod\",\n        \"str\",\n        \"sum\",\n        \"super\",\n        \"tuple\",\n        \"type\",\n        \"vars\",\n        \"zip\"\n    ];\n    const LITERALS = [\n        \"__debug__\",\n        \"Ellipsis\",\n        \"False\",\n        \"None\",\n        \"NotImplemented\",\n        \"True\"\n    ];\n    // https://docs.python.org/3/library/typing.html\n    // TODO: Could these be supplemented by a CamelCase matcher in certain\n    // contexts, leaving these remaining only for relevance hinting?\n    const TYPES = [\n        \"Any\",\n        \"Callable\",\n        \"Coroutine\",\n        \"Dict\",\n        \"List\",\n        \"Literal\",\n        \"Generic\",\n        \"Optional\",\n        \"Sequence\",\n        \"Set\",\n        \"Tuple\",\n        \"Type\",\n        \"Union\"\n    ];\n    const KEYWORDS = {\n        $pattern: /[A-Za-z]\\w+|__\\w+__/,\n        keyword: RESERVED_WORDS,\n        built_in: BUILT_INS,\n        literal: LITERALS,\n        type: TYPES\n    };\n    const PROMPT = {\n        className: \"meta\",\n        begin: /^(>>>|\\.\\.\\.) /\n    };\n    const SUBST = {\n        className: \"subst\",\n        begin: /\\{/,\n        end: /\\}/,\n        keywords: KEYWORDS,\n        illegal: /#/\n    };\n    const LITERAL_BRACKET = {\n        begin: /\\{\\{/,\n        relevance: 0\n    };\n    const STRING = {\n        className: \"string\",\n        contains: [\n            hljs.BACKSLASH_ESCAPE\n        ],\n        variants: [\n            {\n                begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,\n                end: /'''/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    PROMPT\n                ],\n                relevance: 10\n            },\n            {\n                begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/,\n                end: /\"\"\"/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    PROMPT\n                ],\n                relevance: 10\n            },\n            {\n                begin: /([fF][rR]|[rR][fF]|[fF])'''/,\n                end: /'''/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    PROMPT,\n                    LITERAL_BRACKET,\n                    SUBST\n                ]\n            },\n            {\n                begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/,\n                end: /\"\"\"/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    PROMPT,\n                    LITERAL_BRACKET,\n                    SUBST\n                ]\n            },\n            {\n                begin: /([uU]|[rR])'/,\n                end: /'/,\n                relevance: 10\n            },\n            {\n                begin: /([uU]|[rR])\"/,\n                end: /\"/,\n                relevance: 10\n            },\n            {\n                begin: /([bB]|[bB][rR]|[rR][bB])'/,\n                end: /'/\n            },\n            {\n                begin: /([bB]|[bB][rR]|[rR][bB])\"/,\n                end: /\"/\n            },\n            {\n                begin: /([fF][rR]|[rR][fF]|[fF])'/,\n                end: /'/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    LITERAL_BRACKET,\n                    SUBST\n                ]\n            },\n            {\n                begin: /([fF][rR]|[rR][fF]|[fF])\"/,\n                end: /\"/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    LITERAL_BRACKET,\n                    SUBST\n                ]\n            },\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE\n        ]\n    };\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals\n    const digitpart = \"[0-9](_?[0-9])*\";\n    const pointfloat = `(\\\\b(${digitpart}))?\\\\.(${digitpart})|\\\\b(${digitpart})\\\\.`;\n    // Whitespace after a number (or any lexical token) is needed only if its absence\n    // would change the tokenization\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#whitespace-between-tokens\n    // We deviate slightly, requiring a word boundary or a keyword\n    // to avoid accidentally recognizing *prefixes* (e.g., `0` in `0x41` or `08` or `0__1`)\n    const lookahead = `\\\\b|${RESERVED_WORDS.join(\"|\")}`;\n    const NUMBER = {\n        className: \"number\",\n        relevance: 0,\n        variants: [\n            // exponentfloat, pointfloat\n            // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals\n            // optionally imaginary\n            // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n            // Note: no leading \\b because floats can start with a decimal point\n            // and we don't want to mishandle e.g. `fn(.5)`,\n            // no trailing \\b for pointfloat because it can end with a decimal point\n            // and we don't want to mishandle e.g. `0..hex()`; this should be safe\n            // because both MUST contain a decimal point and so cannot be confused with\n            // the interior part of an identifier\n            {\n                begin: `(\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?(?=${lookahead})`\n            },\n            {\n                begin: `(${pointfloat})[jJ]?`\n            },\n            // decinteger, bininteger, octinteger, hexinteger\n            // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals\n            // optionally \"long\" in Python 2\n            // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals\n            // decinteger is optionally imaginary\n            // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n            {\n                begin: `\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${lookahead})`\n            },\n            {\n                begin: `\\\\b0[bB](_?[01])+[lL]?(?=${lookahead})`\n            },\n            {\n                begin: `\\\\b0[oO](_?[0-7])+[lL]?(?=${lookahead})`\n            },\n            {\n                begin: `\\\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${lookahead})`\n            },\n            // imagnumber (digitpart-based)\n            // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n            {\n                begin: `\\\\b(${digitpart})[jJ](?=${lookahead})`\n            }\n        ]\n    };\n    const COMMENT_TYPE = {\n        className: \"comment\",\n        begin: regex.lookahead(/# type:/),\n        end: /$/,\n        keywords: KEYWORDS,\n        contains: [\n            {\n                begin: /# type:/\n            },\n            // comment within a datatype comment includes no keywords\n            {\n                begin: /#/,\n                end: /\\b\\B/,\n                endsWithParent: true\n            }\n        ]\n    };\n    const PARAMS = {\n        className: \"params\",\n        variants: [\n            // Exclude params in functions without params\n            {\n                className: \"\",\n                begin: /\\(\\s*\\)/,\n                skip: true\n            },\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                excludeBegin: true,\n                excludeEnd: true,\n                keywords: KEYWORDS,\n                contains: [\n                    \"self\",\n                    PROMPT,\n                    NUMBER,\n                    STRING,\n                    hljs.HASH_COMMENT_MODE\n                ]\n            }\n        ]\n    };\n    SUBST.contains = [\n        STRING,\n        NUMBER,\n        PROMPT\n    ];\n    return {\n        name: \"Python\",\n        aliases: [\n            \"py\",\n            \"gyp\",\n            \"ipython\"\n        ],\n        unicodeRegex: true,\n        keywords: KEYWORDS,\n        illegal: /(<\\/|\\?)|=>/,\n        contains: [\n            PROMPT,\n            NUMBER,\n            {\n                // very common convention\n                scope: \"variable.language\",\n                match: /\\bself\\b/\n            },\n            {\n                // eat \"if\" prior to string so that it won't accidentally be\n                // labeled as an f-string\n                beginKeywords: \"if\",\n                relevance: 0\n            },\n            {\n                match: /\\bor\\b/,\n                scope: \"keyword\"\n            },\n            STRING,\n            COMMENT_TYPE,\n            hljs.HASH_COMMENT_MODE,\n            {\n                match: [\n                    /\\bdef/,\n                    /\\s+/,\n                    IDENT_RE\n                ],\n                scope: {\n                    1: \"keyword\",\n                    3: \"title.function\"\n                },\n                contains: [\n                    PARAMS\n                ]\n            },\n            {\n                variants: [\n                    {\n                        match: [\n                            /\\bclass/,\n                            /\\s+/,\n                            IDENT_RE,\n                            /\\s*/,\n                            /\\(\\s*/,\n                            IDENT_RE,\n                            /\\s*\\)/\n                        ]\n                    },\n                    {\n                        match: [\n                            /\\bclass/,\n                            /\\s+/,\n                            IDENT_RE\n                        ]\n                    }\n                ],\n                scope: {\n                    1: \"keyword\",\n                    3: \"title.class\",\n                    6: \"title.class.inherited\"\n                }\n            },\n            {\n                className: \"meta\",\n                begin: /^[\\t ]*@/,\n                end: /(?=#)|$/,\n                contains: [\n                    NUMBER,\n                    PARAMS,\n                    STRING\n                ]\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/python.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/r.js":
/*!*****************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/r.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ r)\n/* harmony export */ });\n/*\nLanguage: R\nDescription: R is a free software environment for statistical computing and graphics.\nAuthor: Joe Cheng <joe@rstudio.org>\nContributors: Konrad Rudolph <konrad.rudolph@gmail.com>\nWebsite: https://www.r-project.org\nCategory: common,scientific\n*/ /** @type LanguageFn */ function r(hljs) {\n    const regex = hljs.regex;\n    // Identifiers in R cannot start with `_`, but they can start with `.` if it\n    // is not immediately followed by a digit.\n    // R also supports quoted identifiers, which are near-arbitrary sequences\n    // delimited by backticks (`…`), which may contain escape sequences. These are\n    // handled in a separate mode. See `test/markup/r/names.txt` for examples.\n    // FIXME: Support Unicode identifiers.\n    const IDENT_RE = /(?:(?:[a-zA-Z]|\\.[._a-zA-Z])[._a-zA-Z0-9]*)|\\.(?!\\d)/;\n    const NUMBER_TYPES_RE = regex.either(// Special case: only hexadecimal binary powers can contain fractions\n    /0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/, // Hexadecimal numbers without fraction and optional binary power\n    /0[xX][0-9a-fA-F]+(?:[pP][+-]?\\d+)?[Li]?/, // Decimal numbers\n    /(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?[Li]?/);\n    const OPERATORS_RE = /[=!<>:]=|\\|\\||&&|:::?|<-|<<-|->>|->|\\|>|[-+*\\/?!$&|:<=>@^~]|\\*\\*/;\n    const PUNCTUATION_RE = regex.either(/[()]/, /[{}]/, /\\[\\[/, /[[\\]]/, /\\\\/, /,/);\n    return {\n        name: \"R\",\n        keywords: {\n            $pattern: IDENT_RE,\n            keyword: \"function if in break next repeat else for while\",\n            literal: \"NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 \" + \"NA_character_|10 NA_complex_|10\",\n            built_in: // Builtin constants\n            \"LETTERS letters month.abb month.name pi T F \" + \"abs acos acosh all any anyNA Arg as.call as.character \" + \"as.complex as.double as.environment as.integer as.logical \" + \"as.null.default as.numeric as.raw asin asinh atan atanh attr \" + \"attributes baseenv browser c call ceiling class Conj cos cosh \" + \"cospi cummax cummin cumprod cumsum digamma dim dimnames \" + \"emptyenv exp expression floor forceAndCall gamma gc.time \" + \"globalenv Im interactive invisible is.array is.atomic is.call \" + \"is.character is.complex is.double is.environment is.expression \" + \"is.finite is.function is.infinite is.integer is.language \" + \"is.list is.logical is.matrix is.na is.name is.nan is.null \" + \"is.numeric is.object is.pairlist is.raw is.recursive is.single \" + \"is.symbol lazyLoadDBfetch length lgamma list log max min \" + \"missing Mod names nargs nzchar oldClass on.exit pos.to.env \" + \"proc.time prod quote range Re rep retracemem return round \" + \"seq_along seq_len seq.int sign signif sin sinh sinpi sqrt \" + \"standardGeneric substitute sum switch tan tanh tanpi tracemem \" + \"trigamma trunc unclass untracemem UseMethod xtfrm\"\n        },\n        contains: [\n            // Roxygen comments\n            hljs.COMMENT(/#'/, /$/, {\n                contains: [\n                    {\n                        // Handle `@examples` separately to cause all subsequent code\n                        // until the next `@`-tag on its own line to be kept as-is,\n                        // preventing highlighting. This code is example R code, so nested\n                        // doctags shouldn’t be treated as such. See\n                        // `test/markup/r/roxygen.txt` for an example.\n                        scope: \"doctag\",\n                        match: /@examples/,\n                        starts: {\n                            end: regex.lookahead(regex.either(// end if another doc comment\n                            /\\n^#'\\s*(?=@[a-zA-Z]+)/, // or a line with no comment\n                            /\\n^(?!#')/)),\n                            endsParent: true\n                        }\n                    },\n                    {\n                        // Handle `@param` to highlight the parameter name following\n                        // after.\n                        scope: \"doctag\",\n                        begin: \"@param\",\n                        end: /$/,\n                        contains: [\n                            {\n                                scope: \"variable\",\n                                variants: [\n                                    {\n                                        match: IDENT_RE\n                                    },\n                                    {\n                                        match: /`(?:\\\\.|[^`\\\\])+`/\n                                    }\n                                ],\n                                endsParent: true\n                            }\n                        ]\n                    },\n                    {\n                        scope: \"doctag\",\n                        match: /@[a-zA-Z]+/\n                    },\n                    {\n                        scope: \"keyword\",\n                        match: /\\\\[a-zA-Z]+/\n                    }\n                ]\n            }),\n            hljs.HASH_COMMENT_MODE,\n            {\n                scope: \"string\",\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ],\n                variants: [\n                    hljs.END_SAME_AS_BEGIN({\n                        begin: /[rR]\"(-*)\\(/,\n                        end: /\\)(-*)\"/\n                    }),\n                    hljs.END_SAME_AS_BEGIN({\n                        begin: /[rR]\"(-*)\\{/,\n                        end: /\\}(-*)\"/\n                    }),\n                    hljs.END_SAME_AS_BEGIN({\n                        begin: /[rR]\"(-*)\\[/,\n                        end: /\\](-*)\"/\n                    }),\n                    hljs.END_SAME_AS_BEGIN({\n                        begin: /[rR]'(-*)\\(/,\n                        end: /\\)(-*)'/\n                    }),\n                    hljs.END_SAME_AS_BEGIN({\n                        begin: /[rR]'(-*)\\{/,\n                        end: /\\}(-*)'/\n                    }),\n                    hljs.END_SAME_AS_BEGIN({\n                        begin: /[rR]'(-*)\\[/,\n                        end: /\\](-*)'/\n                    }),\n                    {\n                        begin: '\"',\n                        end: '\"',\n                        relevance: 0\n                    },\n                    {\n                        begin: \"'\",\n                        end: \"'\",\n                        relevance: 0\n                    }\n                ]\n            },\n            // Matching numbers immediately following punctuation and operators is\n            // tricky since we need to look at the character ahead of a number to\n            // ensure the number is not part of an identifier, and we cannot use\n            // negative look-behind assertions. So instead we explicitly handle all\n            // possible combinations of (operator|punctuation), number.\n            // TODO: replace with negative look-behind when available\n            // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/ },\n            // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?/ },\n            // { begin: /(?<![a-zA-Z0-9._])(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?/ }\n            {\n                relevance: 0,\n                variants: [\n                    {\n                        scope: {\n                            1: \"operator\",\n                            2: \"number\"\n                        },\n                        match: [\n                            OPERATORS_RE,\n                            NUMBER_TYPES_RE\n                        ]\n                    },\n                    {\n                        scope: {\n                            1: \"operator\",\n                            2: \"number\"\n                        },\n                        match: [\n                            /%[^%]*%/,\n                            NUMBER_TYPES_RE\n                        ]\n                    },\n                    {\n                        scope: {\n                            1: \"punctuation\",\n                            2: \"number\"\n                        },\n                        match: [\n                            PUNCTUATION_RE,\n                            NUMBER_TYPES_RE\n                        ]\n                    },\n                    {\n                        scope: {\n                            2: \"number\"\n                        },\n                        match: [\n                            /[^a-zA-Z0-9._]|^/,\n                            NUMBER_TYPES_RE\n                        ]\n                    }\n                ]\n            },\n            // Operators/punctuation when they're not directly followed by numbers\n            {\n                // Relevance boost for the most common assignment form.\n                scope: {\n                    3: \"operator\"\n                },\n                match: [\n                    IDENT_RE,\n                    /\\s+/,\n                    /<-/,\n                    /\\s+/\n                ]\n            },\n            {\n                scope: \"operator\",\n                relevance: 0,\n                variants: [\n                    {\n                        match: OPERATORS_RE\n                    },\n                    {\n                        match: /%[^%]*%/\n                    }\n                ]\n            },\n            {\n                scope: \"punctuation\",\n                relevance: 0,\n                match: PUNCTUATION_RE\n            },\n            {\n                // Escaped identifier\n                begin: \"`\",\n                end: \"`\",\n                contains: [\n                    {\n                        begin: /\\\\./\n                    }\n                ]\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/r.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/ruby.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/ruby.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ruby)\n/* harmony export */ });\n/*\nLanguage: Ruby\nDescription: Ruby is a dynamic, open source programming language with a focus on simplicity and productivity.\nWebsite: https://www.ruby-lang.org/\nAuthor: Anton Kovalyov <anton@kovalyov.net>\nContributors: Peter Leonov <gojpeg@yandex.ru>, Vasily Polovnyov <vast@whiteants.net>, Loren Segal <lsegal@soen.ca>, Pascal Hurni <phi@ruby-reactive.org>, Cedric Sohrauer <sohrauer@googlemail.com>\nCategory: common, scripting\n*/ function ruby(hljs) {\n    const regex = hljs.regex;\n    const RUBY_METHOD_RE = \"([a-zA-Z_]\\\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\\\*\\\\*|[-/+%^&*~`|]|\\\\[\\\\]=?)\";\n    // TODO: move concepts like CAMEL_CASE into `modes.js`\n    const CLASS_NAME_RE = regex.either(/\\b([A-Z]+[a-z0-9]+)+/, // ends in caps\n    /\\b([A-Z]+[a-z0-9]+)+[A-Z]+/);\n    const CLASS_NAME_WITH_NAMESPACE_RE = regex.concat(CLASS_NAME_RE, /(::\\w+)*/);\n    // very popular ruby built-ins that one might even assume\n    // are actual keywords (despite that not being the case)\n    const PSEUDO_KWS = [\n        \"include\",\n        \"extend\",\n        \"prepend\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"raise\",\n        \"throw\"\n    ];\n    const RUBY_KEYWORDS = {\n        \"variable.constant\": [\n            \"__FILE__\",\n            \"__LINE__\",\n            \"__ENCODING__\"\n        ],\n        \"variable.language\": [\n            \"self\",\n            \"super\"\n        ],\n        keyword: [\n            \"alias\",\n            \"and\",\n            \"begin\",\n            \"BEGIN\",\n            \"break\",\n            \"case\",\n            \"class\",\n            \"defined\",\n            \"do\",\n            \"else\",\n            \"elsif\",\n            \"end\",\n            \"END\",\n            \"ensure\",\n            \"for\",\n            \"if\",\n            \"in\",\n            \"module\",\n            \"next\",\n            \"not\",\n            \"or\",\n            \"redo\",\n            \"require\",\n            \"rescue\",\n            \"retry\",\n            \"return\",\n            \"then\",\n            \"undef\",\n            \"unless\",\n            \"until\",\n            \"when\",\n            \"while\",\n            \"yield\",\n            ...PSEUDO_KWS\n        ],\n        built_in: [\n            \"proc\",\n            \"lambda\",\n            \"attr_accessor\",\n            \"attr_reader\",\n            \"attr_writer\",\n            \"define_method\",\n            \"private_constant\",\n            \"module_function\"\n        ],\n        literal: [\n            \"true\",\n            \"false\",\n            \"nil\"\n        ]\n    };\n    const YARDOCTAG = {\n        className: \"doctag\",\n        begin: \"@[A-Za-z]+\"\n    };\n    const IRB_OBJECT = {\n        begin: \"#<\",\n        end: \">\"\n    };\n    const COMMENT_MODES = [\n        hljs.COMMENT(\"#\", \"$\", {\n            contains: [\n                YARDOCTAG\n            ]\n        }),\n        hljs.COMMENT(\"^=begin\", \"^=end\", {\n            contains: [\n                YARDOCTAG\n            ],\n            relevance: 10\n        }),\n        hljs.COMMENT(\"^__END__\", hljs.MATCH_NOTHING_RE)\n    ];\n    const SUBST = {\n        className: \"subst\",\n        begin: /#\\{/,\n        end: /\\}/,\n        keywords: RUBY_KEYWORDS\n    };\n    const STRING = {\n        className: \"string\",\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            SUBST\n        ],\n        variants: [\n            {\n                begin: /'/,\n                end: /'/\n            },\n            {\n                begin: /\"/,\n                end: /\"/\n            },\n            {\n                begin: /`/,\n                end: /`/\n            },\n            {\n                begin: /%[qQwWx]?\\(/,\n                end: /\\)/\n            },\n            {\n                begin: /%[qQwWx]?\\[/,\n                end: /\\]/\n            },\n            {\n                begin: /%[qQwWx]?\\{/,\n                end: /\\}/\n            },\n            {\n                begin: /%[qQwWx]?</,\n                end: />/\n            },\n            {\n                begin: /%[qQwWx]?\\//,\n                end: /\\//\n            },\n            {\n                begin: /%[qQwWx]?%/,\n                end: /%/\n            },\n            {\n                begin: /%[qQwWx]?-/,\n                end: /-/\n            },\n            {\n                begin: /%[qQwWx]?\\|/,\n                end: /\\|/\n            },\n            // in the following expressions, \\B in the beginning suppresses recognition of ?-sequences\n            // where ? is the last character of a preceding identifier, as in: `func?4`\n            {\n                begin: /\\B\\?(\\\\\\d{1,3})/\n            },\n            {\n                begin: /\\B\\?(\\\\x[A-Fa-f0-9]{1,2})/\n            },\n            {\n                begin: /\\B\\?(\\\\u\\{?[A-Fa-f0-9]{1,6}\\}?)/\n            },\n            {\n                begin: /\\B\\?(\\\\M-\\\\C-|\\\\M-\\\\c|\\\\c\\\\M-|\\\\M-|\\\\C-\\\\M-)[\\x20-\\x7e]/\n            },\n            {\n                begin: /\\B\\?\\\\(c|C-)[\\x20-\\x7e]/\n            },\n            {\n                begin: /\\B\\?\\\\?\\S/\n            },\n            // heredocs\n            {\n                // this guard makes sure that we have an entire heredoc and not a false\n                // positive (auto-detect, etc.)\n                begin: regex.concat(/<<[-~]?'?/, regex.lookahead(/(\\w+)(?=\\W)[^\\n]*\\n(?:[^\\n]*\\n)*?\\s*\\1\\b/)),\n                contains: [\n                    hljs.END_SAME_AS_BEGIN({\n                        begin: /(\\w+)/,\n                        end: /(\\w+)/,\n                        contains: [\n                            hljs.BACKSLASH_ESCAPE,\n                            SUBST\n                        ]\n                    })\n                ]\n            }\n        ]\n    };\n    // Ruby syntax is underdocumented, but this grammar seems to be accurate\n    // as of version 2.7.2 (confirmed with (irb and `Ripper.sexp(...)`)\n    // https://docs.ruby-lang.org/en/2.7.0/doc/syntax/literals_rdoc.html#label-Numbers\n    const decimal = \"[1-9](_?[0-9])*|0\";\n    const digits = \"[0-9](_?[0-9])*\";\n    const NUMBER = {\n        className: \"number\",\n        relevance: 0,\n        variants: [\n            // decimal integer/float, optionally exponential or rational, optionally imaginary\n            {\n                begin: `\\\\b(${decimal})(\\\\.(${digits}))?([eE][+-]?(${digits})|r)?i?\\\\b`\n            },\n            // explicit decimal/binary/octal/hexadecimal integer,\n            // optionally rational and/or imaginary\n            {\n                begin: \"\\\\b0[dD][0-9](_?[0-9])*r?i?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[bB][0-1](_?[0-1])*r?i?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[oO][0-7](_?[0-7])*r?i?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\\\b\"\n            },\n            // 0-prefixed implicit octal integer, optionally rational and/or imaginary\n            {\n                begin: \"\\\\b0(_?[0-7])+r?i?\\\\b\"\n            }\n        ]\n    };\n    const PARAMS = {\n        variants: [\n            {\n                match: /\\(\\)/\n            },\n            {\n                className: \"params\",\n                begin: /\\(/,\n                end: /(?=\\))/,\n                excludeBegin: true,\n                endsParent: true,\n                keywords: RUBY_KEYWORDS\n            }\n        ]\n    };\n    const INCLUDE_EXTEND = {\n        match: [\n            /(include|extend)\\s+/,\n            CLASS_NAME_WITH_NAMESPACE_RE\n        ],\n        scope: {\n            2: \"title.class\"\n        },\n        keywords: RUBY_KEYWORDS\n    };\n    const CLASS_DEFINITION = {\n        variants: [\n            {\n                match: [\n                    /class\\s+/,\n                    CLASS_NAME_WITH_NAMESPACE_RE,\n                    /\\s+<\\s+/,\n                    CLASS_NAME_WITH_NAMESPACE_RE\n                ]\n            },\n            {\n                match: [\n                    /\\b(class|module)\\s+/,\n                    CLASS_NAME_WITH_NAMESPACE_RE\n                ]\n            }\n        ],\n        scope: {\n            2: \"title.class\",\n            4: \"title.class.inherited\"\n        },\n        keywords: RUBY_KEYWORDS\n    };\n    const UPPER_CASE_CONSTANT = {\n        relevance: 0,\n        match: /\\b[A-Z][A-Z_0-9]+\\b/,\n        className: \"variable.constant\"\n    };\n    const METHOD_DEFINITION = {\n        match: [\n            /def/,\n            /\\s+/,\n            RUBY_METHOD_RE\n        ],\n        scope: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        contains: [\n            PARAMS\n        ]\n    };\n    const OBJECT_CREATION = {\n        relevance: 0,\n        match: [\n            CLASS_NAME_WITH_NAMESPACE_RE,\n            /\\.new[. (]/\n        ],\n        scope: {\n            1: \"title.class\"\n        }\n    };\n    // CamelCase\n    const CLASS_REFERENCE = {\n        relevance: 0,\n        match: CLASS_NAME_RE,\n        scope: \"title.class\"\n    };\n    const RUBY_DEFAULT_CONTAINS = [\n        STRING,\n        CLASS_DEFINITION,\n        INCLUDE_EXTEND,\n        OBJECT_CREATION,\n        UPPER_CASE_CONSTANT,\n        CLASS_REFERENCE,\n        METHOD_DEFINITION,\n        {\n            // swallow namespace qualifiers before symbols\n            begin: hljs.IDENT_RE + \"::\"\n        },\n        {\n            className: \"symbol\",\n            begin: hljs.UNDERSCORE_IDENT_RE + \"(!|\\\\?)?:\",\n            relevance: 0\n        },\n        {\n            className: \"symbol\",\n            begin: \":(?!\\\\s)\",\n            contains: [\n                STRING,\n                {\n                    begin: RUBY_METHOD_RE\n                }\n            ],\n            relevance: 0\n        },\n        NUMBER,\n        {\n            // negative-look forward attempts to prevent false matches like:\n            // @ident@ or $ident$ that might indicate this is not ruby at all\n            className: \"variable\",\n            begin: \"(\\\\$\\\\W)|((\\\\$|@@?)(\\\\w+))(?=[^@$?])\" + `(?![A-Za-z])(?![@$?'])`\n        },\n        {\n            className: \"params\",\n            begin: /\\|(?!=)/,\n            end: /\\|/,\n            excludeBegin: true,\n            excludeEnd: true,\n            relevance: 0,\n            keywords: RUBY_KEYWORDS\n        },\n        {\n            begin: \"(\" + hljs.RE_STARTERS_RE + \"|unless)\\\\s*\",\n            keywords: \"unless\",\n            contains: [\n                {\n                    className: \"regexp\",\n                    contains: [\n                        hljs.BACKSLASH_ESCAPE,\n                        SUBST\n                    ],\n                    illegal: /\\n/,\n                    variants: [\n                        {\n                            begin: \"/\",\n                            end: \"/[a-z]*\"\n                        },\n                        {\n                            begin: /%r\\{/,\n                            end: /\\}[a-z]*/\n                        },\n                        {\n                            begin: \"%r\\\\(\",\n                            end: \"\\\\)[a-z]*\"\n                        },\n                        {\n                            begin: \"%r!\",\n                            end: \"![a-z]*\"\n                        },\n                        {\n                            begin: \"%r\\\\[\",\n                            end: \"\\\\][a-z]*\"\n                        }\n                    ]\n                }\n            ].concat(IRB_OBJECT, COMMENT_MODES),\n            relevance: 0\n        }\n    ].concat(IRB_OBJECT, COMMENT_MODES);\n    SUBST.contains = RUBY_DEFAULT_CONTAINS;\n    PARAMS.contains = RUBY_DEFAULT_CONTAINS;\n    // >>\n    // ?>\n    const SIMPLE_PROMPT = \"[>?]>\";\n    // irb(main):001:0>\n    const DEFAULT_PROMPT = \"[\\\\w#]+\\\\(\\\\w+\\\\):\\\\d+:\\\\d+[>*]\";\n    const RVM_PROMPT = \"(\\\\w+-)?\\\\d+\\\\.\\\\d+\\\\.\\\\d+(p\\\\d+)?[^\\\\d][^>]+>\";\n    const IRB_DEFAULT = [\n        {\n            begin: /^\\s*=>/,\n            starts: {\n                end: \"$\",\n                contains: RUBY_DEFAULT_CONTAINS\n            }\n        },\n        {\n            className: \"meta.prompt\",\n            begin: \"^(\" + SIMPLE_PROMPT + \"|\" + DEFAULT_PROMPT + \"|\" + RVM_PROMPT + \")(?=[ ])\",\n            starts: {\n                end: \"$\",\n                keywords: RUBY_KEYWORDS,\n                contains: RUBY_DEFAULT_CONTAINS\n            }\n        }\n    ];\n    COMMENT_MODES.unshift(IRB_OBJECT);\n    return {\n        name: \"Ruby\",\n        aliases: [\n            \"rb\",\n            \"gemspec\",\n            \"podspec\",\n            \"thor\",\n            \"irb\"\n        ],\n        keywords: RUBY_KEYWORDS,\n        illegal: /\\/\\*/,\n        contains: [\n            hljs.SHEBANG({\n                binary: \"ruby\"\n            })\n        ].concat(IRB_DEFAULT).concat(COMMENT_MODES).concat(RUBY_DEFAULT_CONTAINS)\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/ruby.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/rust.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/rust.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rust)\n/* harmony export */ });\n/*\nLanguage: Rust\nAuthor: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>\nContributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>\nWebsite: https://www.rust-lang.org\nCategory: common, system\n*/ /** @type LanguageFn */ function rust(hljs) {\n    const regex = hljs.regex;\n    // ============================================\n    // Added to support the r# keyword, which is a raw identifier in Rust.\n    const RAW_IDENTIFIER = /(r#)?/;\n    const UNDERSCORE_IDENT_RE = regex.concat(RAW_IDENTIFIER, hljs.UNDERSCORE_IDENT_RE);\n    const IDENT_RE = regex.concat(RAW_IDENTIFIER, hljs.IDENT_RE);\n    // ============================================\n    const FUNCTION_INVOKE = {\n        className: \"title.function.invoke\",\n        relevance: 0,\n        begin: regex.concat(/\\b/, /(?!let|for|while|if|else|match\\b)/, IDENT_RE, regex.lookahead(/\\s*\\(/))\n    };\n    const NUMBER_SUFFIX = \"([ui](8|16|32|64|128|size)|f(32|64))?\";\n    const KEYWORDS = [\n        \"abstract\",\n        \"as\",\n        \"async\",\n        \"await\",\n        \"become\",\n        \"box\",\n        \"break\",\n        \"const\",\n        \"continue\",\n        \"crate\",\n        \"do\",\n        \"dyn\",\n        \"else\",\n        \"enum\",\n        \"extern\",\n        \"false\",\n        \"final\",\n        \"fn\",\n        \"for\",\n        \"if\",\n        \"impl\",\n        \"in\",\n        \"let\",\n        \"loop\",\n        \"macro\",\n        \"match\",\n        \"mod\",\n        \"move\",\n        \"mut\",\n        \"override\",\n        \"priv\",\n        \"pub\",\n        \"ref\",\n        \"return\",\n        \"self\",\n        \"Self\",\n        \"static\",\n        \"struct\",\n        \"super\",\n        \"trait\",\n        \"true\",\n        \"try\",\n        \"type\",\n        \"typeof\",\n        \"union\",\n        \"unsafe\",\n        \"unsized\",\n        \"use\",\n        \"virtual\",\n        \"where\",\n        \"while\",\n        \"yield\"\n    ];\n    const LITERALS = [\n        \"true\",\n        \"false\",\n        \"Some\",\n        \"None\",\n        \"Ok\",\n        \"Err\"\n    ];\n    const BUILTINS = [\n        // functions\n        \"drop \",\n        // traits\n        \"Copy\",\n        \"Send\",\n        \"Sized\",\n        \"Sync\",\n        \"Drop\",\n        \"Fn\",\n        \"FnMut\",\n        \"FnOnce\",\n        \"ToOwned\",\n        \"Clone\",\n        \"Debug\",\n        \"PartialEq\",\n        \"PartialOrd\",\n        \"Eq\",\n        \"Ord\",\n        \"AsRef\",\n        \"AsMut\",\n        \"Into\",\n        \"From\",\n        \"Default\",\n        \"Iterator\",\n        \"Extend\",\n        \"IntoIterator\",\n        \"DoubleEndedIterator\",\n        \"ExactSizeIterator\",\n        \"SliceConcatExt\",\n        \"ToString\",\n        // macros\n        \"assert!\",\n        \"assert_eq!\",\n        \"bitflags!\",\n        \"bytes!\",\n        \"cfg!\",\n        \"col!\",\n        \"concat!\",\n        \"concat_idents!\",\n        \"debug_assert!\",\n        \"debug_assert_eq!\",\n        \"env!\",\n        \"eprintln!\",\n        \"panic!\",\n        \"file!\",\n        \"format!\",\n        \"format_args!\",\n        \"include_bytes!\",\n        \"include_str!\",\n        \"line!\",\n        \"local_data_key!\",\n        \"module_path!\",\n        \"option_env!\",\n        \"print!\",\n        \"println!\",\n        \"select!\",\n        \"stringify!\",\n        \"try!\",\n        \"unimplemented!\",\n        \"unreachable!\",\n        \"vec!\",\n        \"write!\",\n        \"writeln!\",\n        \"macro_rules!\",\n        \"assert_ne!\",\n        \"debug_assert_ne!\"\n    ];\n    const TYPES = [\n        \"i8\",\n        \"i16\",\n        \"i32\",\n        \"i64\",\n        \"i128\",\n        \"isize\",\n        \"u8\",\n        \"u16\",\n        \"u32\",\n        \"u64\",\n        \"u128\",\n        \"usize\",\n        \"f32\",\n        \"f64\",\n        \"str\",\n        \"char\",\n        \"bool\",\n        \"Box\",\n        \"Option\",\n        \"Result\",\n        \"String\",\n        \"Vec\"\n    ];\n    return {\n        name: \"Rust\",\n        aliases: [\n            \"rs\"\n        ],\n        keywords: {\n            $pattern: hljs.IDENT_RE + \"!?\",\n            type: TYPES,\n            keyword: KEYWORDS,\n            literal: LITERALS,\n            built_in: BUILTINS\n        },\n        illegal: \"</\",\n        contains: [\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.COMMENT(\"/\\\\*\", \"\\\\*/\", {\n                contains: [\n                    \"self\"\n                ]\n            }),\n            hljs.inherit(hljs.QUOTE_STRING_MODE, {\n                begin: /b?\"/,\n                illegal: null\n            }),\n            {\n                className: \"symbol\",\n                // negative lookahead to avoid matching `'`\n                begin: /'[a-zA-Z_][a-zA-Z0-9_]*(?!')/\n            },\n            {\n                scope: \"string\",\n                variants: [\n                    {\n                        begin: /b?r(#*)\"(.|\\n)*?\"\\1(?!#)/\n                    },\n                    {\n                        begin: /b?'/,\n                        end: /'/,\n                        contains: [\n                            {\n                                scope: \"char.escape\",\n                                match: /\\\\('|\\w|x\\w{2}|u\\w{4}|U\\w{8})/\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                className: \"number\",\n                variants: [\n                    {\n                        begin: \"\\\\b0b([01_]+)\" + NUMBER_SUFFIX\n                    },\n                    {\n                        begin: \"\\\\b0o([0-7_]+)\" + NUMBER_SUFFIX\n                    },\n                    {\n                        begin: \"\\\\b0x([A-Fa-f0-9_]+)\" + NUMBER_SUFFIX\n                    },\n                    {\n                        begin: \"\\\\b(\\\\d[\\\\d_]*(\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)\" + NUMBER_SUFFIX\n                    }\n                ],\n                relevance: 0\n            },\n            {\n                begin: [\n                    /fn/,\n                    /\\s+/,\n                    UNDERSCORE_IDENT_RE\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"title.function\"\n                }\n            },\n            {\n                className: \"meta\",\n                begin: \"#!?\\\\[\",\n                end: \"\\\\]\",\n                contains: [\n                    {\n                        className: \"string\",\n                        begin: /\"/,\n                        end: /\"/,\n                        contains: [\n                            hljs.BACKSLASH_ESCAPE\n                        ]\n                    }\n                ]\n            },\n            {\n                begin: [\n                    /let/,\n                    /\\s+/,\n                    /(?:mut\\s+)?/,\n                    UNDERSCORE_IDENT_RE\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"keyword\",\n                    4: \"variable\"\n                }\n            },\n            // must come before impl/for rule later\n            {\n                begin: [\n                    /for/,\n                    /\\s+/,\n                    UNDERSCORE_IDENT_RE,\n                    /\\s+/,\n                    /in/\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"variable\",\n                    5: \"keyword\"\n                }\n            },\n            {\n                begin: [\n                    /type/,\n                    /\\s+/,\n                    UNDERSCORE_IDENT_RE\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                }\n            },\n            {\n                begin: [\n                    /(?:trait|enum|struct|union|impl|for)/,\n                    /\\s+/,\n                    UNDERSCORE_IDENT_RE\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                }\n            },\n            {\n                begin: hljs.IDENT_RE + \"::\",\n                keywords: {\n                    keyword: \"Self\",\n                    built_in: BUILTINS,\n                    type: TYPES\n                }\n            },\n            {\n                className: \"punctuation\",\n                begin: \"->\"\n            },\n            FUNCTION_INVOKE\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/rust.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/scss.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/scss.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ scss)\n/* harmony export */ });\nconst MODES = (hljs)=>{\n    return {\n        IMPORTANT: {\n            scope: \"meta\",\n            begin: \"!important\"\n        },\n        BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,\n        HEXCOLOR: {\n            scope: \"number\",\n            begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\\b/\n        },\n        FUNCTION_DISPATCH: {\n            className: \"built_in\",\n            begin: /[\\w-]+(?=\\()/\n        },\n        ATTRIBUTE_SELECTOR_MODE: {\n            scope: \"selector-attr\",\n            begin: /\\[/,\n            end: /\\]/,\n            illegal: \"$\",\n            contains: [\n                hljs.APOS_STRING_MODE,\n                hljs.QUOTE_STRING_MODE\n            ]\n        },\n        CSS_NUMBER_MODE: {\n            scope: \"number\",\n            begin: hljs.NUMBER_RE + \"(\" + \"%|em|ex|ch|rem\" + \"|vw|vh|vmin|vmax\" + \"|cm|mm|in|pt|pc|px\" + \"|deg|grad|rad|turn\" + \"|s|ms\" + \"|Hz|kHz\" + \"|dpi|dpcm|dppx\" + \")?\",\n            relevance: 0\n        },\n        CSS_VARIABLE: {\n            className: \"attr\",\n            begin: /--[A-Za-z_][A-Za-z0-9_-]*/\n        }\n    };\n};\nconst HTML_TAGS = [\n    \"a\",\n    \"abbr\",\n    \"address\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"b\",\n    \"blockquote\",\n    \"body\",\n    \"button\",\n    \"canvas\",\n    \"caption\",\n    \"cite\",\n    \"code\",\n    \"dd\",\n    \"del\",\n    \"details\",\n    \"dfn\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"em\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"header\",\n    \"hgroup\",\n    \"html\",\n    \"i\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"main\",\n    \"mark\",\n    \"menu\",\n    \"nav\",\n    \"object\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"p\",\n    \"picture\",\n    \"q\",\n    \"quote\",\n    \"samp\",\n    \"section\",\n    \"select\",\n    \"source\",\n    \"span\",\n    \"strong\",\n    \"summary\",\n    \"sup\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"time\",\n    \"tr\",\n    \"ul\",\n    \"var\",\n    \"video\"\n];\nconst SVG_TAGS = [\n    \"defs\",\n    \"g\",\n    \"marker\",\n    \"mask\",\n    \"pattern\",\n    \"svg\",\n    \"switch\",\n    \"symbol\",\n    \"feBlend\",\n    \"feColorMatrix\",\n    \"feComponentTransfer\",\n    \"feComposite\",\n    \"feConvolveMatrix\",\n    \"feDiffuseLighting\",\n    \"feDisplacementMap\",\n    \"feFlood\",\n    \"feGaussianBlur\",\n    \"feImage\",\n    \"feMerge\",\n    \"feMorphology\",\n    \"feOffset\",\n    \"feSpecularLighting\",\n    \"feTile\",\n    \"feTurbulence\",\n    \"linearGradient\",\n    \"radialGradient\",\n    \"stop\",\n    \"circle\",\n    \"ellipse\",\n    \"image\",\n    \"line\",\n    \"path\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"text\",\n    \"use\",\n    \"textPath\",\n    \"tspan\",\n    \"foreignObject\",\n    \"clipPath\"\n];\nconst TAGS = [\n    ...HTML_TAGS,\n    ...SVG_TAGS\n];\n// Sorting, then reversing makes sure longer attributes/elements like\n// `font-weight` are matched fully instead of getting false positives on say `font`\nconst MEDIA_FEATURES = [\n    \"any-hover\",\n    \"any-pointer\",\n    \"aspect-ratio\",\n    \"color\",\n    \"color-gamut\",\n    \"color-index\",\n    \"device-aspect-ratio\",\n    \"device-height\",\n    \"device-width\",\n    \"display-mode\",\n    \"forced-colors\",\n    \"grid\",\n    \"height\",\n    \"hover\",\n    \"inverted-colors\",\n    \"monochrome\",\n    \"orientation\",\n    \"overflow-block\",\n    \"overflow-inline\",\n    \"pointer\",\n    \"prefers-color-scheme\",\n    \"prefers-contrast\",\n    \"prefers-reduced-motion\",\n    \"prefers-reduced-transparency\",\n    \"resolution\",\n    \"scan\",\n    \"scripting\",\n    \"update\",\n    \"width\",\n    // TODO: find a better solution?\n    \"min-width\",\n    \"max-width\",\n    \"min-height\",\n    \"max-height\"\n].sort().reverse();\n// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\nconst PSEUDO_CLASSES = [\n    \"active\",\n    \"any-link\",\n    \"blank\",\n    \"checked\",\n    \"current\",\n    \"default\",\n    \"defined\",\n    \"dir\",\n    \"disabled\",\n    \"drop\",\n    \"empty\",\n    \"enabled\",\n    \"first\",\n    \"first-child\",\n    \"first-of-type\",\n    \"fullscreen\",\n    \"future\",\n    \"focus\",\n    \"focus-visible\",\n    \"focus-within\",\n    \"has\",\n    \"host\",\n    \"host-context\",\n    \"hover\",\n    \"indeterminate\",\n    \"in-range\",\n    \"invalid\",\n    \"is\",\n    \"lang\",\n    \"last-child\",\n    \"last-of-type\",\n    \"left\",\n    \"link\",\n    \"local-link\",\n    \"not\",\n    \"nth-child\",\n    \"nth-col\",\n    \"nth-last-child\",\n    \"nth-last-col\",\n    \"nth-last-of-type\",\n    \"nth-of-type\",\n    \"only-child\",\n    \"only-of-type\",\n    \"optional\",\n    \"out-of-range\",\n    \"past\",\n    \"placeholder-shown\",\n    \"read-only\",\n    \"read-write\",\n    \"required\",\n    \"right\",\n    \"root\",\n    \"scope\",\n    \"target\",\n    \"target-within\",\n    \"user-invalid\",\n    \"valid\",\n    \"visited\",\n    \"where\" // where()\n].sort().reverse();\n// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements\nconst PSEUDO_ELEMENTS = [\n    \"after\",\n    \"backdrop\",\n    \"before\",\n    \"cue\",\n    \"cue-region\",\n    \"first-letter\",\n    \"first-line\",\n    \"grammar-error\",\n    \"marker\",\n    \"part\",\n    \"placeholder\",\n    \"selection\",\n    \"slotted\",\n    \"spelling-error\"\n].sort().reverse();\nconst ATTRIBUTES = [\n    \"accent-color\",\n    \"align-content\",\n    \"align-items\",\n    \"align-self\",\n    \"alignment-baseline\",\n    \"all\",\n    \"anchor-name\",\n    \"animation\",\n    \"animation-composition\",\n    \"animation-delay\",\n    \"animation-direction\",\n    \"animation-duration\",\n    \"animation-fill-mode\",\n    \"animation-iteration-count\",\n    \"animation-name\",\n    \"animation-play-state\",\n    \"animation-range\",\n    \"animation-range-end\",\n    \"animation-range-start\",\n    \"animation-timeline\",\n    \"animation-timing-function\",\n    \"appearance\",\n    \"aspect-ratio\",\n    \"backdrop-filter\",\n    \"backface-visibility\",\n    \"background\",\n    \"background-attachment\",\n    \"background-blend-mode\",\n    \"background-clip\",\n    \"background-color\",\n    \"background-image\",\n    \"background-origin\",\n    \"background-position\",\n    \"background-position-x\",\n    \"background-position-y\",\n    \"background-repeat\",\n    \"background-size\",\n    \"baseline-shift\",\n    \"block-size\",\n    \"border\",\n    \"border-block\",\n    \"border-block-color\",\n    \"border-block-end\",\n    \"border-block-end-color\",\n    \"border-block-end-style\",\n    \"border-block-end-width\",\n    \"border-block-start\",\n    \"border-block-start-color\",\n    \"border-block-start-style\",\n    \"border-block-start-width\",\n    \"border-block-style\",\n    \"border-block-width\",\n    \"border-bottom\",\n    \"border-bottom-color\",\n    \"border-bottom-left-radius\",\n    \"border-bottom-right-radius\",\n    \"border-bottom-style\",\n    \"border-bottom-width\",\n    \"border-collapse\",\n    \"border-color\",\n    \"border-end-end-radius\",\n    \"border-end-start-radius\",\n    \"border-image\",\n    \"border-image-outset\",\n    \"border-image-repeat\",\n    \"border-image-slice\",\n    \"border-image-source\",\n    \"border-image-width\",\n    \"border-inline\",\n    \"border-inline-color\",\n    \"border-inline-end\",\n    \"border-inline-end-color\",\n    \"border-inline-end-style\",\n    \"border-inline-end-width\",\n    \"border-inline-start\",\n    \"border-inline-start-color\",\n    \"border-inline-start-style\",\n    \"border-inline-start-width\",\n    \"border-inline-style\",\n    \"border-inline-width\",\n    \"border-left\",\n    \"border-left-color\",\n    \"border-left-style\",\n    \"border-left-width\",\n    \"border-radius\",\n    \"border-right\",\n    \"border-right-color\",\n    \"border-right-style\",\n    \"border-right-width\",\n    \"border-spacing\",\n    \"border-start-end-radius\",\n    \"border-start-start-radius\",\n    \"border-style\",\n    \"border-top\",\n    \"border-top-color\",\n    \"border-top-left-radius\",\n    \"border-top-right-radius\",\n    \"border-top-style\",\n    \"border-top-width\",\n    \"border-width\",\n    \"bottom\",\n    \"box-align\",\n    \"box-decoration-break\",\n    \"box-direction\",\n    \"box-flex\",\n    \"box-flex-group\",\n    \"box-lines\",\n    \"box-ordinal-group\",\n    \"box-orient\",\n    \"box-pack\",\n    \"box-shadow\",\n    \"box-sizing\",\n    \"break-after\",\n    \"break-before\",\n    \"break-inside\",\n    \"caption-side\",\n    \"caret-color\",\n    \"clear\",\n    \"clip\",\n    \"clip-path\",\n    \"clip-rule\",\n    \"color\",\n    \"color-interpolation\",\n    \"color-interpolation-filters\",\n    \"color-profile\",\n    \"color-rendering\",\n    \"color-scheme\",\n    \"column-count\",\n    \"column-fill\",\n    \"column-gap\",\n    \"column-rule\",\n    \"column-rule-color\",\n    \"column-rule-style\",\n    \"column-rule-width\",\n    \"column-span\",\n    \"column-width\",\n    \"columns\",\n    \"contain\",\n    \"contain-intrinsic-block-size\",\n    \"contain-intrinsic-height\",\n    \"contain-intrinsic-inline-size\",\n    \"contain-intrinsic-size\",\n    \"contain-intrinsic-width\",\n    \"container\",\n    \"container-name\",\n    \"container-type\",\n    \"content\",\n    \"content-visibility\",\n    \"counter-increment\",\n    \"counter-reset\",\n    \"counter-set\",\n    \"cue\",\n    \"cue-after\",\n    \"cue-before\",\n    \"cursor\",\n    \"cx\",\n    \"cy\",\n    \"direction\",\n    \"display\",\n    \"dominant-baseline\",\n    \"empty-cells\",\n    \"enable-background\",\n    \"field-sizing\",\n    \"fill\",\n    \"fill-opacity\",\n    \"fill-rule\",\n    \"filter\",\n    \"flex\",\n    \"flex-basis\",\n    \"flex-direction\",\n    \"flex-flow\",\n    \"flex-grow\",\n    \"flex-shrink\",\n    \"flex-wrap\",\n    \"float\",\n    \"flood-color\",\n    \"flood-opacity\",\n    \"flow\",\n    \"font\",\n    \"font-display\",\n    \"font-family\",\n    \"font-feature-settings\",\n    \"font-kerning\",\n    \"font-language-override\",\n    \"font-optical-sizing\",\n    \"font-palette\",\n    \"font-size\",\n    \"font-size-adjust\",\n    \"font-smooth\",\n    \"font-smoothing\",\n    \"font-stretch\",\n    \"font-style\",\n    \"font-synthesis\",\n    \"font-synthesis-position\",\n    \"font-synthesis-small-caps\",\n    \"font-synthesis-style\",\n    \"font-synthesis-weight\",\n    \"font-variant\",\n    \"font-variant-alternates\",\n    \"font-variant-caps\",\n    \"font-variant-east-asian\",\n    \"font-variant-emoji\",\n    \"font-variant-ligatures\",\n    \"font-variant-numeric\",\n    \"font-variant-position\",\n    \"font-variation-settings\",\n    \"font-weight\",\n    \"forced-color-adjust\",\n    \"gap\",\n    \"glyph-orientation-horizontal\",\n    \"glyph-orientation-vertical\",\n    \"grid\",\n    \"grid-area\",\n    \"grid-auto-columns\",\n    \"grid-auto-flow\",\n    \"grid-auto-rows\",\n    \"grid-column\",\n    \"grid-column-end\",\n    \"grid-column-start\",\n    \"grid-gap\",\n    \"grid-row\",\n    \"grid-row-end\",\n    \"grid-row-start\",\n    \"grid-template\",\n    \"grid-template-areas\",\n    \"grid-template-columns\",\n    \"grid-template-rows\",\n    \"hanging-punctuation\",\n    \"height\",\n    \"hyphenate-character\",\n    \"hyphenate-limit-chars\",\n    \"hyphens\",\n    \"icon\",\n    \"image-orientation\",\n    \"image-rendering\",\n    \"image-resolution\",\n    \"ime-mode\",\n    \"initial-letter\",\n    \"initial-letter-align\",\n    \"inline-size\",\n    \"inset\",\n    \"inset-area\",\n    \"inset-block\",\n    \"inset-block-end\",\n    \"inset-block-start\",\n    \"inset-inline\",\n    \"inset-inline-end\",\n    \"inset-inline-start\",\n    \"isolation\",\n    \"justify-content\",\n    \"justify-items\",\n    \"justify-self\",\n    \"kerning\",\n    \"left\",\n    \"letter-spacing\",\n    \"lighting-color\",\n    \"line-break\",\n    \"line-height\",\n    \"line-height-step\",\n    \"list-style\",\n    \"list-style-image\",\n    \"list-style-position\",\n    \"list-style-type\",\n    \"margin\",\n    \"margin-block\",\n    \"margin-block-end\",\n    \"margin-block-start\",\n    \"margin-bottom\",\n    \"margin-inline\",\n    \"margin-inline-end\",\n    \"margin-inline-start\",\n    \"margin-left\",\n    \"margin-right\",\n    \"margin-top\",\n    \"margin-trim\",\n    \"marker\",\n    \"marker-end\",\n    \"marker-mid\",\n    \"marker-start\",\n    \"marks\",\n    \"mask\",\n    \"mask-border\",\n    \"mask-border-mode\",\n    \"mask-border-outset\",\n    \"mask-border-repeat\",\n    \"mask-border-slice\",\n    \"mask-border-source\",\n    \"mask-border-width\",\n    \"mask-clip\",\n    \"mask-composite\",\n    \"mask-image\",\n    \"mask-mode\",\n    \"mask-origin\",\n    \"mask-position\",\n    \"mask-repeat\",\n    \"mask-size\",\n    \"mask-type\",\n    \"masonry-auto-flow\",\n    \"math-depth\",\n    \"math-shift\",\n    \"math-style\",\n    \"max-block-size\",\n    \"max-height\",\n    \"max-inline-size\",\n    \"max-width\",\n    \"min-block-size\",\n    \"min-height\",\n    \"min-inline-size\",\n    \"min-width\",\n    \"mix-blend-mode\",\n    \"nav-down\",\n    \"nav-index\",\n    \"nav-left\",\n    \"nav-right\",\n    \"nav-up\",\n    \"none\",\n    \"normal\",\n    \"object-fit\",\n    \"object-position\",\n    \"offset\",\n    \"offset-anchor\",\n    \"offset-distance\",\n    \"offset-path\",\n    \"offset-position\",\n    \"offset-rotate\",\n    \"opacity\",\n    \"order\",\n    \"orphans\",\n    \"outline\",\n    \"outline-color\",\n    \"outline-offset\",\n    \"outline-style\",\n    \"outline-width\",\n    \"overflow\",\n    \"overflow-anchor\",\n    \"overflow-block\",\n    \"overflow-clip-margin\",\n    \"overflow-inline\",\n    \"overflow-wrap\",\n    \"overflow-x\",\n    \"overflow-y\",\n    \"overlay\",\n    \"overscroll-behavior\",\n    \"overscroll-behavior-block\",\n    \"overscroll-behavior-inline\",\n    \"overscroll-behavior-x\",\n    \"overscroll-behavior-y\",\n    \"padding\",\n    \"padding-block\",\n    \"padding-block-end\",\n    \"padding-block-start\",\n    \"padding-bottom\",\n    \"padding-inline\",\n    \"padding-inline-end\",\n    \"padding-inline-start\",\n    \"padding-left\",\n    \"padding-right\",\n    \"padding-top\",\n    \"page\",\n    \"page-break-after\",\n    \"page-break-before\",\n    \"page-break-inside\",\n    \"paint-order\",\n    \"pause\",\n    \"pause-after\",\n    \"pause-before\",\n    \"perspective\",\n    \"perspective-origin\",\n    \"place-content\",\n    \"place-items\",\n    \"place-self\",\n    \"pointer-events\",\n    \"position\",\n    \"position-anchor\",\n    \"position-visibility\",\n    \"print-color-adjust\",\n    \"quotes\",\n    \"r\",\n    \"resize\",\n    \"rest\",\n    \"rest-after\",\n    \"rest-before\",\n    \"right\",\n    \"rotate\",\n    \"row-gap\",\n    \"ruby-align\",\n    \"ruby-position\",\n    \"scale\",\n    \"scroll-behavior\",\n    \"scroll-margin\",\n    \"scroll-margin-block\",\n    \"scroll-margin-block-end\",\n    \"scroll-margin-block-start\",\n    \"scroll-margin-bottom\",\n    \"scroll-margin-inline\",\n    \"scroll-margin-inline-end\",\n    \"scroll-margin-inline-start\",\n    \"scroll-margin-left\",\n    \"scroll-margin-right\",\n    \"scroll-margin-top\",\n    \"scroll-padding\",\n    \"scroll-padding-block\",\n    \"scroll-padding-block-end\",\n    \"scroll-padding-block-start\",\n    \"scroll-padding-bottom\",\n    \"scroll-padding-inline\",\n    \"scroll-padding-inline-end\",\n    \"scroll-padding-inline-start\",\n    \"scroll-padding-left\",\n    \"scroll-padding-right\",\n    \"scroll-padding-top\",\n    \"scroll-snap-align\",\n    \"scroll-snap-stop\",\n    \"scroll-snap-type\",\n    \"scroll-timeline\",\n    \"scroll-timeline-axis\",\n    \"scroll-timeline-name\",\n    \"scrollbar-color\",\n    \"scrollbar-gutter\",\n    \"scrollbar-width\",\n    \"shape-image-threshold\",\n    \"shape-margin\",\n    \"shape-outside\",\n    \"shape-rendering\",\n    \"speak\",\n    \"speak-as\",\n    \"src\",\n    \"stop-color\",\n    \"stop-opacity\",\n    \"stroke\",\n    \"stroke-dasharray\",\n    \"stroke-dashoffset\",\n    \"stroke-linecap\",\n    \"stroke-linejoin\",\n    \"stroke-miterlimit\",\n    \"stroke-opacity\",\n    \"stroke-width\",\n    \"tab-size\",\n    \"table-layout\",\n    \"text-align\",\n    \"text-align-all\",\n    \"text-align-last\",\n    \"text-anchor\",\n    \"text-combine-upright\",\n    \"text-decoration\",\n    \"text-decoration-color\",\n    \"text-decoration-line\",\n    \"text-decoration-skip\",\n    \"text-decoration-skip-ink\",\n    \"text-decoration-style\",\n    \"text-decoration-thickness\",\n    \"text-emphasis\",\n    \"text-emphasis-color\",\n    \"text-emphasis-position\",\n    \"text-emphasis-style\",\n    \"text-indent\",\n    \"text-justify\",\n    \"text-orientation\",\n    \"text-overflow\",\n    \"text-rendering\",\n    \"text-shadow\",\n    \"text-size-adjust\",\n    \"text-transform\",\n    \"text-underline-offset\",\n    \"text-underline-position\",\n    \"text-wrap\",\n    \"text-wrap-mode\",\n    \"text-wrap-style\",\n    \"timeline-scope\",\n    \"top\",\n    \"touch-action\",\n    \"transform\",\n    \"transform-box\",\n    \"transform-origin\",\n    \"transform-style\",\n    \"transition\",\n    \"transition-behavior\",\n    \"transition-delay\",\n    \"transition-duration\",\n    \"transition-property\",\n    \"transition-timing-function\",\n    \"translate\",\n    \"unicode-bidi\",\n    \"user-modify\",\n    \"user-select\",\n    \"vector-effect\",\n    \"vertical-align\",\n    \"view-timeline\",\n    \"view-timeline-axis\",\n    \"view-timeline-inset\",\n    \"view-timeline-name\",\n    \"view-transition-name\",\n    \"visibility\",\n    \"voice-balance\",\n    \"voice-duration\",\n    \"voice-family\",\n    \"voice-pitch\",\n    \"voice-range\",\n    \"voice-rate\",\n    \"voice-stress\",\n    \"voice-volume\",\n    \"white-space\",\n    \"white-space-collapse\",\n    \"widows\",\n    \"width\",\n    \"will-change\",\n    \"word-break\",\n    \"word-spacing\",\n    \"word-wrap\",\n    \"writing-mode\",\n    \"x\",\n    \"y\",\n    \"z-index\",\n    \"zoom\"\n].sort().reverse();\n/*\nLanguage: SCSS\nDescription: Scss is an extension of the syntax of CSS.\nAuthor: Kurt Emch <kurt@kurtemch.com>\nWebsite: https://sass-lang.com\nCategory: common, css, web\n*/ /** @type LanguageFn */ function scss(hljs) {\n    const modes = MODES(hljs);\n    const PSEUDO_ELEMENTS$1 = PSEUDO_ELEMENTS;\n    const PSEUDO_CLASSES$1 = PSEUDO_CLASSES;\n    const AT_IDENTIFIER = \"@[a-z-]+\"; // @font-face\n    const AT_MODIFIERS = \"and or not only\";\n    const IDENT_RE = \"[a-zA-Z-][a-zA-Z0-9_-]*\";\n    const VARIABLE = {\n        className: \"variable\",\n        begin: \"(\\\\$\" + IDENT_RE + \")\\\\b\",\n        relevance: 0\n    };\n    return {\n        name: \"SCSS\",\n        case_insensitive: true,\n        illegal: \"[=/|']\",\n        contains: [\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            // to recognize keyframe 40% etc which are outside the scope of our\n            // attribute value mode\n            modes.CSS_NUMBER_MODE,\n            {\n                className: \"selector-id\",\n                begin: \"#[A-Za-z0-9_-]+\",\n                relevance: 0\n            },\n            {\n                className: \"selector-class\",\n                begin: \"\\\\.[A-Za-z0-9_-]+\",\n                relevance: 0\n            },\n            modes.ATTRIBUTE_SELECTOR_MODE,\n            {\n                className: \"selector-tag\",\n                begin: \"\\\\b(\" + TAGS.join(\"|\") + \")\\\\b\",\n                // was there, before, but why?\n                relevance: 0\n            },\n            {\n                className: \"selector-pseudo\",\n                begin: \":(\" + PSEUDO_CLASSES$1.join(\"|\") + \")\"\n            },\n            {\n                className: \"selector-pseudo\",\n                begin: \":(:)?(\" + PSEUDO_ELEMENTS$1.join(\"|\") + \")\"\n            },\n            VARIABLE,\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                contains: [\n                    modes.CSS_NUMBER_MODE\n                ]\n            },\n            modes.CSS_VARIABLE,\n            {\n                className: \"attribute\",\n                begin: \"\\\\b(\" + ATTRIBUTES.join(\"|\") + \")\\\\b\"\n            },\n            {\n                begin: \"\\\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\\\b\"\n            },\n            {\n                begin: /:/,\n                end: /[;}{]/,\n                relevance: 0,\n                contains: [\n                    modes.BLOCK_COMMENT,\n                    VARIABLE,\n                    modes.HEXCOLOR,\n                    modes.CSS_NUMBER_MODE,\n                    hljs.QUOTE_STRING_MODE,\n                    hljs.APOS_STRING_MODE,\n                    modes.IMPORTANT,\n                    modes.FUNCTION_DISPATCH\n                ]\n            },\n            // matching these here allows us to treat them more like regular CSS\n            // rules so everything between the {} gets regular rule highlighting,\n            // which is what we want for page and font-face\n            {\n                begin: \"@(page|font-face)\",\n                keywords: {\n                    $pattern: AT_IDENTIFIER,\n                    keyword: \"@page @font-face\"\n                }\n            },\n            {\n                begin: \"@\",\n                end: \"[{;]\",\n                returnBegin: true,\n                keywords: {\n                    $pattern: /[a-z-]+/,\n                    keyword: AT_MODIFIERS,\n                    attribute: MEDIA_FEATURES.join(\" \")\n                },\n                contains: [\n                    {\n                        begin: AT_IDENTIFIER,\n                        className: \"keyword\"\n                    },\n                    {\n                        begin: /[a-z-]+(?=:)/,\n                        className: \"attribute\"\n                    },\n                    VARIABLE,\n                    hljs.QUOTE_STRING_MODE,\n                    hljs.APOS_STRING_MODE,\n                    modes.HEXCOLOR,\n                    modes.CSS_NUMBER_MODE\n                ]\n            },\n            modes.FUNCTION_DISPATCH\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/scss.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/shell.js":
/*!*********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/shell.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ shell)\n/* harmony export */ });\n/*\nLanguage: Shell Session\nRequires: bash.js\nAuthor: TSUYUSATO Kitsune <make.just.on@gmail.com>\nCategory: common\nAudit: 2020\n*/ /** @type LanguageFn */ function shell(hljs) {\n    return {\n        name: \"Shell Session\",\n        aliases: [\n            \"console\",\n            \"shellsession\"\n        ],\n        contains: [\n            {\n                className: \"meta.prompt\",\n                // We cannot add \\s (spaces) in the regular expression otherwise it will be too broad and produce unexpected result.\n                // For instance, in the following example, it would match \"echo /path/to/home >\" as a prompt:\n                // echo /path/to/home > t.exe\n                begin: /^\\s{0,3}[/~\\w\\d[\\]()@-]*[>%$#][ ]?/,\n                starts: {\n                    end: /[^\\\\](?=\\s*$)/,\n                    subLanguage: \"bash\"\n                }\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9zaGVsbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7OztBQU1BLEdBRUEscUJBQXFCLEdBQ3JCLFNBQVNBLE1BQU1DLElBQUk7SUFDakIsT0FBTztRQUNMQyxNQUFNO1FBQ05DLFNBQVM7WUFDUDtZQUNBO1NBQ0Q7UUFDREMsVUFBVTtZQUNSO2dCQUNFQyxXQUFXO2dCQUNYLG9IQUFvSDtnQkFDcEgsNkZBQTZGO2dCQUM3Riw2QkFBNkI7Z0JBQzdCQyxPQUFPO2dCQUNQQyxRQUFRO29CQUNOQyxLQUFLO29CQUNMQyxhQUFhO2dCQUNmO1lBQ0Y7U0FDRDtJQUNIO0FBQ0Y7QUFFNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbW5pLWNoYXQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9zaGVsbC5qcz84YmFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogU2hlbGwgU2Vzc2lvblxuUmVxdWlyZXM6IGJhc2guanNcbkF1dGhvcjogVFNVWVVTQVRPIEtpdHN1bmUgPG1ha2UuanVzdC5vbkBnbWFpbC5jb20+XG5DYXRlZ29yeTogY29tbW9uXG5BdWRpdDogMjAyMFxuKi9cblxuLyoqIEB0eXBlIExhbmd1YWdlRm4gKi9cbmZ1bmN0aW9uIHNoZWxsKGhsanMpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnU2hlbGwgU2Vzc2lvbicsXG4gICAgYWxpYXNlczogW1xuICAgICAgJ2NvbnNvbGUnLFxuICAgICAgJ3NoZWxsc2Vzc2lvbidcbiAgICBdLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ21ldGEucHJvbXB0JyxcbiAgICAgICAgLy8gV2UgY2Fubm90IGFkZCBcXHMgKHNwYWNlcykgaW4gdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBvdGhlcndpc2UgaXQgd2lsbCBiZSB0b28gYnJvYWQgYW5kIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHQuXG4gICAgICAgIC8vIEZvciBpbnN0YW5jZSwgaW4gdGhlIGZvbGxvd2luZyBleGFtcGxlLCBpdCB3b3VsZCBtYXRjaCBcImVjaG8gL3BhdGgvdG8vaG9tZSA+XCIgYXMgYSBwcm9tcHQ6XG4gICAgICAgIC8vIGVjaG8gL3BhdGgvdG8vaG9tZSA+IHQuZXhlXG4gICAgICAgIGJlZ2luOiAvXlxcc3swLDN9Wy9+XFx3XFxkW1xcXSgpQC1dKls+JSQjXVsgXT8vLFxuICAgICAgICBzdGFydHM6IHtcbiAgICAgICAgICBlbmQ6IC9bXlxcXFxdKD89XFxzKiQpLyxcbiAgICAgICAgICBzdWJMYW5ndWFnZTogJ2Jhc2gnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH07XG59XG5cbmV4cG9ydCB7IHNoZWxsIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJzaGVsbCIsImhsanMiLCJuYW1lIiwiYWxpYXNlcyIsImNvbnRhaW5zIiwiY2xhc3NOYW1lIiwiYmVnaW4iLCJzdGFydHMiLCJlbmQiLCJzdWJMYW5ndWFnZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/shell.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/sql.js":
/*!*******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/sql.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ sql)\n/* harmony export */ });\n/*\n Language: SQL\n Website: https://en.wikipedia.org/wiki/SQL\n Category: common, database\n */ /*\n\nGoals:\n\nSQL is intended to highlight basic/common SQL keywords and expressions\n\n- If pretty much every single SQL server includes supports, then it's a canidate.\n- It is NOT intended to include tons of vendor specific keywords (Oracle, MySQL,\n  PostgreSQL) although the list of data types is purposely a bit more expansive.\n- For more specific SQL grammars please see:\n  - PostgreSQL and PL/pgSQL - core\n  - T-SQL - https://github.com/highlightjs/highlightjs-tsql\n  - sql_more (core)\n\n */ function sql(hljs) {\n    const regex = hljs.regex;\n    const COMMENT_MODE = hljs.COMMENT(\"--\", \"$\");\n    const STRING = {\n        scope: \"string\",\n        variants: [\n            {\n                begin: /'/,\n                end: /'/,\n                contains: [\n                    {\n                        match: /''/\n                    }\n                ]\n            }\n        ]\n    };\n    const QUOTED_IDENTIFIER = {\n        begin: /\"/,\n        end: /\"/,\n        contains: [\n            {\n                match: /\"\"/\n            }\n        ]\n    };\n    const LITERALS = [\n        \"true\",\n        \"false\",\n        // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.\n        // \"null\",\n        \"unknown\"\n    ];\n    const MULTI_WORD_TYPES = [\n        \"double precision\",\n        \"large object\",\n        \"with timezone\",\n        \"without timezone\"\n    ];\n    const TYPES = [\n        \"bigint\",\n        \"binary\",\n        \"blob\",\n        \"boolean\",\n        \"char\",\n        \"character\",\n        \"clob\",\n        \"date\",\n        \"dec\",\n        \"decfloat\",\n        \"decimal\",\n        \"float\",\n        \"int\",\n        \"integer\",\n        \"interval\",\n        \"nchar\",\n        \"nclob\",\n        \"national\",\n        \"numeric\",\n        \"real\",\n        \"row\",\n        \"smallint\",\n        \"time\",\n        \"timestamp\",\n        \"varchar\",\n        \"varying\",\n        \"varbinary\"\n    ];\n    const NON_RESERVED_WORDS = [\n        \"add\",\n        \"asc\",\n        \"collation\",\n        \"desc\",\n        \"final\",\n        \"first\",\n        \"last\",\n        \"view\"\n    ];\n    // https://jakewheat.github.io/sql-overview/sql-2016-foundation-grammar.html#reserved-word\n    const RESERVED_WORDS = [\n        \"abs\",\n        \"acos\",\n        \"all\",\n        \"allocate\",\n        \"alter\",\n        \"and\",\n        \"any\",\n        \"are\",\n        \"array\",\n        \"array_agg\",\n        \"array_max_cardinality\",\n        \"as\",\n        \"asensitive\",\n        \"asin\",\n        \"asymmetric\",\n        \"at\",\n        \"atan\",\n        \"atomic\",\n        \"authorization\",\n        \"avg\",\n        \"begin\",\n        \"begin_frame\",\n        \"begin_partition\",\n        \"between\",\n        \"bigint\",\n        \"binary\",\n        \"blob\",\n        \"boolean\",\n        \"both\",\n        \"by\",\n        \"call\",\n        \"called\",\n        \"cardinality\",\n        \"cascaded\",\n        \"case\",\n        \"cast\",\n        \"ceil\",\n        \"ceiling\",\n        \"char\",\n        \"char_length\",\n        \"character\",\n        \"character_length\",\n        \"check\",\n        \"classifier\",\n        \"clob\",\n        \"close\",\n        \"coalesce\",\n        \"collate\",\n        \"collect\",\n        \"column\",\n        \"commit\",\n        \"condition\",\n        \"connect\",\n        \"constraint\",\n        \"contains\",\n        \"convert\",\n        \"copy\",\n        \"corr\",\n        \"corresponding\",\n        \"cos\",\n        \"cosh\",\n        \"count\",\n        \"covar_pop\",\n        \"covar_samp\",\n        \"create\",\n        \"cross\",\n        \"cube\",\n        \"cume_dist\",\n        \"current\",\n        \"current_catalog\",\n        \"current_date\",\n        \"current_default_transform_group\",\n        \"current_path\",\n        \"current_role\",\n        \"current_row\",\n        \"current_schema\",\n        \"current_time\",\n        \"current_timestamp\",\n        \"current_path\",\n        \"current_role\",\n        \"current_transform_group_for_type\",\n        \"current_user\",\n        \"cursor\",\n        \"cycle\",\n        \"date\",\n        \"day\",\n        \"deallocate\",\n        \"dec\",\n        \"decimal\",\n        \"decfloat\",\n        \"declare\",\n        \"default\",\n        \"define\",\n        \"delete\",\n        \"dense_rank\",\n        \"deref\",\n        \"describe\",\n        \"deterministic\",\n        \"disconnect\",\n        \"distinct\",\n        \"double\",\n        \"drop\",\n        \"dynamic\",\n        \"each\",\n        \"element\",\n        \"else\",\n        \"empty\",\n        \"end\",\n        \"end_frame\",\n        \"end_partition\",\n        \"end-exec\",\n        \"equals\",\n        \"escape\",\n        \"every\",\n        \"except\",\n        \"exec\",\n        \"execute\",\n        \"exists\",\n        \"exp\",\n        \"external\",\n        \"extract\",\n        \"false\",\n        \"fetch\",\n        \"filter\",\n        \"first_value\",\n        \"float\",\n        \"floor\",\n        \"for\",\n        \"foreign\",\n        \"frame_row\",\n        \"free\",\n        \"from\",\n        \"full\",\n        \"function\",\n        \"fusion\",\n        \"get\",\n        \"global\",\n        \"grant\",\n        \"group\",\n        \"grouping\",\n        \"groups\",\n        \"having\",\n        \"hold\",\n        \"hour\",\n        \"identity\",\n        \"in\",\n        \"indicator\",\n        \"initial\",\n        \"inner\",\n        \"inout\",\n        \"insensitive\",\n        \"insert\",\n        \"int\",\n        \"integer\",\n        \"intersect\",\n        \"intersection\",\n        \"interval\",\n        \"into\",\n        \"is\",\n        \"join\",\n        \"json_array\",\n        \"json_arrayagg\",\n        \"json_exists\",\n        \"json_object\",\n        \"json_objectagg\",\n        \"json_query\",\n        \"json_table\",\n        \"json_table_primitive\",\n        \"json_value\",\n        \"lag\",\n        \"language\",\n        \"large\",\n        \"last_value\",\n        \"lateral\",\n        \"lead\",\n        \"leading\",\n        \"left\",\n        \"like\",\n        \"like_regex\",\n        \"listagg\",\n        \"ln\",\n        \"local\",\n        \"localtime\",\n        \"localtimestamp\",\n        \"log\",\n        \"log10\",\n        \"lower\",\n        \"match\",\n        \"match_number\",\n        \"match_recognize\",\n        \"matches\",\n        \"max\",\n        \"member\",\n        \"merge\",\n        \"method\",\n        \"min\",\n        \"minute\",\n        \"mod\",\n        \"modifies\",\n        \"module\",\n        \"month\",\n        \"multiset\",\n        \"national\",\n        \"natural\",\n        \"nchar\",\n        \"nclob\",\n        \"new\",\n        \"no\",\n        \"none\",\n        \"normalize\",\n        \"not\",\n        \"nth_value\",\n        \"ntile\",\n        \"null\",\n        \"nullif\",\n        \"numeric\",\n        \"octet_length\",\n        \"occurrences_regex\",\n        \"of\",\n        \"offset\",\n        \"old\",\n        \"omit\",\n        \"on\",\n        \"one\",\n        \"only\",\n        \"open\",\n        \"or\",\n        \"order\",\n        \"out\",\n        \"outer\",\n        \"over\",\n        \"overlaps\",\n        \"overlay\",\n        \"parameter\",\n        \"partition\",\n        \"pattern\",\n        \"per\",\n        \"percent\",\n        \"percent_rank\",\n        \"percentile_cont\",\n        \"percentile_disc\",\n        \"period\",\n        \"portion\",\n        \"position\",\n        \"position_regex\",\n        \"power\",\n        \"precedes\",\n        \"precision\",\n        \"prepare\",\n        \"primary\",\n        \"procedure\",\n        \"ptf\",\n        \"range\",\n        \"rank\",\n        \"reads\",\n        \"real\",\n        \"recursive\",\n        \"ref\",\n        \"references\",\n        \"referencing\",\n        \"regr_avgx\",\n        \"regr_avgy\",\n        \"regr_count\",\n        \"regr_intercept\",\n        \"regr_r2\",\n        \"regr_slope\",\n        \"regr_sxx\",\n        \"regr_sxy\",\n        \"regr_syy\",\n        \"release\",\n        \"result\",\n        \"return\",\n        \"returns\",\n        \"revoke\",\n        \"right\",\n        \"rollback\",\n        \"rollup\",\n        \"row\",\n        \"row_number\",\n        \"rows\",\n        \"running\",\n        \"savepoint\",\n        \"scope\",\n        \"scroll\",\n        \"search\",\n        \"second\",\n        \"seek\",\n        \"select\",\n        \"sensitive\",\n        \"session_user\",\n        \"set\",\n        \"show\",\n        \"similar\",\n        \"sin\",\n        \"sinh\",\n        \"skip\",\n        \"smallint\",\n        \"some\",\n        \"specific\",\n        \"specifictype\",\n        \"sql\",\n        \"sqlexception\",\n        \"sqlstate\",\n        \"sqlwarning\",\n        \"sqrt\",\n        \"start\",\n        \"static\",\n        \"stddev_pop\",\n        \"stddev_samp\",\n        \"submultiset\",\n        \"subset\",\n        \"substring\",\n        \"substring_regex\",\n        \"succeeds\",\n        \"sum\",\n        \"symmetric\",\n        \"system\",\n        \"system_time\",\n        \"system_user\",\n        \"table\",\n        \"tablesample\",\n        \"tan\",\n        \"tanh\",\n        \"then\",\n        \"time\",\n        \"timestamp\",\n        \"timezone_hour\",\n        \"timezone_minute\",\n        \"to\",\n        \"trailing\",\n        \"translate\",\n        \"translate_regex\",\n        \"translation\",\n        \"treat\",\n        \"trigger\",\n        \"trim\",\n        \"trim_array\",\n        \"true\",\n        \"truncate\",\n        \"uescape\",\n        \"union\",\n        \"unique\",\n        \"unknown\",\n        \"unnest\",\n        \"update\",\n        \"upper\",\n        \"user\",\n        \"using\",\n        \"value\",\n        \"values\",\n        \"value_of\",\n        \"var_pop\",\n        \"var_samp\",\n        \"varbinary\",\n        \"varchar\",\n        \"varying\",\n        \"versioning\",\n        \"when\",\n        \"whenever\",\n        \"where\",\n        \"width_bucket\",\n        \"window\",\n        \"with\",\n        \"within\",\n        \"without\",\n        \"year\"\n    ];\n    // these are reserved words we have identified to be functions\n    // and should only be highlighted in a dispatch-like context\n    // ie, array_agg(...), etc.\n    const RESERVED_FUNCTIONS = [\n        \"abs\",\n        \"acos\",\n        \"array_agg\",\n        \"asin\",\n        \"atan\",\n        \"avg\",\n        \"cast\",\n        \"ceil\",\n        \"ceiling\",\n        \"coalesce\",\n        \"corr\",\n        \"cos\",\n        \"cosh\",\n        \"count\",\n        \"covar_pop\",\n        \"covar_samp\",\n        \"cume_dist\",\n        \"dense_rank\",\n        \"deref\",\n        \"element\",\n        \"exp\",\n        \"extract\",\n        \"first_value\",\n        \"floor\",\n        \"json_array\",\n        \"json_arrayagg\",\n        \"json_exists\",\n        \"json_object\",\n        \"json_objectagg\",\n        \"json_query\",\n        \"json_table\",\n        \"json_table_primitive\",\n        \"json_value\",\n        \"lag\",\n        \"last_value\",\n        \"lead\",\n        \"listagg\",\n        \"ln\",\n        \"log\",\n        \"log10\",\n        \"lower\",\n        \"max\",\n        \"min\",\n        \"mod\",\n        \"nth_value\",\n        \"ntile\",\n        \"nullif\",\n        \"percent_rank\",\n        \"percentile_cont\",\n        \"percentile_disc\",\n        \"position\",\n        \"position_regex\",\n        \"power\",\n        \"rank\",\n        \"regr_avgx\",\n        \"regr_avgy\",\n        \"regr_count\",\n        \"regr_intercept\",\n        \"regr_r2\",\n        \"regr_slope\",\n        \"regr_sxx\",\n        \"regr_sxy\",\n        \"regr_syy\",\n        \"row_number\",\n        \"sin\",\n        \"sinh\",\n        \"sqrt\",\n        \"stddev_pop\",\n        \"stddev_samp\",\n        \"substring\",\n        \"substring_regex\",\n        \"sum\",\n        \"tan\",\n        \"tanh\",\n        \"translate\",\n        \"translate_regex\",\n        \"treat\",\n        \"trim\",\n        \"trim_array\",\n        \"unnest\",\n        \"upper\",\n        \"value_of\",\n        \"var_pop\",\n        \"var_samp\",\n        \"width_bucket\"\n    ];\n    // these functions can\n    const POSSIBLE_WITHOUT_PARENS = [\n        \"current_catalog\",\n        \"current_date\",\n        \"current_default_transform_group\",\n        \"current_path\",\n        \"current_role\",\n        \"current_schema\",\n        \"current_transform_group_for_type\",\n        \"current_user\",\n        \"session_user\",\n        \"system_time\",\n        \"system_user\",\n        \"current_time\",\n        \"localtime\",\n        \"current_timestamp\",\n        \"localtimestamp\"\n    ];\n    // those exist to boost relevance making these very\n    // \"SQL like\" keyword combos worth +1 extra relevance\n    const COMBOS = [\n        \"create table\",\n        \"insert into\",\n        \"primary key\",\n        \"foreign key\",\n        \"not null\",\n        \"alter table\",\n        \"add constraint\",\n        \"grouping sets\",\n        \"on overflow\",\n        \"character set\",\n        \"respect nulls\",\n        \"ignore nulls\",\n        \"nulls first\",\n        \"nulls last\",\n        \"depth first\",\n        \"breadth first\"\n    ];\n    const FUNCTIONS = RESERVED_FUNCTIONS;\n    const KEYWORDS = [\n        ...RESERVED_WORDS,\n        ...NON_RESERVED_WORDS\n    ].filter((keyword)=>{\n        return !RESERVED_FUNCTIONS.includes(keyword);\n    });\n    const VARIABLE = {\n        scope: \"variable\",\n        match: /@[a-z0-9][a-z0-9_]*/\n    };\n    const OPERATOR = {\n        scope: \"operator\",\n        match: /[-+*/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,\n        relevance: 0\n    };\n    const FUNCTION_CALL = {\n        match: regex.concat(/\\b/, regex.either(...FUNCTIONS), /\\s*\\(/),\n        relevance: 0,\n        keywords: {\n            built_in: FUNCTIONS\n        }\n    };\n    // turns a multi-word keyword combo into a regex that doesn't\n    // care about extra whitespace etc.\n    // input: \"START QUERY\"\n    // output: /\\bSTART\\s+QUERY\\b/\n    function kws_to_regex(list) {\n        return regex.concat(/\\b/, regex.either(...list.map((kw)=>{\n            return kw.replace(/\\s+/, \"\\\\s+\");\n        })), /\\b/);\n    }\n    const MULTI_WORD_KEYWORDS = {\n        scope: \"keyword\",\n        match: kws_to_regex(COMBOS),\n        relevance: 0\n    };\n    // keywords with less than 3 letters are reduced in relevancy\n    function reduceRelevancy(list, { exceptions, when } = {}) {\n        const qualifyFn = when;\n        exceptions = exceptions || [];\n        return list.map((item)=>{\n            if (item.match(/\\|\\d+$/) || exceptions.includes(item)) {\n                return item;\n            } else if (qualifyFn(item)) {\n                return `${item}|0`;\n            } else {\n                return item;\n            }\n        });\n    }\n    return {\n        name: \"SQL\",\n        case_insensitive: true,\n        // does not include {} or HTML tags `</`\n        illegal: /[{}]|<\\//,\n        keywords: {\n            $pattern: /\\b[\\w\\.]+/,\n            keyword: reduceRelevancy(KEYWORDS, {\n                when: (x)=>x.length < 3\n            }),\n            literal: LITERALS,\n            type: TYPES,\n            built_in: POSSIBLE_WITHOUT_PARENS\n        },\n        contains: [\n            {\n                scope: \"type\",\n                match: kws_to_regex(MULTI_WORD_TYPES)\n            },\n            MULTI_WORD_KEYWORDS,\n            FUNCTION_CALL,\n            VARIABLE,\n            STRING,\n            QUOTED_IDENTIFIER,\n            hljs.C_NUMBER_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            COMMENT_MODE,\n            OPERATOR\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/sql.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/swift.js":
/*!*********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/swift.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ swift)\n/* harmony export */ });\n/**\n * @param {string} value\n * @returns {RegExp}\n * */ /**\n * @param {RegExp | string } re\n * @returns {string}\n */ function source(re) {\n    if (!re) return null;\n    if (typeof re === \"string\") return re;\n    return re.source;\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */ function lookahead(re) {\n    return concat(\"(?=\", re, \")\");\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */ function concat(...args) {\n    const joined = args.map((x)=>source(x)).join(\"\");\n    return joined;\n}\n/**\n * @param { Array<string | RegExp | Object> } args\n * @returns {object}\n */ function stripOptionsFromArgs(args) {\n    const opts = args[args.length - 1];\n    if (typeof opts === \"object\" && opts.constructor === Object) {\n        args.splice(args.length - 1, 1);\n        return opts;\n    } else {\n        return {};\n    }\n}\n/** @typedef { {capture?: boolean} } RegexEitherOptions */ /**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args\n * @returns {string}\n */ function either(...args) {\n    /** @type { object & {capture?: boolean} }  */ const opts = stripOptionsFromArgs(args);\n    const joined = \"(\" + (opts.capture ? \"\" : \"?:\") + args.map((x)=>source(x)).join(\"|\") + \")\";\n    return joined;\n}\nconst keywordWrapper = (keyword)=>concat(/\\b/, keyword, /\\w$/.test(keyword) ? /\\b/ : /\\B/);\n// Keywords that require a leading dot.\nconst dotKeywords = [\n    \"Protocol\",\n    \"Type\" // contextual\n].map(keywordWrapper);\n// Keywords that may have a leading dot.\nconst optionalDotKeywords = [\n    \"init\",\n    \"self\"\n].map(keywordWrapper);\n// should register as keyword, not type\nconst keywordTypes = [\n    \"Any\",\n    \"Self\"\n];\n// Regular keywords and literals.\nconst keywords = [\n    // strings below will be fed into the regular `keywords` engine while regex\n    // will result in additional modes being created to scan for those keywords to\n    // avoid conflicts with other rules\n    \"actor\",\n    \"any\",\n    \"associatedtype\",\n    \"async\",\n    \"await\",\n    /as\\?/,\n    /as!/,\n    \"as\",\n    \"borrowing\",\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"class\",\n    \"consume\",\n    \"consuming\",\n    \"continue\",\n    \"convenience\",\n    \"copy\",\n    \"default\",\n    \"defer\",\n    \"deinit\",\n    \"didSet\",\n    \"distributed\",\n    \"do\",\n    \"dynamic\",\n    \"each\",\n    \"else\",\n    \"enum\",\n    \"extension\",\n    \"fallthrough\",\n    /fileprivate\\(set\\)/,\n    \"fileprivate\",\n    \"final\",\n    \"for\",\n    \"func\",\n    \"get\",\n    \"guard\",\n    \"if\",\n    \"import\",\n    \"indirect\",\n    \"infix\",\n    /init\\?/,\n    /init!/,\n    \"inout\",\n    /internal\\(set\\)/,\n    \"internal\",\n    \"in\",\n    \"is\",\n    \"isolated\",\n    \"nonisolated\",\n    \"lazy\",\n    \"let\",\n    \"macro\",\n    \"mutating\",\n    \"nonmutating\",\n    /open\\(set\\)/,\n    \"open\",\n    \"operator\",\n    \"optional\",\n    \"override\",\n    \"package\",\n    \"postfix\",\n    \"precedencegroup\",\n    \"prefix\",\n    /private\\(set\\)/,\n    \"private\",\n    \"protocol\",\n    /public\\(set\\)/,\n    \"public\",\n    \"repeat\",\n    \"required\",\n    \"rethrows\",\n    \"return\",\n    \"set\",\n    \"some\",\n    \"static\",\n    \"struct\",\n    \"subscript\",\n    \"super\",\n    \"switch\",\n    \"throws\",\n    \"throw\",\n    /try\\?/,\n    /try!/,\n    \"try\",\n    \"typealias\",\n    /unowned\\(safe\\)/,\n    /unowned\\(unsafe\\)/,\n    \"unowned\",\n    \"var\",\n    \"weak\",\n    \"where\",\n    \"while\",\n    \"willSet\" // contextual\n];\n// NOTE: Contextual keywords are reserved only in specific contexts.\n// Ideally, these should be matched using modes to avoid false positives.\n// Literals.\nconst literals = [\n    \"false\",\n    \"nil\",\n    \"true\"\n];\n// Keywords used in precedence groups.\nconst precedencegroupKeywords = [\n    \"assignment\",\n    \"associativity\",\n    \"higherThan\",\n    \"left\",\n    \"lowerThan\",\n    \"none\",\n    \"right\"\n];\n// Keywords that start with a number sign (#).\n// #(un)available is handled separately.\nconst numberSignKeywords = [\n    \"#colorLiteral\",\n    \"#column\",\n    \"#dsohandle\",\n    \"#else\",\n    \"#elseif\",\n    \"#endif\",\n    \"#error\",\n    \"#file\",\n    \"#fileID\",\n    \"#fileLiteral\",\n    \"#filePath\",\n    \"#function\",\n    \"#if\",\n    \"#imageLiteral\",\n    \"#keyPath\",\n    \"#line\",\n    \"#selector\",\n    \"#sourceLocation\",\n    \"#warning\"\n];\n// Global functions in the Standard Library.\nconst builtIns = [\n    \"abs\",\n    \"all\",\n    \"any\",\n    \"assert\",\n    \"assertionFailure\",\n    \"debugPrint\",\n    \"dump\",\n    \"fatalError\",\n    \"getVaList\",\n    \"isKnownUniquelyReferenced\",\n    \"max\",\n    \"min\",\n    \"numericCast\",\n    \"pointwiseMax\",\n    \"pointwiseMin\",\n    \"precondition\",\n    \"preconditionFailure\",\n    \"print\",\n    \"readLine\",\n    \"repeatElement\",\n    \"sequence\",\n    \"stride\",\n    \"swap\",\n    \"swift_unboxFromSwiftValueWithType\",\n    \"transcode\",\n    \"type\",\n    \"unsafeBitCast\",\n    \"unsafeDowncast\",\n    \"withExtendedLifetime\",\n    \"withUnsafeMutablePointer\",\n    \"withUnsafePointer\",\n    \"withVaList\",\n    \"withoutActuallyEscaping\",\n    \"zip\"\n];\n// Valid first characters for operators.\nconst operatorHead = either(/[/=\\-+!*%<>&|^~?]/, /[\\u00A1-\\u00A7]/, /[\\u00A9\\u00AB]/, /[\\u00AC\\u00AE]/, /[\\u00B0\\u00B1]/, /[\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7]/, /[\\u2016-\\u2017]/, /[\\u2020-\\u2027]/, /[\\u2030-\\u203E]/, /[\\u2041-\\u2053]/, /[\\u2055-\\u205E]/, /[\\u2190-\\u23FF]/, /[\\u2500-\\u2775]/, /[\\u2794-\\u2BFF]/, /[\\u2E00-\\u2E7F]/, /[\\u3001-\\u3003]/, /[\\u3008-\\u3020]/, /[\\u3030]/);\n// Valid characters for operators.\nconst operatorCharacter = either(operatorHead, /[\\u0300-\\u036F]/, /[\\u1DC0-\\u1DFF]/, /[\\u20D0-\\u20FF]/, /[\\uFE00-\\uFE0F]/, /[\\uFE20-\\uFE2F]/);\n// Valid operator.\nconst operator = concat(operatorHead, operatorCharacter, \"*\");\n// Valid first characters for identifiers.\nconst identifierHead = either(/[a-zA-Z_]/, /[\\u00A8\\u00AA\\u00AD\\u00AF\\u00B2-\\u00B5\\u00B7-\\u00BA]/, /[\\u00BC-\\u00BE\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF]/, /[\\u0100-\\u02FF\\u0370-\\u167F\\u1681-\\u180D\\u180F-\\u1DBF]/, /[\\u1E00-\\u1FFF]/, /[\\u200B-\\u200D\\u202A-\\u202E\\u203F-\\u2040\\u2054\\u2060-\\u206F]/, /[\\u2070-\\u20CF\\u2100-\\u218F\\u2460-\\u24FF\\u2776-\\u2793]/, /[\\u2C00-\\u2DFF\\u2E80-\\u2FFF]/, /[\\u3004-\\u3007\\u3021-\\u302F\\u3031-\\u303F\\u3040-\\uD7FF]/, /[\\uF900-\\uFD3D\\uFD40-\\uFDCF\\uFDF0-\\uFE1F\\uFE30-\\uFE44]/, /[\\uFE47-\\uFEFE\\uFF00-\\uFFFD]/ // Should be /[\\uFE47-\\uFFFD]/, but we have to exclude FEFF.\n);\n// Valid characters for identifiers.\nconst identifierCharacter = either(identifierHead, /\\d/, /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F]/);\n// Valid identifier.\nconst identifier = concat(identifierHead, identifierCharacter, \"*\");\n// Valid type identifier.\nconst typeIdentifier = concat(/[A-Z]/, identifierCharacter, \"*\");\n// Built-in attributes, which are highlighted as keywords.\n// @available is handled separately.\n// https://docs.swift.org/swift-book/documentation/the-swift-programming-language/attributes\nconst keywordAttributes = [\n    \"attached\",\n    \"autoclosure\",\n    concat(/convention\\(/, either(\"swift\", \"block\", \"c\"), /\\)/),\n    \"discardableResult\",\n    \"dynamicCallable\",\n    \"dynamicMemberLookup\",\n    \"escaping\",\n    \"freestanding\",\n    \"frozen\",\n    \"GKInspectable\",\n    \"IBAction\",\n    \"IBDesignable\",\n    \"IBInspectable\",\n    \"IBOutlet\",\n    \"IBSegueAction\",\n    \"inlinable\",\n    \"main\",\n    \"nonobjc\",\n    \"NSApplicationMain\",\n    \"NSCopying\",\n    \"NSManaged\",\n    concat(/objc\\(/, identifier, /\\)/),\n    \"objc\",\n    \"objcMembers\",\n    \"propertyWrapper\",\n    \"requires_stored_property_inits\",\n    \"resultBuilder\",\n    \"Sendable\",\n    \"testable\",\n    \"UIApplicationMain\",\n    \"unchecked\",\n    \"unknown\",\n    \"usableFromInline\",\n    \"warn_unqualified_access\"\n];\n// Contextual keywords used in @available and #(un)available.\nconst availabilityKeywords = [\n    \"iOS\",\n    \"iOSApplicationExtension\",\n    \"macOS\",\n    \"macOSApplicationExtension\",\n    \"macCatalyst\",\n    \"macCatalystApplicationExtension\",\n    \"watchOS\",\n    \"watchOSApplicationExtension\",\n    \"tvOS\",\n    \"tvOSApplicationExtension\",\n    \"swift\"\n];\n/*\nLanguage: Swift\nDescription: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.\nAuthor: Steven Van Impe <steven.vanimpe@icloud.com>\nContributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>\nWebsite: https://swift.org\nCategory: common, system\n*/ /** @type LanguageFn */ function swift(hljs) {\n    const WHITESPACE = {\n        match: /\\s+/,\n        relevance: 0\n    };\n    // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411\n    const BLOCK_COMMENT = hljs.COMMENT(\"/\\\\*\", \"\\\\*/\", {\n        contains: [\n            \"self\"\n        ]\n    });\n    const COMMENTS = [\n        hljs.C_LINE_COMMENT_MODE,\n        BLOCK_COMMENT\n    ];\n    // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413\n    // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html\n    const DOT_KEYWORD = {\n        match: [\n            /\\./,\n            either(...dotKeywords, ...optionalDotKeywords)\n        ],\n        className: {\n            2: \"keyword\"\n        }\n    };\n    const KEYWORD_GUARD = {\n        // Consume .keyword to prevent highlighting properties and methods as keywords.\n        match: concat(/\\./, either(...keywords)),\n        relevance: 0\n    };\n    const PLAIN_KEYWORDS = keywords.filter((kw)=>typeof kw === \"string\").concat([\n        \"_|0\"\n    ]); // seems common, so 0 relevance\n    const REGEX_KEYWORDS = keywords.filter((kw)=>typeof kw !== \"string\") // find regex\n    .concat(keywordTypes).map(keywordWrapper);\n    const KEYWORD = {\n        variants: [\n            {\n                className: \"keyword\",\n                match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)\n            }\n        ]\n    };\n    // find all the regular keywords\n    const KEYWORDS = {\n        $pattern: either(/\\b\\w+/, /#\\w+/ // number keywords\n        ),\n        keyword: PLAIN_KEYWORDS.concat(numberSignKeywords),\n        literal: literals\n    };\n    const KEYWORD_MODES = [\n        DOT_KEYWORD,\n        KEYWORD_GUARD,\n        KEYWORD\n    ];\n    // https://github.com/apple/swift/tree/main/stdlib/public/core\n    const BUILT_IN_GUARD = {\n        // Consume .built_in to prevent highlighting properties and methods.\n        match: concat(/\\./, either(...builtIns)),\n        relevance: 0\n    };\n    const BUILT_IN = {\n        className: \"built_in\",\n        match: concat(/\\b/, either(...builtIns), /(?=\\()/)\n    };\n    const BUILT_INS = [\n        BUILT_IN_GUARD,\n        BUILT_IN\n    ];\n    // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418\n    const OPERATOR_GUARD = {\n        // Prevent -> from being highlighting as an operator.\n        match: /->/,\n        relevance: 0\n    };\n    const OPERATOR = {\n        className: \"operator\",\n        relevance: 0,\n        variants: [\n            {\n                match: operator\n            },\n            {\n                // dot-operator: only operators that start with a dot are allowed to use dots as\n                // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more\n                // characters that may also include dots.\n                match: `\\\\.(\\\\.|${operatorCharacter})+`\n            }\n        ]\n    };\n    const OPERATORS = [\n        OPERATOR_GUARD,\n        OPERATOR\n    ];\n    // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal\n    // TODO: Update for leading `-` after lookbehind is supported everywhere\n    const decimalDigits = \"([0-9]_*)+\";\n    const hexDigits = \"([0-9a-fA-F]_*)+\";\n    const NUMBER = {\n        className: \"number\",\n        relevance: 0,\n        variants: [\n            // decimal floating-point-literal (subsumes decimal-literal)\n            {\n                match: `\\\\b(${decimalDigits})(\\\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\\\b`\n            },\n            // hexadecimal floating-point-literal (subsumes hexadecimal-literal)\n            {\n                match: `\\\\b0x(${hexDigits})(\\\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\\\b`\n            },\n            // octal-literal\n            {\n                match: /\\b0o([0-7]_*)+\\b/\n            },\n            // binary-literal\n            {\n                match: /\\b0b([01]_*)+\\b/\n            }\n        ]\n    };\n    // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_string-literal\n    const ESCAPED_CHARACTER = (rawDelimiter = \"\")=>({\n            className: \"subst\",\n            variants: [\n                {\n                    match: concat(/\\\\/, rawDelimiter, /[0\\\\tnr\"']/)\n                },\n                {\n                    match: concat(/\\\\/, rawDelimiter, /u\\{[0-9a-fA-F]{1,8}\\}/)\n                }\n            ]\n        });\n    const ESCAPED_NEWLINE = (rawDelimiter = \"\")=>({\n            className: \"subst\",\n            match: concat(/\\\\/, rawDelimiter, /[\\t ]*(?:[\\r\\n]|\\r\\n)/)\n        });\n    const INTERPOLATION = (rawDelimiter = \"\")=>({\n            className: \"subst\",\n            label: \"interpol\",\n            begin: concat(/\\\\/, rawDelimiter, /\\(/),\n            end: /\\)/\n        });\n    const MULTILINE_STRING = (rawDelimiter = \"\")=>({\n            begin: concat(rawDelimiter, /\"\"\"/),\n            end: concat(/\"\"\"/, rawDelimiter),\n            contains: [\n                ESCAPED_CHARACTER(rawDelimiter),\n                ESCAPED_NEWLINE(rawDelimiter),\n                INTERPOLATION(rawDelimiter)\n            ]\n        });\n    const SINGLE_LINE_STRING = (rawDelimiter = \"\")=>({\n            begin: concat(rawDelimiter, /\"/),\n            end: concat(/\"/, rawDelimiter),\n            contains: [\n                ESCAPED_CHARACTER(rawDelimiter),\n                INTERPOLATION(rawDelimiter)\n            ]\n        });\n    const STRING = {\n        className: \"string\",\n        variants: [\n            MULTILINE_STRING(),\n            MULTILINE_STRING(\"#\"),\n            MULTILINE_STRING(\"##\"),\n            MULTILINE_STRING(\"###\"),\n            SINGLE_LINE_STRING(),\n            SINGLE_LINE_STRING(\"#\"),\n            SINGLE_LINE_STRING(\"##\"),\n            SINGLE_LINE_STRING(\"###\")\n        ]\n    };\n    const REGEXP_CONTENTS = [\n        hljs.BACKSLASH_ESCAPE,\n        {\n            begin: /\\[/,\n            end: /\\]/,\n            relevance: 0,\n            contains: [\n                hljs.BACKSLASH_ESCAPE\n            ]\n        }\n    ];\n    const BARE_REGEXP_LITERAL = {\n        begin: /\\/[^\\s](?=[^/\\n]*\\/)/,\n        end: /\\//,\n        contains: REGEXP_CONTENTS\n    };\n    const EXTENDED_REGEXP_LITERAL = (rawDelimiter)=>{\n        const begin = concat(rawDelimiter, /\\//);\n        const end = concat(/\\//, rawDelimiter);\n        return {\n            begin,\n            end,\n            contains: [\n                ...REGEXP_CONTENTS,\n                {\n                    scope: \"comment\",\n                    begin: `#(?!.*${end})`,\n                    end: /$/\n                }\n            ]\n        };\n    };\n    // https://docs.swift.org/swift-book/documentation/the-swift-programming-language/lexicalstructure/#Regular-Expression-Literals\n    const REGEXP = {\n        scope: \"regexp\",\n        variants: [\n            EXTENDED_REGEXP_LITERAL(\"###\"),\n            EXTENDED_REGEXP_LITERAL(\"##\"),\n            EXTENDED_REGEXP_LITERAL(\"#\"),\n            BARE_REGEXP_LITERAL\n        ]\n    };\n    // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID412\n    const QUOTED_IDENTIFIER = {\n        match: concat(/`/, identifier, /`/)\n    };\n    const IMPLICIT_PARAMETER = {\n        className: \"variable\",\n        match: /\\$\\d+/\n    };\n    const PROPERTY_WRAPPER_PROJECTION = {\n        className: \"variable\",\n        match: `\\\\$${identifierCharacter}+`\n    };\n    const IDENTIFIERS = [\n        QUOTED_IDENTIFIER,\n        IMPLICIT_PARAMETER,\n        PROPERTY_WRAPPER_PROJECTION\n    ];\n    // https://docs.swift.org/swift-book/ReferenceManual/Attributes.html\n    const AVAILABLE_ATTRIBUTE = {\n        match: /(@|#(un)?)available/,\n        scope: \"keyword\",\n        starts: {\n            contains: [\n                {\n                    begin: /\\(/,\n                    end: /\\)/,\n                    keywords: availabilityKeywords,\n                    contains: [\n                        ...OPERATORS,\n                        NUMBER,\n                        STRING\n                    ]\n                }\n            ]\n        }\n    };\n    const KEYWORD_ATTRIBUTE = {\n        scope: \"keyword\",\n        match: concat(/@/, either(...keywordAttributes), lookahead(either(/\\(/, /\\s+/)))\n    };\n    const USER_DEFINED_ATTRIBUTE = {\n        scope: \"meta\",\n        match: concat(/@/, identifier)\n    };\n    const ATTRIBUTES = [\n        AVAILABLE_ATTRIBUTE,\n        KEYWORD_ATTRIBUTE,\n        USER_DEFINED_ATTRIBUTE\n    ];\n    // https://docs.swift.org/swift-book/ReferenceManual/Types.html\n    const TYPE = {\n        match: lookahead(/\\b[A-Z]/),\n        relevance: 0,\n        contains: [\n            {\n                className: \"type\",\n                match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, \"+\")\n            },\n            {\n                className: \"type\",\n                match: typeIdentifier,\n                relevance: 0\n            },\n            {\n                match: /[?!]+/,\n                relevance: 0\n            },\n            {\n                match: /\\.\\.\\./,\n                relevance: 0\n            },\n            {\n                match: concat(/\\s+&\\s+/, lookahead(typeIdentifier)),\n                relevance: 0\n            }\n        ]\n    };\n    const GENERIC_ARGUMENTS = {\n        begin: /</,\n        end: />/,\n        keywords: KEYWORDS,\n        contains: [\n            ...COMMENTS,\n            ...KEYWORD_MODES,\n            ...ATTRIBUTES,\n            OPERATOR_GUARD,\n            TYPE\n        ]\n    };\n    TYPE.contains.push(GENERIC_ARGUMENTS);\n    // https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552\n    // Prevents element names from being highlighted as keywords.\n    const TUPLE_ELEMENT_NAME = {\n        match: concat(identifier, /\\s*:/),\n        keywords: \"_|0\",\n        relevance: 0\n    };\n    // Matches tuples as well as the parameter list of a function type.\n    const TUPLE = {\n        begin: /\\(/,\n        end: /\\)/,\n        relevance: 0,\n        keywords: KEYWORDS,\n        contains: [\n            \"self\",\n            TUPLE_ELEMENT_NAME,\n            ...COMMENTS,\n            REGEXP,\n            ...KEYWORD_MODES,\n            ...BUILT_INS,\n            ...OPERATORS,\n            NUMBER,\n            STRING,\n            ...IDENTIFIERS,\n            ...ATTRIBUTES,\n            TYPE\n        ]\n    };\n    const GENERIC_PARAMETERS = {\n        begin: /</,\n        end: />/,\n        keywords: \"repeat each\",\n        contains: [\n            ...COMMENTS,\n            TYPE\n        ]\n    };\n    const FUNCTION_PARAMETER_NAME = {\n        begin: either(lookahead(concat(identifier, /\\s*:/)), lookahead(concat(identifier, /\\s+/, identifier, /\\s*:/))),\n        end: /:/,\n        relevance: 0,\n        contains: [\n            {\n                className: \"keyword\",\n                match: /\\b_\\b/\n            },\n            {\n                className: \"params\",\n                match: identifier\n            }\n        ]\n    };\n    const FUNCTION_PARAMETERS = {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        contains: [\n            FUNCTION_PARAMETER_NAME,\n            ...COMMENTS,\n            ...KEYWORD_MODES,\n            ...OPERATORS,\n            NUMBER,\n            STRING,\n            ...ATTRIBUTES,\n            TYPE,\n            TUPLE\n        ],\n        endsParent: true,\n        illegal: /[\"']/\n    };\n    // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362\n    // https://docs.swift.org/swift-book/documentation/the-swift-programming-language/declarations/#Macro-Declaration\n    const FUNCTION_OR_MACRO = {\n        match: [\n            /(func|macro)/,\n            /\\s+/,\n            either(QUOTED_IDENTIFIER.match, identifier, operator)\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        contains: [\n            GENERIC_PARAMETERS,\n            FUNCTION_PARAMETERS,\n            WHITESPACE\n        ],\n        illegal: [\n            /\\[/,\n            /%/\n        ]\n    };\n    // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID375\n    // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID379\n    const INIT_SUBSCRIPT = {\n        match: [\n            /\\b(?:subscript|init[?!]?)/,\n            /\\s*(?=[<(])/\n        ],\n        className: {\n            1: \"keyword\"\n        },\n        contains: [\n            GENERIC_PARAMETERS,\n            FUNCTION_PARAMETERS,\n            WHITESPACE\n        ],\n        illegal: /\\[|%/\n    };\n    // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380\n    const OPERATOR_DECLARATION = {\n        match: [\n            /operator/,\n            /\\s+/,\n            operator\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title\"\n        }\n    };\n    // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID550\n    const PRECEDENCEGROUP = {\n        begin: [\n            /precedencegroup/,\n            /\\s+/,\n            typeIdentifier\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title\"\n        },\n        contains: [\n            TYPE\n        ],\n        keywords: [\n            ...precedencegroupKeywords,\n            ...literals\n        ],\n        end: /}/\n    };\n    const CLASS_FUNC_DECLARATION = {\n        match: [\n            /class\\b/,\n            /\\s+/,\n            /func\\b/,\n            /\\s+/,\n            /\\b[A-Za-z_][A-Za-z0-9_]*\\b/\n        ],\n        scope: {\n            1: \"keyword\",\n            3: \"keyword\",\n            5: \"title.function\"\n        }\n    };\n    const CLASS_VAR_DECLARATION = {\n        match: [\n            /class\\b/,\n            /\\s+/,\n            /var\\b/\n        ],\n        scope: {\n            1: \"keyword\",\n            3: \"keyword\"\n        }\n    };\n    const TYPE_DECLARATION = {\n        begin: [\n            /(struct|protocol|class|extension|enum|actor)/,\n            /\\s+/,\n            identifier,\n            /\\s*/\n        ],\n        beginScope: {\n            1: \"keyword\",\n            3: \"title.class\"\n        },\n        keywords: KEYWORDS,\n        contains: [\n            GENERIC_PARAMETERS,\n            ...KEYWORD_MODES,\n            {\n                begin: /:/,\n                end: /\\{/,\n                keywords: KEYWORDS,\n                contains: [\n                    {\n                        scope: \"title.class.inherited\",\n                        match: typeIdentifier\n                    },\n                    ...KEYWORD_MODES\n                ],\n                relevance: 0\n            }\n        ]\n    };\n    // Add supported submodes to string interpolation.\n    for (const variant of STRING.variants){\n        const interpolation = variant.contains.find((mode)=>mode.label === \"interpol\");\n        // TODO: Interpolation can contain any expression, so there's room for improvement here.\n        interpolation.keywords = KEYWORDS;\n        const submodes = [\n            ...KEYWORD_MODES,\n            ...BUILT_INS,\n            ...OPERATORS,\n            NUMBER,\n            STRING,\n            ...IDENTIFIERS\n        ];\n        interpolation.contains = [\n            ...submodes,\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                contains: [\n                    \"self\",\n                    ...submodes\n                ]\n            }\n        ];\n    }\n    return {\n        name: \"Swift\",\n        keywords: KEYWORDS,\n        contains: [\n            ...COMMENTS,\n            FUNCTION_OR_MACRO,\n            INIT_SUBSCRIPT,\n            CLASS_FUNC_DECLARATION,\n            CLASS_VAR_DECLARATION,\n            TYPE_DECLARATION,\n            OPERATOR_DECLARATION,\n            PRECEDENCEGROUP,\n            {\n                beginKeywords: \"import\",\n                end: /$/,\n                contains: [\n                    ...COMMENTS\n                ],\n                relevance: 0\n            },\n            REGEXP,\n            ...KEYWORD_MODES,\n            ...BUILT_INS,\n            ...OPERATORS,\n            NUMBER,\n            STRING,\n            ...IDENTIFIERS,\n            ...ATTRIBUTES,\n            TYPE,\n            TUPLE\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/swift.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/typescript.js":
/*!**************************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/typescript.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ typescript)\n/* harmony export */ });\nconst IDENT_RE = \"[A-Za-z$_][0-9A-Za-z$_]*\";\nconst KEYWORDS = [\n    \"as\",\n    \"in\",\n    \"of\",\n    \"if\",\n    \"for\",\n    \"while\",\n    \"finally\",\n    \"var\",\n    \"new\",\n    \"function\",\n    \"do\",\n    \"return\",\n    \"void\",\n    \"else\",\n    \"break\",\n    \"catch\",\n    \"instanceof\",\n    \"with\",\n    \"throw\",\n    \"case\",\n    \"default\",\n    \"try\",\n    \"switch\",\n    \"continue\",\n    \"typeof\",\n    \"delete\",\n    \"let\",\n    \"yield\",\n    \"const\",\n    \"class\",\n    // JS handles these with a special rule\n    // \"get\",\n    // \"set\",\n    \"debugger\",\n    \"async\",\n    \"await\",\n    \"static\",\n    \"import\",\n    \"from\",\n    \"export\",\n    \"extends\",\n    // It's reached stage 3, which is \"recommended for implementation\":\n    \"using\"\n];\nconst LITERALS = [\n    \"true\",\n    \"false\",\n    \"null\",\n    \"undefined\",\n    \"NaN\",\n    \"Infinity\"\n];\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\nconst TYPES = [\n    // Fundamental objects\n    \"Object\",\n    \"Function\",\n    \"Boolean\",\n    \"Symbol\",\n    // numbers and dates\n    \"Math\",\n    \"Date\",\n    \"Number\",\n    \"BigInt\",\n    // text\n    \"String\",\n    \"RegExp\",\n    // Indexed collections\n    \"Array\",\n    \"Float32Array\",\n    \"Float64Array\",\n    \"Int8Array\",\n    \"Uint8Array\",\n    \"Uint8ClampedArray\",\n    \"Int16Array\",\n    \"Int32Array\",\n    \"Uint16Array\",\n    \"Uint32Array\",\n    \"BigInt64Array\",\n    \"BigUint64Array\",\n    // Keyed collections\n    \"Set\",\n    \"Map\",\n    \"WeakSet\",\n    \"WeakMap\",\n    // Structured data\n    \"ArrayBuffer\",\n    \"SharedArrayBuffer\",\n    \"Atomics\",\n    \"DataView\",\n    \"JSON\",\n    // Control abstraction objects\n    \"Promise\",\n    \"Generator\",\n    \"GeneratorFunction\",\n    \"AsyncFunction\",\n    // Reflection\n    \"Reflect\",\n    \"Proxy\",\n    // Internationalization\n    \"Intl\",\n    // WebAssembly\n    \"WebAssembly\"\n];\nconst ERROR_TYPES = [\n    \"Error\",\n    \"EvalError\",\n    \"InternalError\",\n    \"RangeError\",\n    \"ReferenceError\",\n    \"SyntaxError\",\n    \"TypeError\",\n    \"URIError\"\n];\nconst BUILT_IN_GLOBALS = [\n    \"setInterval\",\n    \"setTimeout\",\n    \"clearInterval\",\n    \"clearTimeout\",\n    \"require\",\n    \"exports\",\n    \"eval\",\n    \"isFinite\",\n    \"isNaN\",\n    \"parseFloat\",\n    \"parseInt\",\n    \"decodeURI\",\n    \"decodeURIComponent\",\n    \"encodeURI\",\n    \"encodeURIComponent\",\n    \"escape\",\n    \"unescape\"\n];\nconst BUILT_IN_VARIABLES = [\n    \"arguments\",\n    \"this\",\n    \"super\",\n    \"console\",\n    \"window\",\n    \"document\",\n    \"localStorage\",\n    \"sessionStorage\",\n    \"module\",\n    \"global\" // Node.js\n];\nconst BUILT_INS = [].concat(BUILT_IN_GLOBALS, TYPES, ERROR_TYPES);\n/*\nLanguage: JavaScript\nDescription: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.\nCategory: common, scripting, web\nWebsite: https://developer.mozilla.org/en-US/docs/Web/JavaScript\n*/ /** @type LanguageFn */ function javascript(hljs) {\n    const regex = hljs.regex;\n    /**\n   * Takes a string like \"<Booger\" and checks to see\n   * if we can find a matching \"</Booger\" later in the\n   * content.\n   * @param {RegExpMatchArray} match\n   * @param {{after:number}} param1\n   */ const hasClosingTag = (match, { after })=>{\n        const tag = \"</\" + match[0].slice(1);\n        const pos = match.input.indexOf(tag, after);\n        return pos !== -1;\n    };\n    const IDENT_RE$1 = IDENT_RE;\n    const FRAGMENT = {\n        begin: \"<>\",\n        end: \"</>\"\n    };\n    // to avoid some special cases inside isTrulyOpeningTag\n    const XML_SELF_CLOSING = /<[A-Za-z0-9\\\\._:-]+\\s*\\/>/;\n    const XML_TAG = {\n        begin: /<[A-Za-z0-9\\\\._:-]+/,\n        end: /\\/[A-Za-z0-9\\\\._:-]+>|\\/>/,\n        /**\n     * @param {RegExpMatchArray} match\n     * @param {CallbackResponse} response\n     */ isTrulyOpeningTag: (match, response)=>{\n            const afterMatchIndex = match[0].length + match.index;\n            const nextChar = match.input[afterMatchIndex];\n            if (// HTML should not include another raw `<` inside a tag\n            // nested type?\n            // `<Array<Array<number>>`, etc.\n            nextChar === \"<\" || // the , gives away that this is not HTML\n            // `<T, A extends keyof T, V>`\n            nextChar === \",\") {\n                response.ignoreMatch();\n                return;\n            }\n            // `<something>`\n            // Quite possibly a tag, lets look for a matching closing tag...\n            if (nextChar === \">\") {\n                // if we cannot find a matching closing tag, then we\n                // will ignore it\n                if (!hasClosingTag(match, {\n                    after: afterMatchIndex\n                })) {\n                    response.ignoreMatch();\n                }\n            }\n            // `<blah />` (self-closing)\n            // handled by simpleSelfClosing rule\n            let m;\n            const afterMatch = match.input.substring(afterMatchIndex);\n            // some more template typing stuff\n            //  <T = any>(key?: string) => Modify<\n            if (m = afterMatch.match(/^\\s*=/)) {\n                response.ignoreMatch();\n                return;\n            }\n            // `<From extends string>`\n            // technically this could be HTML, but it smells like a type\n            // NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276\n            if (m = afterMatch.match(/^\\s+extends\\s+/)) {\n                if (m.index === 0) {\n                    response.ignoreMatch();\n                    // eslint-disable-next-line no-useless-return\n                    return;\n                }\n            }\n        }\n    };\n    const KEYWORDS$1 = {\n        $pattern: IDENT_RE,\n        keyword: KEYWORDS,\n        literal: LITERALS,\n        built_in: BUILT_INS,\n        \"variable.language\": BUILT_IN_VARIABLES\n    };\n    // https://tc39.es/ecma262/#sec-literals-numeric-literals\n    const decimalDigits = \"[0-9](_?[0-9])*\";\n    const frac = `\\\\.(${decimalDigits})`;\n    // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral\n    // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n    const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;\n    const NUMBER = {\n        className: \"number\",\n        variants: [\n            // DecimalLiteral\n            {\n                begin: `(\\\\b(${decimalInteger})((${frac})|\\\\.)?|(${frac}))` + `[eE][+-]?(${decimalDigits})\\\\b`\n            },\n            {\n                begin: `\\\\b(${decimalInteger})\\\\b((${frac})\\\\b|\\\\.)?|(${frac})\\\\b`\n            },\n            // DecimalBigIntegerLiteral\n            {\n                begin: `\\\\b(0|[1-9](_?[0-9])*)n\\\\b`\n            },\n            // NonDecimalIntegerLiteral\n            {\n                begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[bB][0-1](_?[0-1])*n?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[oO][0-7](_?[0-7])*n?\\\\b\"\n            },\n            // LegacyOctalIntegerLiteral (does not include underscore separators)\n            // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n            {\n                begin: \"\\\\b0[0-7]+n?\\\\b\"\n            }\n        ],\n        relevance: 0\n    };\n    const SUBST = {\n        className: \"subst\",\n        begin: \"\\\\$\\\\{\",\n        end: \"\\\\}\",\n        keywords: KEYWORDS$1,\n        contains: [] // defined later\n    };\n    const HTML_TEMPLATE = {\n        begin: \".?html`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"xml\"\n        }\n    };\n    const CSS_TEMPLATE = {\n        begin: \".?css`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"css\"\n        }\n    };\n    const GRAPHQL_TEMPLATE = {\n        begin: \".?gql`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"graphql\"\n        }\n    };\n    const TEMPLATE_STRING = {\n        className: \"string\",\n        begin: \"`\",\n        end: \"`\",\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            SUBST\n        ]\n    };\n    const JSDOC_COMMENT = hljs.COMMENT(/\\/\\*\\*(?!\\/)/, \"\\\\*/\", {\n        relevance: 0,\n        contains: [\n            {\n                begin: \"(?=@[A-Za-z]+)\",\n                relevance: 0,\n                contains: [\n                    {\n                        className: \"doctag\",\n                        begin: \"@[A-Za-z]+\"\n                    },\n                    {\n                        className: \"type\",\n                        begin: \"\\\\{\",\n                        end: \"\\\\}\",\n                        excludeEnd: true,\n                        excludeBegin: true,\n                        relevance: 0\n                    },\n                    {\n                        className: \"variable\",\n                        begin: IDENT_RE$1 + \"(?=\\\\s*(-)|$)\",\n                        endsParent: true,\n                        relevance: 0\n                    },\n                    // eat spaces (not newlines) so we can find\n                    // types or variables\n                    {\n                        begin: /(?=[^\\n])\\s/,\n                        relevance: 0\n                    }\n                ]\n            }\n        ]\n    });\n    const COMMENT = {\n        className: \"comment\",\n        variants: [\n            JSDOC_COMMENT,\n            hljs.C_BLOCK_COMMENT_MODE,\n            hljs.C_LINE_COMMENT_MODE\n        ]\n    };\n    const SUBST_INTERNALS = [\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE,\n        HTML_TEMPLATE,\n        CSS_TEMPLATE,\n        GRAPHQL_TEMPLATE,\n        TEMPLATE_STRING,\n        // Skip numbers when they are part of a variable name\n        {\n            match: /\\$\\d+/\n        },\n        NUMBER\n    ];\n    SUBST.contains = SUBST_INTERNALS.concat({\n        // we need to pair up {} inside our subst to prevent\n        // it from ending too early by matching another }\n        begin: /\\{/,\n        end: /\\}/,\n        keywords: KEYWORDS$1,\n        contains: [\n            \"self\"\n        ].concat(SUBST_INTERNALS)\n    });\n    const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);\n    const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([\n        // eat recursive parens in sub expressions\n        {\n            begin: /(\\s*)\\(/,\n            end: /\\)/,\n            keywords: KEYWORDS$1,\n            contains: [\n                \"self\"\n            ].concat(SUBST_AND_COMMENTS)\n        }\n    ]);\n    const PARAMS = {\n        className: \"params\",\n        // convert this to negative lookbehind in v12\n        begin: /(\\s*)\\(/,\n        end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: KEYWORDS$1,\n        contains: PARAMS_CONTAINS\n    };\n    // ES6 classes\n    const CLASS_OR_EXTENDS = {\n        variants: [\n            // class Car extends vehicle\n            {\n                match: [\n                    /class/,\n                    /\\s+/,\n                    IDENT_RE$1,\n                    /\\s+/,\n                    /extends/,\n                    /\\s+/,\n                    regex.concat(IDENT_RE$1, \"(\", regex.concat(/\\./, IDENT_RE$1), \")*\")\n                ],\n                scope: {\n                    1: \"keyword\",\n                    3: \"title.class\",\n                    5: \"keyword\",\n                    7: \"title.class.inherited\"\n                }\n            },\n            // class Car\n            {\n                match: [\n                    /class/,\n                    /\\s+/,\n                    IDENT_RE$1\n                ],\n                scope: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                }\n            }\n        ]\n    };\n    const CLASS_REFERENCE = {\n        relevance: 0,\n        match: regex.either(// Hard coded exceptions\n        /\\bJSON/, // Float32Array, OutT\n        /\\b[A-Z][a-z]+([A-Z][a-z]*|\\d)*/, // CSSFactory, CSSFactoryT\n        /\\b[A-Z]{2,}([A-Z][a-z]+|\\d)+([A-Z][a-z]*)*/, // FPs, FPsT\n        /\\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\\d)*([A-Z][a-z]*)*/),\n        className: \"title.class\",\n        keywords: {\n            _: [\n                // se we still get relevance credit for JS library classes\n                ...TYPES,\n                ...ERROR_TYPES\n            ]\n        }\n    };\n    const USE_STRICT = {\n        label: \"use_strict\",\n        className: \"meta\",\n        relevance: 10,\n        begin: /^\\s*['\"]use (strict|asm)['\"]/\n    };\n    const FUNCTION_DEFINITION = {\n        variants: [\n            {\n                match: [\n                    /function/,\n                    /\\s+/,\n                    IDENT_RE$1,\n                    /(?=\\s*\\()/\n                ]\n            },\n            // anonymous function\n            {\n                match: [\n                    /function/,\n                    /\\s*(?=\\()/\n                ]\n            }\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        label: \"func.def\",\n        contains: [\n            PARAMS\n        ],\n        illegal: /%/\n    };\n    const UPPER_CASE_CONSTANT = {\n        relevance: 0,\n        match: /\\b[A-Z][A-Z_0-9]+\\b/,\n        className: \"variable.constant\"\n    };\n    function noneOf(list) {\n        return regex.concat(\"(?!\", list.join(\"|\"), \")\");\n    }\n    const FUNCTION_CALL = {\n        match: regex.concat(/\\b/, noneOf([\n            ...BUILT_IN_GLOBALS,\n            \"super\",\n            \"import\"\n        ].map((x)=>`${x}\\\\s*\\\\(`)), IDENT_RE$1, regex.lookahead(/\\s*\\(/)),\n        className: \"title.function\",\n        relevance: 0\n    };\n    const PROPERTY_ACCESS = {\n        begin: regex.concat(/\\./, regex.lookahead(regex.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/))),\n        end: IDENT_RE$1,\n        excludeBegin: true,\n        keywords: \"prototype\",\n        className: \"property\",\n        relevance: 0\n    };\n    const GETTER_OR_SETTER = {\n        match: [\n            /get|set/,\n            /\\s+/,\n            IDENT_RE$1,\n            /(?=\\()/\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        contains: [\n            {\n                begin: /\\(\\)/\n            },\n            PARAMS\n        ]\n    };\n    const FUNC_LEAD_IN_RE = \"(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*\" + \"\\\\)[^()]*)*\" + \"\\\\)[^()]*)*\" + \"\\\\)|\" + hljs.UNDERSCORE_IDENT_RE + \")\\\\s*=>\";\n    const FUNCTION_VARIABLE = {\n        match: [\n            /const|var|let/,\n            /\\s+/,\n            IDENT_RE$1,\n            /\\s*/,\n            /=\\s*/,\n            /(async\\s*)?/,\n            regex.lookahead(FUNC_LEAD_IN_RE)\n        ],\n        keywords: \"async\",\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        contains: [\n            PARAMS\n        ]\n    };\n    return {\n        name: \"JavaScript\",\n        aliases: [\n            \"js\",\n            \"jsx\",\n            \"mjs\",\n            \"cjs\"\n        ],\n        keywords: KEYWORDS$1,\n        // this will be extended by TypeScript\n        exports: {\n            PARAMS_CONTAINS,\n            CLASS_REFERENCE\n        },\n        illegal: /#(?![$_A-z])/,\n        contains: [\n            hljs.SHEBANG({\n                label: \"shebang\",\n                binary: \"node\",\n                relevance: 5\n            }),\n            USE_STRICT,\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE,\n            HTML_TEMPLATE,\n            CSS_TEMPLATE,\n            GRAPHQL_TEMPLATE,\n            TEMPLATE_STRING,\n            COMMENT,\n            // Skip numbers when they are part of a variable name\n            {\n                match: /\\$\\d+/\n            },\n            NUMBER,\n            CLASS_REFERENCE,\n            {\n                scope: \"attr\",\n                match: IDENT_RE$1 + regex.lookahead(\":\"),\n                relevance: 0\n            },\n            FUNCTION_VARIABLE,\n            {\n                begin: \"(\" + hljs.RE_STARTERS_RE + \"|\\\\b(case|return|throw)\\\\b)\\\\s*\",\n                keywords: \"return throw case\",\n                relevance: 0,\n                contains: [\n                    COMMENT,\n                    hljs.REGEXP_MODE,\n                    {\n                        className: \"function\",\n                        // we have to count the parens to make sure we actually have the\n                        // correct bounding ( ) before the =>.  There could be any number of\n                        // sub-expressions inside also surrounded by parens.\n                        begin: FUNC_LEAD_IN_RE,\n                        returnBegin: true,\n                        end: \"\\\\s*=>\",\n                        contains: [\n                            {\n                                className: \"params\",\n                                variants: [\n                                    {\n                                        begin: hljs.UNDERSCORE_IDENT_RE,\n                                        relevance: 0\n                                    },\n                                    {\n                                        className: null,\n                                        begin: /\\(\\s*\\)/,\n                                        skip: true\n                                    },\n                                    {\n                                        begin: /(\\s*)\\(/,\n                                        end: /\\)/,\n                                        excludeBegin: true,\n                                        excludeEnd: true,\n                                        keywords: KEYWORDS$1,\n                                        contains: PARAMS_CONTAINS\n                                    }\n                                ]\n                            }\n                        ]\n                    },\n                    {\n                        begin: /,/,\n                        relevance: 0\n                    },\n                    {\n                        match: /\\s+/,\n                        relevance: 0\n                    },\n                    {\n                        variants: [\n                            {\n                                begin: FRAGMENT.begin,\n                                end: FRAGMENT.end\n                            },\n                            {\n                                match: XML_SELF_CLOSING\n                            },\n                            {\n                                begin: XML_TAG.begin,\n                                // we carefully check the opening tag to see if it truly\n                                // is a tag and not a false positive\n                                \"on:begin\": XML_TAG.isTrulyOpeningTag,\n                                end: XML_TAG.end\n                            }\n                        ],\n                        subLanguage: \"xml\",\n                        contains: [\n                            {\n                                begin: XML_TAG.begin,\n                                end: XML_TAG.end,\n                                skip: true,\n                                contains: [\n                                    \"self\"\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            },\n            FUNCTION_DEFINITION,\n            {\n                // prevent this from getting swallowed up by function\n                // since they appear \"function like\"\n                beginKeywords: \"while if switch catch for\"\n            },\n            {\n                // we have to count the parens to make sure we actually have the correct\n                // bounding ( ).  There could be any number of sub-expressions inside\n                // also surrounded by parens.\n                begin: \"\\\\b(?!function)\" + hljs.UNDERSCORE_IDENT_RE + \"\\\\(\" + // first parens\n                \"[^()]*(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*\" + \"\\\\)[^()]*)*\" + \"\\\\)[^()]*)*\" + \"\\\\)\\\\s*\\\\{\",\n                returnBegin: true,\n                label: \"func.def\",\n                contains: [\n                    PARAMS,\n                    hljs.inherit(hljs.TITLE_MODE, {\n                        begin: IDENT_RE$1,\n                        className: \"title.function\"\n                    })\n                ]\n            },\n            // catch ... so it won't trigger the property rule below\n            {\n                match: /\\.\\.\\./,\n                relevance: 0\n            },\n            PROPERTY_ACCESS,\n            // hack: prevents detection of keywords in some circumstances\n            // .keyword()\n            // $keyword = x\n            {\n                match: \"\\\\$\" + IDENT_RE$1,\n                relevance: 0\n            },\n            {\n                match: [\n                    /\\bconstructor(?=\\s*\\()/\n                ],\n                className: {\n                    1: \"title.function\"\n                },\n                contains: [\n                    PARAMS\n                ]\n            },\n            FUNCTION_CALL,\n            UPPER_CASE_CONSTANT,\n            CLASS_OR_EXTENDS,\n            GETTER_OR_SETTER,\n            {\n                match: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n            }\n        ]\n    };\n}\n/*\nLanguage: TypeScript\nAuthor: Panu Horsmalahti <panu.horsmalahti@iki.fi>\nContributors: Ike Ku <dempfi@yahoo.com>\nDescription: TypeScript is a strict superset of JavaScript\nWebsite: https://www.typescriptlang.org\nCategory: common, scripting\n*/ /** @type LanguageFn */ function typescript(hljs) {\n    const regex = hljs.regex;\n    const tsLanguage = javascript(hljs);\n    const IDENT_RE$1 = IDENT_RE;\n    const TYPES = [\n        \"any\",\n        \"void\",\n        \"number\",\n        \"boolean\",\n        \"string\",\n        \"object\",\n        \"never\",\n        \"symbol\",\n        \"bigint\",\n        \"unknown\"\n    ];\n    const NAMESPACE = {\n        begin: [\n            /namespace/,\n            /\\s+/,\n            hljs.IDENT_RE\n        ],\n        beginScope: {\n            1: \"keyword\",\n            3: \"title.class\"\n        }\n    };\n    const INTERFACE = {\n        beginKeywords: \"interface\",\n        end: /\\{/,\n        excludeEnd: true,\n        keywords: {\n            keyword: \"interface extends\",\n            built_in: TYPES\n        },\n        contains: [\n            tsLanguage.exports.CLASS_REFERENCE\n        ]\n    };\n    const USE_STRICT = {\n        className: \"meta\",\n        relevance: 10,\n        begin: /^\\s*['\"]use strict['\"]/\n    };\n    const TS_SPECIFIC_KEYWORDS = [\n        \"type\",\n        // \"namespace\",\n        \"interface\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"implements\",\n        \"declare\",\n        \"abstract\",\n        \"readonly\",\n        \"enum\",\n        \"override\",\n        \"satisfies\"\n    ];\n    /*\n    namespace is a TS keyword but it's fine to use it as a variable name too.\n    const message = 'foo';\n    const namespace = 'bar';\n  */ const KEYWORDS$1 = {\n        $pattern: IDENT_RE,\n        keyword: KEYWORDS.concat(TS_SPECIFIC_KEYWORDS),\n        literal: LITERALS,\n        built_in: BUILT_INS.concat(TYPES),\n        \"variable.language\": BUILT_IN_VARIABLES\n    };\n    const DECORATOR = {\n        className: \"meta\",\n        begin: \"@\" + IDENT_RE$1\n    };\n    const swapMode = (mode, label, replacement)=>{\n        const indx = mode.contains.findIndex((m)=>m.label === label);\n        if (indx === -1) {\n            throw new Error(\"can not find mode to replace\");\n        }\n        mode.contains.splice(indx, 1, replacement);\n    };\n    // this should update anywhere keywords is used since\n    // it will be the same actual JS object\n    Object.assign(tsLanguage.keywords, KEYWORDS$1);\n    tsLanguage.exports.PARAMS_CONTAINS.push(DECORATOR);\n    // highlight the function params\n    const ATTRIBUTE_HIGHLIGHT = tsLanguage.contains.find((c)=>c.scope === \"attr\");\n    // take default attr rule and extend it to support optionals\n    const OPTIONAL_KEY_OR_ARGUMENT = Object.assign({}, ATTRIBUTE_HIGHLIGHT, {\n        match: regex.concat(IDENT_RE$1, regex.lookahead(/\\s*\\?:/))\n    });\n    tsLanguage.exports.PARAMS_CONTAINS.push([\n        tsLanguage.exports.CLASS_REFERENCE,\n        ATTRIBUTE_HIGHLIGHT,\n        OPTIONAL_KEY_OR_ARGUMENT\n    ]);\n    // Add the optional property assignment highlighting for objects or classes\n    tsLanguage.contains = tsLanguage.contains.concat([\n        DECORATOR,\n        NAMESPACE,\n        INTERFACE,\n        OPTIONAL_KEY_OR_ARGUMENT\n    ]);\n    // TS gets a simpler shebang rule than JS\n    swapMode(tsLanguage, \"shebang\", hljs.SHEBANG());\n    // JS use strict rule purposely excludes `asm` which makes no sense\n    swapMode(tsLanguage, \"use_strict\", USE_STRICT);\n    const functionDeclaration = tsLanguage.contains.find((m)=>m.label === \"func.def\");\n    functionDeclaration.relevance = 0; // () => {} is more typical in TypeScript\n    Object.assign(tsLanguage, {\n        name: \"TypeScript\",\n        aliases: [\n            \"ts\",\n            \"tsx\",\n            \"mts\",\n            \"cts\"\n        ]\n    });\n    return tsLanguage;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/typescript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/vbnet.js":
/*!*********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/vbnet.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ vbnet)\n/* harmony export */ });\n/*\nLanguage: Visual Basic .NET\nDescription: Visual Basic .NET (VB.NET) is a multi-paradigm, object-oriented programming language, implemented on the .NET Framework.\nAuthors: Poren Chiang <ren.chiang@gmail.com>, Jan Pilzer\nWebsite: https://docs.microsoft.com/dotnet/visual-basic/getting-started\nCategory: common\n*/ /** @type LanguageFn */ function vbnet(hljs) {\n    const regex = hljs.regex;\n    /**\n   * Character Literal\n   * Either a single character (\"a\"C) or an escaped double quote (\"\"\"\"C).\n   */ const CHARACTER = {\n        className: \"string\",\n        begin: /\"(\"\"|[^/n])\"C\\b/\n    };\n    const STRING = {\n        className: \"string\",\n        begin: /\"/,\n        end: /\"/,\n        illegal: /\\n/,\n        contains: [\n            {\n                // double quote escape\n                begin: /\"\"/\n            }\n        ]\n    };\n    /** Date Literals consist of a date, a time, or both separated by whitespace, surrounded by # */ const MM_DD_YYYY = /\\d{1,2}\\/\\d{1,2}\\/\\d{4}/;\n    const YYYY_MM_DD = /\\d{4}-\\d{1,2}-\\d{1,2}/;\n    const TIME_12H = /(\\d|1[012])(:\\d+){0,2} *(AM|PM)/;\n    const TIME_24H = /\\d{1,2}(:\\d{1,2}){1,2}/;\n    const DATE = {\n        className: \"literal\",\n        variants: [\n            {\n                // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)\n                begin: regex.concat(/# */, regex.either(YYYY_MM_DD, MM_DD_YYYY), / *#/)\n            },\n            {\n                // #H:mm[:ss]# (24h Time)\n                begin: regex.concat(/# */, TIME_24H, / *#/)\n            },\n            {\n                // #h[:mm[:ss]] A# (12h Time)\n                begin: regex.concat(/# */, TIME_12H, / *#/)\n            },\n            {\n                // date plus time\n                begin: regex.concat(/# */, regex.either(YYYY_MM_DD, MM_DD_YYYY), / +/, regex.either(TIME_12H, TIME_24H), / *#/)\n            }\n        ]\n    };\n    const NUMBER = {\n        className: \"number\",\n        relevance: 0,\n        variants: [\n            {\n                // Float\n                begin: /\\b\\d[\\d_]*((\\.[\\d_]+(E[+-]?[\\d_]+)?)|(E[+-]?[\\d_]+))[RFD@!#]?/\n            },\n            {\n                // Integer (base 10)\n                begin: /\\b\\d[\\d_]*((U?[SIL])|[%&])?/\n            },\n            {\n                // Integer (base 16)\n                begin: /&H[\\dA-F_]+((U?[SIL])|[%&])?/\n            },\n            {\n                // Integer (base 8)\n                begin: /&O[0-7_]+((U?[SIL])|[%&])?/\n            },\n            {\n                // Integer (base 2)\n                begin: /&B[01_]+((U?[SIL])|[%&])?/\n            }\n        ]\n    };\n    const LABEL = {\n        className: \"label\",\n        begin: /^\\w+:/\n    };\n    const DOC_COMMENT = hljs.COMMENT(/'''/, /$/, {\n        contains: [\n            {\n                className: \"doctag\",\n                begin: /<\\/?/,\n                end: />/\n            }\n        ]\n    });\n    const COMMENT = hljs.COMMENT(null, /$/, {\n        variants: [\n            {\n                begin: /'/\n            },\n            {\n                // TODO: Use multi-class for leading spaces\n                begin: /([\\t ]|^)REM(?=\\s)/\n            }\n        ]\n    });\n    const DIRECTIVES = {\n        className: \"meta\",\n        // TODO: Use multi-class for indentation once available\n        begin: /[\\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\\b/,\n        end: /$/,\n        keywords: {\n            keyword: \"const disable else elseif enable end externalsource if region then\"\n        },\n        contains: [\n            COMMENT\n        ]\n    };\n    return {\n        name: \"Visual Basic .NET\",\n        aliases: [\n            \"vb\"\n        ],\n        case_insensitive: true,\n        classNameAliases: {\n            label: \"symbol\"\n        },\n        keywords: {\n            keyword: \"addhandler alias aggregate ansi as async assembly auto binary by byref byval \" /* a-b */  + \"call case catch class compare const continue custom declare default delegate dim distinct do \" /* c-d */  + \"each equals else elseif end enum erase error event exit explicit finally for friend from function \" /* e-f */  + \"get global goto group handles if implements imports in inherits interface into iterator \" /* g-i */  + \"join key let lib loop me mid module mustinherit mustoverride mybase myclass \" /* j-m */  + \"namespace narrowing new next notinheritable notoverridable \" /* n */  + \"of off on operator option optional order overloads overridable overrides \" /* o */  + \"paramarray partial preserve private property protected public \" /* p */  + \"raiseevent readonly redim removehandler resume return \" /* r */  + \"select set shadows shared skip static step stop structure strict sub synclock \" /* s */  + \"take text then throw to try unicode until using when where while widening with withevents writeonly yield\" /* t-y */ ,\n            built_in: // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators\n            \"addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor \" + \"cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort\",\n            type: // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types\n            \"boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort\",\n            literal: \"true false nothing\"\n        },\n        illegal: \"//|\\\\{|\\\\}|endif|gosub|variant|wend|^\\\\$ \" /* reserved deprecated keywords */ ,\n        contains: [\n            CHARACTER,\n            STRING,\n            DATE,\n            NUMBER,\n            LABEL,\n            DOC_COMMENT,\n            COMMENT,\n            DIRECTIVES\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/vbnet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/wasm.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/wasm.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ wasm)\n/* harmony export */ });\n/*\nLanguage: WebAssembly\nWebsite: https://webassembly.org\nDescription:  Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.\nCategory: web, common\nAudit: 2020\n*/ /** @type LanguageFn */ function wasm(hljs) {\n    hljs.regex;\n    const BLOCK_COMMENT = hljs.COMMENT(/\\(;/, /;\\)/);\n    BLOCK_COMMENT.contains.push(\"self\");\n    const LINE_COMMENT = hljs.COMMENT(/;;/, /$/);\n    const KWS = [\n        \"anyfunc\",\n        \"block\",\n        \"br\",\n        \"br_if\",\n        \"br_table\",\n        \"call\",\n        \"call_indirect\",\n        \"data\",\n        \"drop\",\n        \"elem\",\n        \"else\",\n        \"end\",\n        \"export\",\n        \"func\",\n        \"global.get\",\n        \"global.set\",\n        \"local.get\",\n        \"local.set\",\n        \"local.tee\",\n        \"get_global\",\n        \"get_local\",\n        \"global\",\n        \"if\",\n        \"import\",\n        \"local\",\n        \"loop\",\n        \"memory\",\n        \"memory.grow\",\n        \"memory.size\",\n        \"module\",\n        \"mut\",\n        \"nop\",\n        \"offset\",\n        \"param\",\n        \"result\",\n        \"return\",\n        \"select\",\n        \"set_global\",\n        \"set_local\",\n        \"start\",\n        \"table\",\n        \"tee_local\",\n        \"then\",\n        \"type\",\n        \"unreachable\"\n    ];\n    const FUNCTION_REFERENCE = {\n        begin: [\n            /(?:func|call|call_indirect)/,\n            /\\s+/,\n            /\\$[^\\s)]+/\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        }\n    };\n    const ARGUMENT = {\n        className: \"variable\",\n        begin: /\\$[\\w_]+/\n    };\n    const PARENS = {\n        match: /(\\((?!;)|\\))+/,\n        className: \"punctuation\",\n        relevance: 0\n    };\n    const NUMBER = {\n        className: \"number\",\n        relevance: 0,\n        // borrowed from Prism, TODO: split out into variants\n        match: /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/\n    };\n    const TYPE = {\n        // look-ahead prevents us from gobbling up opcodes\n        match: /(i32|i64|f32|f64)(?!\\.)/,\n        className: \"type\"\n    };\n    const MATH_OPERATIONS = {\n        className: \"keyword\",\n        // borrowed from Prism, TODO: split out into variants\n        match: /\\b(f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))\\b/\n    };\n    const OFFSET_ALIGN = {\n        match: [\n            /(?:offset|align)/,\n            /\\s*/,\n            /=/\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"operator\"\n        }\n    };\n    return {\n        name: \"WebAssembly\",\n        keywords: {\n            $pattern: /[\\w.]+/,\n            keyword: KWS\n        },\n        contains: [\n            LINE_COMMENT,\n            BLOCK_COMMENT,\n            OFFSET_ALIGN,\n            ARGUMENT,\n            PARENS,\n            FUNCTION_REFERENCE,\n            hljs.QUOTE_STRING_MODE,\n            TYPE,\n            MATH_OPERATIONS,\n            NUMBER\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy93YXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7O0FBTUEsR0FFQSxxQkFBcUIsR0FDckIsU0FBU0EsS0FBS0MsSUFBSTtJQUNoQkEsS0FBS0MsS0FBSztJQUNWLE1BQU1DLGdCQUFnQkYsS0FBS0csT0FBTyxDQUFDLE9BQU87SUFDMUNELGNBQWNFLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDO0lBQzVCLE1BQU1DLGVBQWVOLEtBQUtHLE9BQU8sQ0FBQyxNQUFNO0lBRXhDLE1BQU1JLE1BQU07UUFDVjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUVELE1BQU1DLHFCQUFxQjtRQUN6QkMsT0FBTztZQUNMO1lBQ0E7WUFDQTtTQUNEO1FBQ0RDLFdBQVc7WUFDVCxHQUFHO1lBQ0gsR0FBRztRQUNMO0lBQ0Y7SUFFQSxNQUFNQyxXQUFXO1FBQ2ZELFdBQVc7UUFDWEQsT0FBTztJQUNUO0lBRUEsTUFBTUcsU0FBUztRQUNiQyxPQUFPO1FBQ1BILFdBQVc7UUFDWEksV0FBVztJQUNiO0lBRUEsTUFBTUMsU0FBUztRQUNiTCxXQUFXO1FBQ1hJLFdBQVc7UUFDWCxxREFBcUQ7UUFDckRELE9BQU87SUFDVDtJQUVBLE1BQU1HLE9BQU87UUFDWCxrREFBa0Q7UUFDbERILE9BQU87UUFDUEgsV0FBVztJQUNiO0lBRUEsTUFBTU8sa0JBQWtCO1FBQ3RCUCxXQUFXO1FBQ1gscURBQXFEO1FBQ3JERyxPQUFPO0lBQ1Q7SUFFQSxNQUFNSyxlQUFlO1FBQ25CTCxPQUFPO1lBQ0w7WUFDQTtZQUNBO1NBQ0Q7UUFDREgsV0FBVztZQUNULEdBQUc7WUFDSCxHQUFHO1FBQ0w7SUFDRjtJQUVBLE9BQU87UUFDTFMsTUFBTTtRQUNOQyxVQUFVO1lBQ1JDLFVBQVU7WUFDVkMsU0FBU2Y7UUFDWDtRQUNBSCxVQUFVO1lBQ1JFO1lBQ0FKO1lBQ0FnQjtZQUNBUDtZQUNBQztZQUNBSjtZQUNBUixLQUFLdUIsaUJBQWlCO1lBQ3RCUDtZQUNBQztZQUNBRjtTQUNEO0lBQ0g7QUFDRjtBQUUyQiIsInNvdXJjZXMiOlsid2VicGFjazovL29tbmktY2hhdC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9oaWdobGlnaHQuanMvZXMvbGFuZ3VhZ2VzL3dhc20uanM/MTM3YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTGFuZ3VhZ2U6IFdlYkFzc2VtYmx5XG5XZWJzaXRlOiBodHRwczovL3dlYmFzc2VtYmx5Lm9yZ1xuRGVzY3JpcHRpb246ICBXYXNtIGlzIGRlc2lnbmVkIGFzIGEgcG9ydGFibGUgY29tcGlsYXRpb24gdGFyZ2V0IGZvciBwcm9ncmFtbWluZyBsYW5ndWFnZXMsIGVuYWJsaW5nIGRlcGxveW1lbnQgb24gdGhlIHdlYiBmb3IgY2xpZW50IGFuZCBzZXJ2ZXIgYXBwbGljYXRpb25zLlxuQ2F0ZWdvcnk6IHdlYiwgY29tbW9uXG5BdWRpdDogMjAyMFxuKi9cblxuLyoqIEB0eXBlIExhbmd1YWdlRm4gKi9cbmZ1bmN0aW9uIHdhc20oaGxqcykge1xuICBobGpzLnJlZ2V4O1xuICBjb25zdCBCTE9DS19DT01NRU5UID0gaGxqcy5DT01NRU5UKC9cXCg7LywgLztcXCkvKTtcbiAgQkxPQ0tfQ09NTUVOVC5jb250YWlucy5wdXNoKFwic2VsZlwiKTtcbiAgY29uc3QgTElORV9DT01NRU5UID0gaGxqcy5DT01NRU5UKC87Oy8sIC8kLyk7XG5cbiAgY29uc3QgS1dTID0gW1xuICAgIFwiYW55ZnVuY1wiLFxuICAgIFwiYmxvY2tcIixcbiAgICBcImJyXCIsXG4gICAgXCJicl9pZlwiLFxuICAgIFwiYnJfdGFibGVcIixcbiAgICBcImNhbGxcIixcbiAgICBcImNhbGxfaW5kaXJlY3RcIixcbiAgICBcImRhdGFcIixcbiAgICBcImRyb3BcIixcbiAgICBcImVsZW1cIixcbiAgICBcImVsc2VcIixcbiAgICBcImVuZFwiLFxuICAgIFwiZXhwb3J0XCIsXG4gICAgXCJmdW5jXCIsXG4gICAgXCJnbG9iYWwuZ2V0XCIsXG4gICAgXCJnbG9iYWwuc2V0XCIsXG4gICAgXCJsb2NhbC5nZXRcIixcbiAgICBcImxvY2FsLnNldFwiLFxuICAgIFwibG9jYWwudGVlXCIsXG4gICAgXCJnZXRfZ2xvYmFsXCIsXG4gICAgXCJnZXRfbG9jYWxcIixcbiAgICBcImdsb2JhbFwiLFxuICAgIFwiaWZcIixcbiAgICBcImltcG9ydFwiLFxuICAgIFwibG9jYWxcIixcbiAgICBcImxvb3BcIixcbiAgICBcIm1lbW9yeVwiLFxuICAgIFwibWVtb3J5Lmdyb3dcIixcbiAgICBcIm1lbW9yeS5zaXplXCIsXG4gICAgXCJtb2R1bGVcIixcbiAgICBcIm11dFwiLFxuICAgIFwibm9wXCIsXG4gICAgXCJvZmZzZXRcIixcbiAgICBcInBhcmFtXCIsXG4gICAgXCJyZXN1bHRcIixcbiAgICBcInJldHVyblwiLFxuICAgIFwic2VsZWN0XCIsXG4gICAgXCJzZXRfZ2xvYmFsXCIsXG4gICAgXCJzZXRfbG9jYWxcIixcbiAgICBcInN0YXJ0XCIsXG4gICAgXCJ0YWJsZVwiLFxuICAgIFwidGVlX2xvY2FsXCIsXG4gICAgXCJ0aGVuXCIsXG4gICAgXCJ0eXBlXCIsXG4gICAgXCJ1bnJlYWNoYWJsZVwiXG4gIF07XG5cbiAgY29uc3QgRlVOQ1RJT05fUkVGRVJFTkNFID0ge1xuICAgIGJlZ2luOiBbXG4gICAgICAvKD86ZnVuY3xjYWxsfGNhbGxfaW5kaXJlY3QpLyxcbiAgICAgIC9cXHMrLyxcbiAgICAgIC9cXCRbXlxccyldKy9cbiAgICBdLFxuICAgIGNsYXNzTmFtZToge1xuICAgICAgMTogXCJrZXl3b3JkXCIsXG4gICAgICAzOiBcInRpdGxlLmZ1bmN0aW9uXCJcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgQVJHVU1FTlQgPSB7XG4gICAgY2xhc3NOYW1lOiBcInZhcmlhYmxlXCIsXG4gICAgYmVnaW46IC9cXCRbXFx3X10rL1xuICB9O1xuXG4gIGNvbnN0IFBBUkVOUyA9IHtcbiAgICBtYXRjaDogLyhcXCgoPyE7KXxcXCkpKy8sXG4gICAgY2xhc3NOYW1lOiBcInB1bmN0dWF0aW9uXCIsXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07XG5cbiAgY29uc3QgTlVNQkVSID0ge1xuICAgIGNsYXNzTmFtZTogXCJudW1iZXJcIixcbiAgICByZWxldmFuY2U6IDAsXG4gICAgLy8gYm9ycm93ZWQgZnJvbSBQcmlzbSwgVE9ETzogc3BsaXQgb3V0IGludG8gdmFyaWFudHNcbiAgICBtYXRjaDogL1srLV0/XFxiKD86XFxkKD86Xz9cXGQpKig/OlxcLlxcZCg/Ol8/XFxkKSopPyg/OltlRV1bKy1dP1xcZCg/Ol8/XFxkKSopP3wweFtcXGRhLWZBLUZdKD86Xz9bXFxkYS1mQS1GXSkqKD86XFwuW1xcZGEtZkEtRl0oPzpfP1tcXGRhLWZBLURdKSopPyg/OltwUF1bKy1dP1xcZCg/Ol8/XFxkKSopPylcXGJ8XFxiaW5mXFxifFxcYm5hbig/OjoweFtcXGRhLWZBLUZdKD86Xz9bXFxkYS1mQS1EXSkqKT9cXGIvXG4gIH07XG5cbiAgY29uc3QgVFlQRSA9IHtcbiAgICAvLyBsb29rLWFoZWFkIHByZXZlbnRzIHVzIGZyb20gZ29iYmxpbmcgdXAgb3Bjb2Rlc1xuICAgIG1hdGNoOiAvKGkzMnxpNjR8ZjMyfGY2NCkoPyFcXC4pLyxcbiAgICBjbGFzc05hbWU6IFwidHlwZVwiXG4gIH07XG5cbiAgY29uc3QgTUFUSF9PUEVSQVRJT05TID0ge1xuICAgIGNsYXNzTmFtZTogXCJrZXl3b3JkXCIsXG4gICAgLy8gYm9ycm93ZWQgZnJvbSBQcmlzbSwgVE9ETzogc3BsaXQgb3V0IGludG8gdmFyaWFudHNcbiAgICBtYXRjaDogL1xcYihmMzJ8ZjY0fGkzMnxpNjQpKD86XFwuKD86YWJzfGFkZHxhbmR8Y2VpbHxjbHp8Y29uc3R8Y29udmVydF9bc3VdXFwvaSg/OjMyfDY0KXxjb3B5c2lnbnxjdHp8ZGVtb3RlXFwvZjY0fGRpdig/Ol9bc3VdKT98ZXF6P3xleHRlbmRfW3N1XVxcL2kzMnxmbG9vcnxnZSg/Ol9bc3VdKT98Z3QoPzpfW3N1XSk/fGxlKD86X1tzdV0pP3xsb2FkKD86KD86OHwxNnwzMilfW3N1XSk/fGx0KD86X1tzdV0pP3xtYXh8bWlufG11bHxuZWFyZXN0fG5lZz98b3J8cG9wY250fHByb21vdGVcXC9mMzJ8cmVpbnRlcnByZXRcXC9bZmldKD86MzJ8NjQpfHJlbV9bc3VdfHJvdFtscl18c2hsfHNocl9bc3VdfHN0b3JlKD86OHwxNnwzMik/fHNxcnR8c3VifHRydW5jKD86X1tzdV1cXC9mKD86MzJ8NjQpKT98d3JhcFxcL2k2NHx4b3IpKVxcYi9cbiAgfTtcblxuICBjb25zdCBPRkZTRVRfQUxJR04gPSB7XG4gICAgbWF0Y2g6IFtcbiAgICAgIC8oPzpvZmZzZXR8YWxpZ24pLyxcbiAgICAgIC9cXHMqLyxcbiAgICAgIC89L1xuICAgIF0sXG4gICAgY2xhc3NOYW1lOiB7XG4gICAgICAxOiBcImtleXdvcmRcIixcbiAgICAgIDM6IFwib3BlcmF0b3JcIlxuICAgIH1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdXZWJBc3NlbWJseScsXG4gICAga2V5d29yZHM6IHtcbiAgICAgICRwYXR0ZXJuOiAvW1xcdy5dKy8sXG4gICAgICBrZXl3b3JkOiBLV1NcbiAgICB9LFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICBMSU5FX0NPTU1FTlQsXG4gICAgICBCTE9DS19DT01NRU5ULFxuICAgICAgT0ZGU0VUX0FMSUdOLFxuICAgICAgQVJHVU1FTlQsXG4gICAgICBQQVJFTlMsXG4gICAgICBGVU5DVElPTl9SRUZFUkVOQ0UsXG4gICAgICBobGpzLlFVT1RFX1NUUklOR19NT0RFLFxuICAgICAgVFlQRSxcbiAgICAgIE1BVEhfT1BFUkFUSU9OUyxcbiAgICAgIE5VTUJFUlxuICAgIF1cbiAgfTtcbn1cblxuZXhwb3J0IHsgd2FzbSBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsid2FzbSIsImhsanMiLCJyZWdleCIsIkJMT0NLX0NPTU1FTlQiLCJDT01NRU5UIiwiY29udGFpbnMiLCJwdXNoIiwiTElORV9DT01NRU5UIiwiS1dTIiwiRlVOQ1RJT05fUkVGRVJFTkNFIiwiYmVnaW4iLCJjbGFzc05hbWUiLCJBUkdVTUVOVCIsIlBBUkVOUyIsIm1hdGNoIiwicmVsZXZhbmNlIiwiTlVNQkVSIiwiVFlQRSIsIk1BVEhfT1BFUkFUSU9OUyIsIk9GRlNFVF9BTElHTiIsIm5hbWUiLCJrZXl3b3JkcyIsIiRwYXR0ZXJuIiwia2V5d29yZCIsIlFVT1RFX1NUUklOR19NT0RFIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/wasm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/xml.js":
/*!*******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/xml.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ xml)\n/* harmony export */ });\n/*\nLanguage: HTML, XML\nWebsite: https://www.w3.org/XML/\nCategory: common, web\nAudit: 2020\n*/ /** @type LanguageFn */ function xml(hljs) {\n    const regex = hljs.regex;\n    // XML names can have the following additional letters: https://www.w3.org/TR/xml/#NT-NameChar\n    // OTHER_NAME_CHARS = /[:\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]/;\n    // Element names start with NAME_START_CHAR followed by optional other Unicode letters, ASCII digits, hyphens, underscores, and periods\n    // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/, regex.optional(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*:/), /[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*/);;\n    // const XML_IDENT_RE = /[A-Z_a-z:\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]+/;\n    // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/, regex.optional(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*:/), /[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*/);\n    // however, to cater for performance and more Unicode support rely simply on the Unicode letter class\n    const TAG_NAME_RE = regex.concat(/[\\p{L}_]/u, regex.optional(/[\\p{L}0-9_.-]*:/u), /[\\p{L}0-9_.-]*/u);\n    const XML_IDENT_RE = /[\\p{L}0-9._:-]+/u;\n    const XML_ENTITIES = {\n        className: \"symbol\",\n        begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/\n    };\n    const XML_META_KEYWORDS = {\n        begin: /\\s/,\n        contains: [\n            {\n                className: \"keyword\",\n                begin: /#?[a-z_][a-z1-9_-]+/,\n                illegal: /\\n/\n            }\n        ]\n    };\n    const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {\n        begin: /\\(/,\n        end: /\\)/\n    });\n    const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, {\n        className: \"string\"\n    });\n    const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        className: \"string\"\n    });\n    const TAG_INTERNALS = {\n        endsWithParent: true,\n        illegal: /</,\n        relevance: 0,\n        contains: [\n            {\n                className: \"attr\",\n                begin: XML_IDENT_RE,\n                relevance: 0\n            },\n            {\n                begin: /=\\s*/,\n                relevance: 0,\n                contains: [\n                    {\n                        className: \"string\",\n                        endsParent: true,\n                        variants: [\n                            {\n                                begin: /\"/,\n                                end: /\"/,\n                                contains: [\n                                    XML_ENTITIES\n                                ]\n                            },\n                            {\n                                begin: /'/,\n                                end: /'/,\n                                contains: [\n                                    XML_ENTITIES\n                                ]\n                            },\n                            {\n                                begin: /[^\\s\"'=<>`]+/\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    };\n    return {\n        name: \"HTML, XML\",\n        aliases: [\n            \"html\",\n            \"xhtml\",\n            \"rss\",\n            \"atom\",\n            \"xjb\",\n            \"xsd\",\n            \"xsl\",\n            \"plist\",\n            \"wsf\",\n            \"svg\"\n        ],\n        case_insensitive: true,\n        unicodeRegex: true,\n        contains: [\n            {\n                className: \"meta\",\n                begin: /<![a-z]/,\n                end: />/,\n                relevance: 10,\n                contains: [\n                    XML_META_KEYWORDS,\n                    QUOTE_META_STRING_MODE,\n                    APOS_META_STRING_MODE,\n                    XML_META_PAR_KEYWORDS,\n                    {\n                        begin: /\\[/,\n                        end: /\\]/,\n                        contains: [\n                            {\n                                className: \"meta\",\n                                begin: /<![a-z]/,\n                                end: />/,\n                                contains: [\n                                    XML_META_KEYWORDS,\n                                    XML_META_PAR_KEYWORDS,\n                                    QUOTE_META_STRING_MODE,\n                                    APOS_META_STRING_MODE\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            },\n            hljs.COMMENT(/<!--/, /-->/, {\n                relevance: 10\n            }),\n            {\n                begin: /<!\\[CDATA\\[/,\n                end: /\\]\\]>/,\n                relevance: 10\n            },\n            XML_ENTITIES,\n            // xml processing instructions\n            {\n                className: \"meta\",\n                end: /\\?>/,\n                variants: [\n                    {\n                        begin: /<\\?xml/,\n                        relevance: 10,\n                        contains: [\n                            QUOTE_META_STRING_MODE\n                        ]\n                    },\n                    {\n                        begin: /<\\?[a-z][a-z0-9]+/\n                    }\n                ]\n            },\n            {\n                className: \"tag\",\n                /*\n        The lookahead pattern (?=...) ensures that 'begin' only matches\n        '<style' as a single word, followed by a whitespace or an\n        ending bracket.\n        */ begin: /<style(?=\\s|>)/,\n                end: />/,\n                keywords: {\n                    name: \"style\"\n                },\n                contains: [\n                    TAG_INTERNALS\n                ],\n                starts: {\n                    end: /<\\/style>/,\n                    returnEnd: true,\n                    subLanguage: [\n                        \"css\",\n                        \"xml\"\n                    ]\n                }\n            },\n            {\n                className: \"tag\",\n                // See the comment in the <style tag about the lookahead pattern\n                begin: /<script(?=\\s|>)/,\n                end: />/,\n                keywords: {\n                    name: \"script\"\n                },\n                contains: [\n                    TAG_INTERNALS\n                ],\n                starts: {\n                    end: /<\\/script>/,\n                    returnEnd: true,\n                    subLanguage: [\n                        \"javascript\",\n                        \"handlebars\",\n                        \"xml\"\n                    ]\n                }\n            },\n            // we need this for now for jSX\n            {\n                className: \"tag\",\n                begin: /<>|<\\/>/\n            },\n            // open tag\n            {\n                className: \"tag\",\n                begin: regex.concat(/</, regex.lookahead(regex.concat(TAG_NAME_RE, // <tag/>\n                // <tag>\n                // <tag ...\n                regex.either(/\\/>/, />/, /\\s/)))),\n                end: /\\/?>/,\n                contains: [\n                    {\n                        className: \"name\",\n                        begin: TAG_NAME_RE,\n                        relevance: 0,\n                        starts: TAG_INTERNALS\n                    }\n                ]\n            },\n            // close tag\n            {\n                className: \"tag\",\n                begin: regex.concat(/<\\//, regex.lookahead(regex.concat(TAG_NAME_RE, />/))),\n                contains: [\n                    {\n                        className: \"name\",\n                        begin: TAG_NAME_RE,\n                        relevance: 0\n                    },\n                    {\n                        begin: />/,\n                        relevance: 0,\n                        endsParent: true\n                    }\n                ]\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/xml.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/yaml.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/yaml.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ yaml)\n/* harmony export */ });\n/*\nLanguage: YAML\nDescription: Yet Another Markdown Language\nAuthor: Stefan Wienert <stwienert@gmail.com>\nContributors: Carl Baxter <carl@cbax.tech>\nRequires: ruby.js\nWebsite: https://yaml.org\nCategory: common, config\n*/ function yaml(hljs) {\n    const LITERALS = \"true false yes no null\";\n    // YAML spec allows non-reserved URI characters in tags.\n    const URI_CHARACTERS = \"[\\\\w#;/?:@&=+$,.~*'()[\\\\]]+\";\n    // Define keys as starting with a word character\n    // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods\n    // ...and ending with a colon followed immediately by a space, tab or newline.\n    // The YAML spec allows for much more than this, but this covers most use-cases.\n    const KEY = {\n        className: \"attr\",\n        variants: [\n            // added brackets support and special char support\n            {\n                begin: /[\\w*@][\\w*@ :()\\./-]*:(?=[ \\t]|$)/\n            },\n            {\n                begin: /\"[\\w*@][\\w*@ :()\\./-]*\":(?=[ \\t]|$)/\n            },\n            {\n                begin: /'[\\w*@][\\w*@ :()\\./-]*':(?=[ \\t]|$)/\n            }\n        ]\n    };\n    const TEMPLATE_VARIABLES = {\n        className: \"template-variable\",\n        variants: [\n            {\n                begin: /\\{\\{/,\n                end: /\\}\\}/\n            },\n            {\n                begin: /%\\{/,\n                end: /\\}/\n            }\n        ]\n    };\n    const SINGLE_QUOTE_STRING = {\n        className: \"string\",\n        relevance: 0,\n        begin: /'/,\n        end: /'/,\n        contains: [\n            {\n                match: /''/,\n                scope: \"char.escape\",\n                relevance: 0\n            }\n        ]\n    };\n    const STRING = {\n        className: \"string\",\n        relevance: 0,\n        variants: [\n            {\n                begin: /\"/,\n                end: /\"/\n            },\n            {\n                begin: /\\S+/\n            }\n        ],\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            TEMPLATE_VARIABLES\n        ]\n    };\n    // Strings inside of value containers (objects) can't contain braces,\n    // brackets, or commas\n    const CONTAINER_STRING = hljs.inherit(STRING, {\n        variants: [\n            {\n                begin: /'/,\n                end: /'/,\n                contains: [\n                    {\n                        begin: /''/,\n                        relevance: 0\n                    }\n                ]\n            },\n            {\n                begin: /\"/,\n                end: /\"/\n            },\n            {\n                begin: /[^\\s,{}[\\]]+/\n            }\n        ]\n    });\n    const DATE_RE = \"[0-9]{4}(-[0-9][0-9]){0,2}\";\n    const TIME_RE = \"([Tt \\\\t][0-9][0-9]?(:[0-9][0-9]){2})?\";\n    const FRACTION_RE = \"(\\\\.[0-9]*)?\";\n    const ZONE_RE = \"([ \\\\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?\";\n    const TIMESTAMP = {\n        className: \"number\",\n        begin: \"\\\\b\" + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + \"\\\\b\"\n    };\n    const VALUE_CONTAINER = {\n        end: \",\",\n        endsWithParent: true,\n        excludeEnd: true,\n        keywords: LITERALS,\n        relevance: 0\n    };\n    const OBJECT = {\n        begin: /\\{/,\n        end: /\\}/,\n        contains: [\n            VALUE_CONTAINER\n        ],\n        illegal: \"\\\\n\",\n        relevance: 0\n    };\n    const ARRAY = {\n        begin: \"\\\\[\",\n        end: \"\\\\]\",\n        contains: [\n            VALUE_CONTAINER\n        ],\n        illegal: \"\\\\n\",\n        relevance: 0\n    };\n    const MODES = [\n        KEY,\n        {\n            className: \"meta\",\n            begin: \"^---\\\\s*$\",\n            relevance: 10\n        },\n        {\n            // Blocks start with a | or > followed by a newline\n            //\n            // Indentation of subsequent lines must be the same to\n            // be considered part of the block\n            className: \"string\",\n            begin: \"[\\\\|>]([1-9]?[+-])?[ ]*\\\\n( +)[^ ][^\\\\n]*\\\\n(\\\\2[^\\\\n]+\\\\n?)*\"\n        },\n        {\n            begin: \"<%[%=-]?\",\n            end: \"[%-]?%>\",\n            subLanguage: \"ruby\",\n            excludeBegin: true,\n            excludeEnd: true,\n            relevance: 0\n        },\n        {\n            className: \"type\",\n            begin: \"!\\\\w+!\" + URI_CHARACTERS\n        },\n        // https://yaml.org/spec/1.2/spec.html#id2784064\n        {\n            className: \"type\",\n            begin: \"!<\" + URI_CHARACTERS + \">\"\n        },\n        {\n            className: \"type\",\n            begin: \"!\" + URI_CHARACTERS\n        },\n        {\n            className: \"type\",\n            begin: \"!!\" + URI_CHARACTERS\n        },\n        {\n            className: \"meta\",\n            begin: \"&\" + hljs.UNDERSCORE_IDENT_RE + \"$\"\n        },\n        {\n            className: \"meta\",\n            begin: \"\\\\*\" + hljs.UNDERSCORE_IDENT_RE + \"$\"\n        },\n        {\n            className: \"bullet\",\n            // TODO: remove |$ hack when we have proper look-ahead support\n            begin: \"-(?=[ ]|$)\",\n            relevance: 0\n        },\n        hljs.HASH_COMMENT_MODE,\n        {\n            beginKeywords: LITERALS,\n            keywords: {\n                literal: LITERALS\n            }\n        },\n        TIMESTAMP,\n        // numbers are any valid C-style number that\n        // sit isolated from other words\n        {\n            className: \"number\",\n            begin: hljs.C_NUMBER_RE + \"\\\\b\",\n            relevance: 0\n        },\n        OBJECT,\n        ARRAY,\n        SINGLE_QUOTE_STRING,\n        STRING\n    ];\n    const VALUE_MODES = [\n        ...MODES\n    ];\n    VALUE_MODES.pop();\n    VALUE_MODES.push(CONTAINER_STRING);\n    VALUE_CONTAINER.contains = VALUE_MODES;\n    return {\n        name: \"YAML\",\n        case_insensitive: true,\n        aliases: [\n            \"yml\"\n        ],\n        contains: MODES\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/yaml.js\n");

/***/ })

};
;