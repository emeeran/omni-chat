"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/chat/[[...chatId]]/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deleteChat: function() { return /* binding */ deleteChat; },\n/* harmony export */   deleteDocument: function() { return /* binding */ deleteDocument; },\n/* harmony export */   getChat: function() { return /* binding */ getChat; },\n/* harmony export */   getChats: function() { return /* binding */ getChats; },\n/* harmony export */   getDocument: function() { return /* binding */ getDocument; },\n/* harmony export */   getDocumentContent: function() { return /* binding */ getDocumentContent; },\n/* harmony export */   getDocuments: function() { return /* binding */ getDocuments; },\n/* harmony export */   getModels: function() { return /* binding */ getModels; },\n/* harmony export */   getPersonas: function() { return /* binding */ getPersonas; },\n/* harmony export */   getProviders: function() { return /* binding */ getProviders; },\n/* harmony export */   searchDocument: function() { return /* binding */ searchDocument; },\n/* harmony export */   sendChatMessage: function() { return /* binding */ sendChatMessage; },\n/* harmony export */   sendRagChatMessage: function() { return /* binding */ sendRagChatMessage; },\n/* harmony export */   updateChatTitle: function() { return /* binding */ updateChatTitle; },\n/* harmony export */   uploadDocument: function() { return /* binding */ uploadDocument; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\nconst api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: \"/api\",\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\n// Providers API\nconst getProviders = async ()=>{\n    try {\n        const response = await api.get(\"/providers\");\n        return response.data;\n    } catch (error) {\n        console.error(\"Error fetching providers:\", error);\n        // Return fallback data if backend is not available\n        return [\n            {\n                id: \"openai\",\n                name: \"OpenAI\",\n                website: \"https://openai.com\"\n            },\n            {\n                id: \"anthropic\",\n                name: \"Anthropic\",\n                website: \"https://anthropic.com\"\n            },\n            {\n                id: \"cohere\",\n                name: \"Cohere\",\n                website: \"https://cohere.com\"\n            },\n            {\n                id: \"mistral\",\n                name: \"Mistral AI\",\n                website: \"https://mistral.ai\"\n            },\n            {\n                id: \"groq\",\n                name: \"Groq\",\n                website: \"https://groq.com\"\n            }\n        ];\n    }\n};\n// Models API\nconst getModels = async (providerId)=>{\n    try {\n        const response = await api.get(\"/models?provider=\".concat(providerId));\n        return response.data;\n    } catch (error) {\n        console.error(\"Error fetching models:\", error);\n        // Return fallback data if backend is not available\n        return [\n            {\n                id: \"gpt-4o\",\n                name: \"GPT-4o\",\n                provider: \"openai\",\n                capabilities: [\n                    \"chat\",\n                    \"vision\"\n                ]\n            },\n            {\n                id: \"gpt-4-turbo\",\n                name: \"GPT-4 Turbo\",\n                provider: \"openai\",\n                capabilities: [\n                    \"chat\"\n                ]\n            },\n            {\n                id: \"gpt-4-o-mini\",\n                name: \"GPT-4o Mini\",\n                provider: \"openai\",\n                capabilities: [\n                    \"chat\"\n                ]\n            },\n            {\n                id: \"claude-3-opus\",\n                name: \"Claude 3 Opus\",\n                provider: \"anthropic\",\n                capabilities: [\n                    \"chat\",\n                    \"vision\"\n                ]\n            },\n            {\n                id: \"claude-3-sonnet\",\n                name: \"Claude 3 Sonnet\",\n                provider: \"anthropic\",\n                capabilities: [\n                    \"chat\",\n                    \"vision\"\n                ]\n            },\n            {\n                id: \"claude-3-haiku\",\n                name: \"Claude 3 Haiku\",\n                provider: \"anthropic\",\n                capabilities: [\n                    \"chat\",\n                    \"vision\"\n                ]\n            },\n            {\n                id: \"llama-3-70b-instruct\",\n                name: \"Llama 3 70B Instruct\",\n                provider: \"meta\",\n                capabilities: [\n                    \"chat\"\n                ]\n            },\n            {\n                id: \"mixtral-8x7b-instruct\",\n                name: \"Mixtral 8x7B Instruct\",\n                provider: \"mistral\",\n                capabilities: [\n                    \"chat\"\n                ]\n            },\n            {\n                id: \"gemini-1.5-pro\",\n                name: \"Gemini 1.5 Pro\",\n                provider: \"google\",\n                capabilities: [\n                    \"chat\",\n                    \"vision\"\n                ],\n                isPreview: true\n            }\n        ];\n    }\n};\n// Personas API\nconst getPersonas = async ()=>{\n    try {\n        const response = await api.get(\"/personas\");\n        return response.data;\n    } catch (error) {\n        console.error(\"Error fetching personas:\", error);\n        // Return fallback data if backend is not available\n        return [\n            {\n                id: \"1\",\n                name: \"Friendly Assistant\",\n                prompt: \"You are a friendly assistant.\"\n            },\n            {\n                id: \"2\",\n                name: \"Technical Expert\",\n                prompt: \"You are a technical expert.\"\n            },\n            {\n                id: \"3\",\n                name: \"Creative Writer\",\n                prompt: \"You are a creative writer.\"\n            },\n            {\n                id: \"4\",\n                name: \"Academic Assistant\",\n                prompt: \"You are an academic assistant.\"\n            },\n            {\n                id: \"5\",\n                name: \"Data Analyst\",\n                prompt: \"You are a data analyst.\"\n            }\n        ];\n    }\n};\n// Chat API\nconst sendChatMessage = async (content, chatId, provider, model, systemPrompt, temperature, maxTokens)=>{\n    try {\n        const response = await api.post(\"/chat\", {\n            content,\n            chat_id: chatId,\n            provider,\n            model,\n            system_prompt: systemPrompt,\n            temperature,\n            max_tokens: maxTokens\n        });\n        // Extract the chat data from the response\n        const { chat_id, assistant_response } = response.data;\n        // Construct and return a Chat object with the messages\n        // This ensures the UI can properly update\n        const currentTimestamp = new Date().toISOString();\n        // Create a complete chat object for the UI to use\n        return {\n            chat_id: chat_id || chatId,\n            title: chatId ? undefined : content.substring(0, 30) + (content.length > 30 ? \"...\" : \"\"),\n            messages: [\n                // If there was a system prompt and this is a new chat, add it\n                ...systemPrompt && !chatId ? [\n                    {\n                        message_id: \"system-\".concat(Date.now()),\n                        role: \"system\",\n                        content: systemPrompt,\n                        created_at: currentTimestamp\n                    }\n                ] : [],\n                // Add the user message\n                {\n                    message_id: \"user-\".concat(Date.now()),\n                    role: \"user\",\n                    content,\n                    created_at: currentTimestamp\n                },\n                // Add the assistant response\n                {\n                    message_id: \"assistant-\".concat(Date.now()),\n                    role: \"assistant\",\n                    content: assistant_response,\n                    created_at: currentTimestamp\n                }\n            ],\n            provider: provider || \"openai\",\n            model: model || \"gpt-4o\",\n            system_prompt: systemPrompt,\n            created_at: currentTimestamp,\n            updated_at: currentTimestamp\n        };\n    } catch (error) {\n        console.error(\"Error sending chat message:\", error);\n        throw error;\n    }\n};\n// RAG Chat API\nconst sendRagChatMessage = async (content, documentIds, chatId, provider, model, systemPrompt, temperature, maxTokens)=>{\n    try {\n        const response = await api.post(\"/chat/rag\", {\n            content,\n            document_ids: documentIds,\n            chat_id: chatId,\n            provider,\n            model,\n            system_prompt: systemPrompt,\n            temperature,\n            max_tokens: maxTokens\n        });\n        // Extract the chat data from the response\n        const { chat_id, assistant_response } = response.data;\n        // Construct and return a Chat object with the messages\n        const currentTimestamp = new Date().toISOString();\n        // Create a complete chat object for the UI to use\n        return {\n            chat_id: chat_id || chatId,\n            title: chatId ? undefined : content.substring(0, 30) + (content.length > 30 ? \"...\" : \"\"),\n            messages: [\n                // If there was a system prompt and this is a new chat, add it\n                ...systemPrompt && !chatId ? [\n                    {\n                        message_id: \"system-\".concat(Date.now()),\n                        role: \"system\",\n                        content: systemPrompt,\n                        created_at: currentTimestamp\n                    }\n                ] : [],\n                // Add the user message\n                {\n                    message_id: \"user-\".concat(Date.now()),\n                    role: \"user\",\n                    content,\n                    created_at: currentTimestamp\n                },\n                // Add the assistant response\n                {\n                    message_id: \"assistant-\".concat(Date.now()),\n                    role: \"assistant\",\n                    content: assistant_response,\n                    created_at: currentTimestamp\n                }\n            ],\n            provider: provider || \"openai\",\n            model: model || \"gpt-4o\",\n            system_prompt: systemPrompt,\n            created_at: currentTimestamp,\n            updated_at: currentTimestamp,\n            document_ids: documentIds\n        };\n    } catch (error) {\n        console.error(\"Error sending RAG chat message:\", error);\n        throw error;\n    }\n};\n// Chats API\nconst getChats = async ()=>{\n    const response = await api.get(\"/chats\");\n    return response.data;\n};\nconst getChat = async (chatId)=>{\n    const response = await api.get(\"/chats/\".concat(chatId));\n    return response.data;\n};\nconst deleteChat = async (chatId)=>{\n    const response = await api.delete(\"/chats/\".concat(chatId));\n    return response.data;\n};\nconst updateChatTitle = async (chatId, title)=>{\n    const response = await api.put(\"/chats/\".concat(chatId, \"/title\"), {\n        title\n    });\n    return response.data;\n};\n// Document API\nconst uploadDocument = async (file)=>{\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    const response = await api.post(\"/documents/upload\", formData, {\n        headers: {\n            \"Content-Type\": \"multipart/form-data\"\n        }\n    });\n    return response.data;\n};\nconst getDocuments = async ()=>{\n    const response = await api.get(\"/documents\");\n    return response.data;\n};\nconst getDocument = async (docId)=>{\n    const response = await api.get(\"/documents/\".concat(docId));\n    return response.data;\n};\nconst searchDocument = async (docId, query)=>{\n    const response = await api.get(\"/documents/\".concat(docId, \"/search?query=\").concat(encodeURIComponent(query)));\n    return response.data;\n};\nconst deleteDocument = async (docId)=>{\n    await api.delete(\"/documents/\".concat(docId));\n};\nconst getDocumentContent = async (docId)=>{\n    const response = await api.get(\"/documents/\".concat(docId, \"/content\"));\n    return response.data;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});