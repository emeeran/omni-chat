{"chat_id": "2eafc547-c8b0-437c-8a53-452f39322a9d", "title": "New Chat", "messages": [{"message_id": "06fbe7e9-76c8-4097-a74c-56cc7cb6d54c", "role": "user", "content": "Write a Python script to analyze sentiment in tweets", "created_at": "2025-04-26T19:43:02.878966"}, {"message_id": "1dbf588e-a9d7-489d-8cd9-441fe3434c7a", "role": "assistant", "content": "To analyze sentiment in tweets using Python, you can use the `tweepy` library to access tweets from Twitter and the `textblob` or `nltk` library to perform sentiment analysis. Below is an example script using `tweepy` for fetching tweets and `textblob` for sentiment analysis. Make sure you have the necessary libraries installed:\n\n```bash\npip install tweepy textblob\n```\n\nHere is a sample script:\n\n```python\nimport tweepy\nfrom textblob import TextBlob\n\n# Twitter API credentials\n# Make sure to replace these with your own API keys\nAPI_KEY = 'your_api_key'\nAPI_SECRET_KEY = 'your_api_secret_key'\nACCESS_TOKEN = 'your_access_token'\nACCESS_TOKEN_SECRET = 'your_access_token_secret'\n\n# Authenticate to Twitter\nauth = tweepy.OAuthHandler(API_KEY, API_SECRET_KEY)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET)\n\n# Create an API object\napi = tweepy.API(auth)\n\n# Define a function to clean tweet text\ndef clean_tweet(tweet):\n    \"\"\"Utility function to clean tweet text by removing links, special characters using regex.\"\"\"\n    import re\n    return ' '.join(re.sub(\"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t])|(\\w+:\\/\\/\\S+)\", \" \", tweet).split())\n\n# Define a function to get tweet sentiment\ndef get_tweet_sentiment(tweet):\n    \"\"\"Utility function to classify sentiment of passed tweet\n    using textblob's sentiment method\"\"\"\n    # Create TextBlob object of passed tweet text\n    analysis = TextBlob(clean_tweet(tweet))\n    # Set sentiment\n    if analysis.sentiment.polarity > 0:\n        return 'positive'\n    elif analysis.sentiment.polarity == 0:\n        return 'neutral'\n    else:\n        return 'negative'\n\n# Define a function to fetch tweets and parse them\ndef get_tweets(query, count=100):\n    \"\"\"Main function to fetch tweets and parse them.\"\"\"\n    # Empty list to store parsed tweets\n    tweets = []\n\n    try:\n        # Call twitter api to fetch tweets\n        fetched_tweets = api.search(q=query, count=count)\n\n        # Parsing tweets one by one\n        for tweet in fetched_tweets:\n            # Empty dictionary to store required params of a tweet\n            parsed_tweet = {}\n\n            # Saving text of tweet\n            parsed_tweet['text'] = tweet.text\n            # Saving sentiment of tweet\n            parsed_tweet['sentiment'] = get_tweet_sentiment(tweet.text)\n\n            # Append parsed tweet to tweets list\n            if tweet.retweet_count > 0:\n                # If tweet has retweets, ensure that it is appended only once\n                if parsed_tweet not in tweets:\n                    tweets.append(parsed_tweet)\n            else:\n                tweets.append(parsed_tweet)\n\n        # Return parsed tweets\n        return tweets\n\n    except tweepy.TweepError as e:\n        # Print error (if any)\n        print(f\"Error : {str(e)}\")\n\n# Main function\ndef main():\n    # Enter a keyword to search for\n    query = 'Python'\n    # Call function to get tweets\n    tweets = get_tweets(query=query, count=200)\n\n    # Print first 5 tweets\n    print(\"First 5 tweets:\")\n    for tweet in tweets[:5]:\n        print(f\"{tweet['text']} - {tweet['sentiment']}\")\n\n    # Picking positive tweets from tweets\n    ptweets = [tweet for tweet in tweets if tweet['sentiment'] == 'positive']\n    # Percentage of positive tweets\n    print(f\"\\nPositive tweets percentage: {100*len(ptweets)/len(tweets)} %\")\n    # Picking negative tweets from tweets\n    ntweets = [tweet for tweet in tweets if tweet['sentiment'] == 'negative']\n    # Percentage of negative tweets\n    print(f\"Negative tweets percentage: {100*len(ntweets)/len(tweets)} %\")\n    # Percentage of neutral tweets\n    print(f\"Neutral tweets percentage: {100*(len(tweets) - len(ntweets) - len(ptweets))/len(tweets)} %\")\n\n# Run the main function\nif __name__ == \"__main__\":\n    main()\n```\n\n### Notes\n\n1. **Twitter API Credentials**: You need to have Twitter Developer credentials to use the Twitter API. You can get these by creating a developer account on Twitter and setting up an app to get your API keys and tokens.\n\n2. **Limitation**: The above script uses `tweepy` to access Twitter's API, which has rate limits. Be mindful of these limits when running the script.\n\n3. **Sentiment Analysis**: The `TextBlob` library provides a simple API for diving into common natural language processing (NLP) tasks including sentiment analysis. It assigns a polarity score to each text (tweet in this case).\n\n4. **Data Privacy**: Ensure you handle and store data according to privacy and data protection laws.", "created_at": "2025-04-26T19:43:15.322905"}], "provider": "openai", "model": "gpt-4o", "system_prompt": null, "created_at": "2025-04-26T19:43:02.878933", "updated_at": "2025-04-26T19:43:15.322916"}