{"chat_id": "295974b2-0faf-4a65-af25-43a6e9799aed", "title": "New Chat", "messages": [{"message_id": "068706d4-0c58-4ec1-96f0-2698bd267296", "role": "user", "content": "Write a Python script to analyze sentiment in tweets", "created_at": "2025-04-26T19:32:00.185396"}, {"message_id": "1947e181-f972-41d3-bceb-afdef673342d", "role": "assistant", "content": "To analyze sentiment in tweets using Python, you can use libraries like `tweepy` to access Twitter's API and `textblob` or `vaderSentiment` for sentiment analysis. Below is a sample script that demonstrates how to fetch tweets and analyze their sentiment using the `vaderSentiment` library, which is well-suited for analyzing social media text.\n\nBefore running the script, ensure you have the necessary libraries installed. You can install them using pip:\n\n```bash\npip install tweepy vaderSentiment\n```\n\nYou will also need Twitter API credentials. You can obtain these by creating a developer account on the Twitter Developer Platform and setting up a project to get your API keys and tokens.\n\nHere's a Python script that fetches tweets and analyzes their sentiment:\n\n```python\nimport tweepy\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n\n# Twitter API credentials\nAPI_KEY = 'your_api_key'\nAPI_SECRET_KEY = 'your_api_secret_key'\nACCESS_TOKEN = 'your_access_token'\nACCESS_TOKEN_SECRET = 'your_access_token_secret'\n\n# Authenticate to Twitter\nauth = tweepy.OAuthHandler(API_KEY, API_SECRET_KEY)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET)\napi = tweepy.API(auth, wait_on_rate_limit=True)\n\n# Function to fetch tweets\ndef fetch_tweets(query, count=100):\n    try:\n        tweets = api.search_tweets(q=query, count=count, lang='en', tweet_mode='extended')\n        return tweets\n    except tweepy.TweepError as e:\n        print(f\"Error: {e}\")\n        return []\n\n# Function to analyze sentiment\ndef analyze_sentiment(tweets):\n    analyzer = SentimentIntensityAnalyzer()\n    sentiment_scores = {'positive': 0, 'neutral': 0, 'negative': 0}\n\n    for tweet in tweets:\n        text = tweet.full_text\n        score = analyzer.polarity_scores(text)\n        print(f\"Tweet: {text}\")\n        print(f\"Sentiment Score: {score}\")\n\n        if score['compound'] >= 0.05:\n            sentiment_scores['positive'] += 1\n        elif score['compound'] <= -0.05:\n            sentiment_scores['negative'] += 1\n        else:\n            sentiment_scores['neutral'] += 1\n\n    return sentiment_scores\n\n# Main function\ndef main():\n    query = \"Python\"  # Example query\n    tweet_count = 100  # Number of tweets to fetch\n\n    print(f\"Fetching tweets for query: {query}\")\n    tweets = fetch_tweets(query, tweet_count)\n\n    if tweets:\n        print(f\"Analyzing sentiment for {len(tweets)} tweets...\\n\")\n        sentiment_scores = analyze_sentiment(tweets)\n\n        print(\"\\nSentiment Analysis Results:\")\n        total_tweets = sum(sentiment_scores.values())\n        for sentiment, count in sentiment_scores.items():\n            percentage = (count / total_tweets) * 100\n            print(f\"{sentiment.capitalize()}: {percentage:.2f}%\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Key Points:\n1. **Authentication:** Replace `'your_api_key'`, `'your_api_secret_key'`, `'your_access_token'`, and `'your_access_token_secret'` with your actual Twitter API credentials.\n2. **Fetching Tweets:** The script uses the `search_tweets` method to fetch recent tweets containing a specific query.\n3. **Sentiment Analysis:** The script uses VADER, a lexicon and rule-based sentiment analysis tool that is effective for social media text.\n4. **Output:** The script calculates and prints the percentage of positive, neutral, and negative tweets.\n\nThis script provides a basic framework. Depending on your needs, you may want to expand it to include more error handling, logging, or additional analysis features.", "created_at": "2025-04-26T19:32:09.981647"}], "provider": "openai", "model": "gpt-4o", "system_prompt": null, "created_at": "2025-04-26T19:32:00.185351", "updated_at": "2025-04-26T19:32:09.981654"}