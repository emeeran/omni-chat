{"chat_id": "d807c9c3-d97d-4bca-9608-49dbb65ebfb8", "title": "New Chat", "messages": [{"message_id": "b948974c-9da9-490a-95e7-0e1a36c43ac7", "role": "user", "content": "Write a Python script to analyze sentiment in tweets", "created_at": "2025-04-26T19:22:50.343221"}, {"message_id": "b24d7c0b-6f8d-40ac-b9a9-a42d212d553b", "role": "assistant", "content": "Analyzing sentiment in tweets can be a powerful way to understand public opinion and trends. Below is a Python script that uses the `Tweepy` library to access tweets and the `TextBlob` library to perform sentiment analysis. Before running the script, ensure you have the necessary libraries installed. You can install them using:\n\n```bash\npip install tweepy textblob\n```\n\nHere's a basic script to perform sentiment analysis on tweets:\n\n```python\nimport tweepy\nfrom textblob import TextBlob\n\n# Your Twitter API credentials\nAPI_KEY = 'your_api_key'\nAPI_SECRET_KEY = 'your_api_secret_key'\nACCESS_TOKEN = 'your_access_token'\nACCESS_TOKEN_SECRET = 'your_access_token_secret'\n\n# Authenticate to Twitter\nauth = tweepy.OAuthHandler(API_KEY, API_SECRET_KEY)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET)\n\n# Create API object\napi = tweepy.API(auth)\n\ndef get_tweets(query, count=100):\n    \"\"\"\n    Function to fetch tweets based on a query\n    \"\"\"\n    try:\n        # Fetch tweets\n        tweets = api.search_tweets(q=query, count=count, lang='en', tweet_mode='extended')\n        return tweets\n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n        return []\n\ndef analyze_sentiment(tweet):\n    \"\"\"\n    Function to classify sentiment of a tweet using TextBlob\n    \"\"\"\n    analysis = TextBlob(tweet.full_text)\n    # Set sentiment\n    if analysis.sentiment.polarity > 0:\n        return 'positive'\n    elif analysis.sentiment.polarity == 0:\n        return 'neutral'\n    else:\n        return 'negative'\n\ndef main():\n    # Query to search for\n    query = 'Python'\n    # Fetch tweets\n    tweets = get_tweets(query, count=10)\n\n    # Analyze each tweet\n    for tweet in tweets:\n        print(f\"Tweet: {tweet.full_text}\")\n        sentiment = analyze_sentiment(tweet)\n        print(f\"Sentiment: {sentiment}\\n\")\n\nif __name__ == '__main__':\n    main()\n```\n\n### How the Script Works:\n\n1. **Authentication**: The script uses `tweepy` to handle authentication and access Twitter's API. You must provide your own API keys and tokens, which you can obtain by creating a Twitter Developer account.\n\n2. **Fetching Tweets**: The `get_tweets` function uses the `api.search_tweets` method to fetch tweets based on a query. The `count` parameter specifies the number of tweets to retrieve, and `lang='en'` ensures only English tweets are fetched.\n\n3. **Sentiment Analysis**: The `analyze_sentiment` function uses `TextBlob` to perform sentiment analysis. It classifies the sentiment as positive, neutral, or negative based on the polarity score.\n\n4. **Running the Script**: The `main` function executes the process of fetching tweets and analyzing their sentiment, printing the results to the console.\n\n### Notes:\n\n- The number of tweets you can fetch is limited by Twitter's API rate limits.\n- Ensure your API credentials are kept secure and not shared publicly.\n- You can expand this script by adding more advanced features, such as storing results in a database or visualizing sentiment trends over time.", "created_at": "2025-04-26T19:22:57.750890"}], "provider": "openai", "model": "gpt-4o", "system_prompt": null, "created_at": "2025-04-26T19:22:50.343201", "updated_at": "2025-04-26T19:22:57.750908"}